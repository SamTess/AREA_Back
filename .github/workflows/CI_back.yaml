name: AREA_BACK CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  JAVA_VERSION: '21'

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-gradle.outputs.cache-hit }}
      gradle-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=gradle-${{ runner.os }}-${{ env.JAVA_VERSION }}-${{ hashFiles('**/*.gradle*', 'gradle/wrapper/gradle-wrapper.properties') }}" >> $GITHUB_OUTPUT

      - name: Cache Gradle dependencies
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            gradle-${{ runner.os }}-${{ env.JAVA_VERSION }}-
            gradle-${{ runner.os }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Download dependencies
        if: steps.cache-gradle.outputs.cache-hit != 'true'
        run: ./gradlew dependencies --no-daemon

      - name: Verify setup
        run: |
          echo "✅ Gradle setup completed successfully"
          ./gradlew --version
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Restore Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ needs.setup.outputs.gradle-cache-key }}
          restore-keys: |
            gradle-${{ runner.os }}-${{ env.JAVA_VERSION }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest

      - name: Upload checkstyle results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkstyle-results
          path: build/reports/checkstyle/

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    env:
      JWT_SECRET: test-secret-key-that-is-long-enough-for-testing-purposes-only
      SPRING_PROFILES_ACTIVE: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Restore Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ needs.setup.outputs.gradle-cache-key }}
          restore-keys: |
            gradle-${{ runner.os }}-${{ env.JAVA_VERSION }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Check if unit tests exist
        id: check-unit-tests
        run: |
          if [ -d "src/test" ] && [ "$(find src/test -name '*.java' | wc -l)" -gt 0 ]; then
            echo "tests-exist=true" >> $GITHUB_OUTPUT
            echo "✅ Unit tests found, proceeding with test execution"
          else
            echo "tests-exist=false" >> $GITHUB_OUTPUT
            echo "⚠️ No unit tests found in src/test directory"
          fi

      - name: Run unit tests
        if: steps.check-unit-tests.outputs.tests-exist == 'true'
        run: ./gradlew test --continue

      - name: Generate test reports
        if: steps.check-unit-tests.outputs.tests-exist == 'true' && (success() || failure())
        run: ./gradlew jacocoTestReport

      - name: Upload test results
        if: steps.check-unit-tests.outputs.tests-exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/jacocoHtml/
          retention-days: 7

      - name: Skip unit tests
        if: steps.check-unit-tests.outputs.tests-exist == 'false'
        run: echo "No unit tests to run, skipping test execution"

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Restore Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ needs.setup.outputs.gradle-cache-key }}
          restore-keys: |
            gradle-${{ runner.os }}-${{ env.JAVA_VERSION }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/libs/
            build/distributions/
          retention-days: 1

  release:
    name: Release to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: echo "Deploy JAR to staging environment (e.g., via Docker, Kubernetes, or cloud service)"

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Restore Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ needs.setup.outputs.gradle-cache-key }}
          restore-keys: |
            gradle-${{ runner.os }}-${{ env.JAVA_VERSION }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Generate Javadoc
        run: ./gradlew javadoc

      - name: Generate AsciiDoc documentation
        run: ./gradlew asciidoctor

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            build/docs/
            build/asciidoc/
          retention-days: 7