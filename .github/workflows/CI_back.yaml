name: AREA_BACK CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Poc/backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Maven checkstyle
        run: mvn checkstyle:check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./Poc/backend
    env:
      JWT_SECRET: test-secret-key-that-is-long-enough-for-testing-purposes-only
      DB_URL: jdbc:h2:mem:testdb
      DB_USER: sa
      DB_PASS: ""
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      GITHUB_APP_CLIENT_ID: test-client-id
      GITHUB_APP_CLIENT_SECRET: test-client-secret
      SERVER_PORT: 8080
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Check if tests exist
        id: check-tests
        run: |
          if [ -d "src/test" ] && [ "$(find src/test -name '*.java' | wc -l)" -gt 0 ]; then
            echo "tests-exist=true" >> $GITHUB_OUTPUT
            echo "✅ Tests found, proceeding with test execution"
          else
            echo "tests-exist=false" >> $GITHUB_OUTPUT
            echo "⚠️ No tests found in src/test directory"
          fi
      - name: Run tests
        if: steps.check-tests.outputs.tests-exist == 'true'
        run: mvn test -Dspring.profiles.active=test
      - name: Skip tests
        if: steps.check-tests.outputs.tests-exist == 'false'
        run: echo "No tests to run, skipping test execution"

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    defaults:
      run:
        working-directory: ./Poc/backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean package -DskipTests

  release:
    name: Release to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to staging
        run: echo "Deploy JAR to staging environment (e.g., via Docker, Kubernetes, or cloud service)"

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./Poc/backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Generate Javadoc
        run: mvn javadoc:javadoc