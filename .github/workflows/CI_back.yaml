name: AREA_BACK CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest
      - name: Upload checkstyle results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkstyle-results
          path: build/reports/checkstyle/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    env:
      JWT_SECRET: test-secret-key-that-is-long-enough-for-testing-purposes-only
      SPRING_PROFILES_ACTIVE: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Check if tests exist
        id: check-tests
        run: |
          if [ -d "src/test" ] && [ "$(find src/test -name '*.java' | wc -l)" -gt 0 ]; then
            echo "tests-exist=true" >> $GITHUB_OUTPUT
            echo "✅ Tests found, proceeding with test execution"
          else
            echo "tests-exist=false" >> $GITHUB_OUTPUT
            echo "⚠️ No tests found in src/test directory"
          fi
      - name: Run tests
        if: steps.check-tests.outputs.tests-exist == 'true'
        run: ./gradlew test --continue
      - name: Skip tests
        if: steps.check-tests.outputs.tests-exist == 'false'
        run: echo "No tests to run, skipping test execution"
      - name: Generate test reports
        if: steps.check-tests.outputs.tests-exist == 'true' && (success() || failure())
        run: ./gradlew jacocoTestReport
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && steps.check-tests.outputs.tests-exist == 'true'
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/jacocoHtml/
          retention-days: 30

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew clean build -x test
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/libs/
            build/distributions/

  release:
    name: Release to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to staging
        run: echo "Deploy JAR to staging environment (e.g., via Docker, Kubernetes, or cloud service)"

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Generate Javadoc
        run: ./gradlew javadoc
      - name: Generate AsciiDoc documentation
        run: ./gradlew asciidoctor
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            build/docs/
            build/asciidoc/