services:
  postgres:
    image: 'postgres:15'
    container_name: area-postgres
    env_file: ../.env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USERNAME}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - area-network

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    container_name: area-redis
    env_file: ../.env
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_SSL=${REDIS_SSL:-false}
    volumes:
      - redis_data:/data
      - redis_certs:/usr/local/etc/redis/certs
    healthcheck:
      test: ["CMD", "sh", "-c", "if [ \"$$REDIS_SSL\" = \"true\" ]; then redis-cli --tls --cert /usr/local/etc/redis/certs/redis-cert.pem --key /usr/local/etc/redis/certs/redis-key.pem --cacert /usr/local/etc/redis/certs/ca-cert.pem --no-auth-warning -a $$REDIS_PASSWORD ping 2>/dev/null | grep PONG; else redis-cli --no-auth-warning -a $$REDIS_PASSWORD ping 2>/dev/null | grep PONG; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - area-network

  area-backend:
    build:
      context: ..
      dockerfile: Docker/Dockerfile
    container_name: area-backend
    env_file: ../.env
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME}
    ports:
      - '${SERVER_PORT}:8080'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - area-network

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: area-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   restart: unless-stopped
  #   depends_on:
  #     - area-backend
  #   networks:
  #     - area-network

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: area-grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
  #     - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${ADMIN_USERNAME:-admin}
  #     - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   restart: unless-stopped
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - area-network

networks:
  area-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  redis_certs:
  # prometheus_data:
  # grafana_data:
