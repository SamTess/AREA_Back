"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[1930],{6886:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"technical/diagrams/area-creation-sequence","title":"AREA Creation Flow - Sequence Diagram","description":"This diagram shows the complete process of creating an automation workflow (AREA) with actions, reactions, and links.","source":"@site/docs/technical/diagrams/05-area-creation-sequence.md","sourceDirName":"technical/diagrams","slug":"/technical/diagrams/area-creation-sequence","permalink":"/AREA_Back/docs/technical/diagrams/area-creation-sequence","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/technical/diagrams/05-area-creation-sequence.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"OAuth Authentication Flow - Sequence Diagram","permalink":"/AREA_Back/docs/technical/diagrams/oauth-flow-sequence"},"next":{"title":"AREA Execution Flow - Sequence Diagram","permalink":"/AREA_Back/docs/technical/diagrams/area-execution-sequence"}}');var t=i(4848),r=i(8453);const c={},o="AREA Creation Flow - Sequence Diagram",s={},l=[{value:"Request Structure Example",id:"request-structure-example",level:2},{value:"Key Processes",id:"key-processes",level:2},{value:"1. Validation Phase",id:"1-validation-phase",level:3},{value:"2. Entity Creation",id:"2-entity-creation",level:3},{value:"3. Link Establishment",id:"3-link-establishment",level:3},{value:"4. Activation Setup",id:"4-activation-setup",level:3},{value:"5. Response Building",id:"5-response-building",level:3},{value:"Data Mapping",id:"data-mapping",level:2},{value:"Conditional Execution",id:"conditional-execution",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"area-creation-flow---sequence-diagram",children:"AREA Creation Flow - Sequence Diagram"})}),"\n",(0,t.jsx)(n.p,{children:"This diagram shows the complete process of creating an automation workflow (AREA) with actions, reactions, and links."}),"\n",(0,t.jsx)(n.mermaid,{value:'sequenceDiagram\n    actor User\n    participant Frontend\n    participant AreaController\n    participant AreaService\n    participant ActionInstanceRepo\n    participant ActionLinkService\n    participant ActivationModeRepo\n    participant Database\n\n    User->>Frontend: Design AREA workflow\n    Note over User,Frontend: Select trigger (action)<br/>Configure reactions<br/>Map data between steps\n\n    Frontend->>Frontend: Build CreateAreaRequest\n    Note over Frontend: {<br/>  name, description,<br/>  actions: [trigger],<br/>  reactions: [reaction1, reaction2],<br/>  connections: [links]<br/>}\n\n    Frontend->>AreaController: POST /areas/with-actions-and-links\n    activate AreaController\n    AreaController->>AreaController: Validate JWT & extract userId\n    AreaController->>AreaService: createAreaWithActionsAndLinks(request)\n    activate AreaService\n\n    %% Validation Phase\n    AreaService->>Database: Find User by ID\n    Database--\x3e>AreaService: User entity\n\n    AreaService->>AreaService: Validate actions & reactions\n    loop For each action/reaction\n        AreaService->>Database: Verify ActionDefinition exists\n        Database--\x3e>AreaService: ActionDefinition\n        AreaService->>Database: Verify ServiceAccount exists (if specified)\n        Database--\x3e>AreaService: ServiceAccount\n        AreaService->>AreaService: Validate service matches\n    end\n\n    %% Area Creation\n    AreaService->>Database: Create Area entity\n    Note over Database: Store name, description<br/>actions/reactions as JSONB\n    Database--\x3e>AreaService: Saved Area with ID\n\n    %% Action/Reaction Instance Creation\n    AreaService->>AreaService: Create action instances with mapping\n    loop For each action (trigger)\n        AreaService->>ActionInstanceRepo: Create ActionInstance\n        Note over ActionInstanceRepo: Store parameters,<br/>mapping, conditions\n        ActionInstanceRepo->>Database: INSERT ActionInstance\n        Database--\x3e>ActionInstanceRepo: ActionInstance with ID\n        ActionInstanceRepo--\x3e>AreaService: ActionInstance + serviceId mapping\n    end\n\n    loop For each reaction\n        AreaService->>ActionInstanceRepo: Create ActionInstance\n        Note over ActionInstanceRepo: Store parameters,<br/>mapping, conditions,<br/>execution order\n        ActionInstanceRepo->>Database: INSERT ActionInstance\n        Database--\x3e>ActionInstanceRepo: ActionInstance with ID\n        ActionInstanceRepo--\x3e>AreaService: ActionInstance + serviceId mapping\n    end\n\n    %% Link Creation\n    alt Connections provided\n        AreaService->>ActionLinkService: Create action links\n        activate ActionLinkService\n        loop For each connection\n            ActionLinkService->>ActionLinkService: Resolve service IDs to instance IDs\n            ActionLinkService->>Database: Create ActionLink\n            Note over Database: Links source action<br/>to target reaction\n            Database--\x3e>ActionLinkService: ActionLink created\n        end\n        ActionLinkService--\x3e>AreaService: Links created\n        deactivate ActionLinkService\n    end\n\n    %% Activation Mode Setup\n    loop For each ActionInstance\n        alt Has activation config\n            AreaService->>AreaService: Extract activation config\n            AreaService->>ActivationModeRepo: Create ActivationMode\n            Note over ActivationModeRepo: Configure trigger type:<br/>WEBHOOK, CRON, POLL\n            ActivationModeRepo->>Database: INSERT ActivationMode\n            Database--\x3e>ActivationModeRepo: Created\n        end\n    end\n\n    %% Register Webhooks (if applicable)\n    loop For webhook-activated actions\n        AreaService->>AreaService: Check if WEBHOOK mode\n        alt Is Webhook\n            AreaService->>AreaService: Register webhook with service\n            Note over AreaService: Subscribe to events<br/>from external service\n        end\n    end\n\n    %% Schedule Cron Jobs (if applicable)\n    loop For cron-activated actions\n        AreaService->>AreaService: Check if CRON mode\n        alt Is Cron\n            AreaService->>AreaService: Schedule cron job\n            Note over AreaService: Register cron expression<br/>with scheduler\n        end\n    end\n\n    %% Build Response\n    AreaService->>Database: Fetch all ActionInstances for area\n    Database--\x3e>AreaService: List of ActionInstances\n    AreaService->>ActionLinkService: Get links by area ID\n    ActionLinkService--\x3e>AreaService: List of ActionLinks\n    AreaService->>AreaService: Enrich actions/reactions with instance IDs\n    AreaService->>AreaService: Build AreaResponse\n\n    AreaService--\x3e>AreaController: AreaResponse\n    deactivate AreaService\n    AreaController--\x3e>Frontend: 201 Created + AreaResponse\n    deactivate AreaController\n    Frontend--\x3e>User: Show "AREA created successfully" \u2713\n    Frontend->>Frontend: Navigate to AREA dashboard'}),"\n",(0,t.jsx)(n.h2,{id:"request-structure-example",children:"Request Structure Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "userId": "550e8400-e29b-41d4-a716-446655440000",\n  "name": "GitHub to Slack Notifier",\n  "description": "Send Slack message when GitHub issue is created",\n  "actions": [\n    {\n      "actionDefinitionId": "github-issue-created-def-id",\n      "name": "GitHub Issue Trigger",\n      "serviceAccountId": "github-account-id",\n      "parameters": {\n        "repository": "user/repo"\n      },\n      "activationConfig": {\n        "type": "WEBHOOK",\n        "config": {\n          "events": ["issues.opened"]\n        }\n      }\n    }\n  ],\n  "reactions": [\n    {\n      "actionDefinitionId": "slack-send-message-def-id",\n      "name": "Send Slack Alert",\n      "serviceAccountId": "slack-account-id",\n      "parameters": {\n        "channel": "#alerts"\n      },\n      "mapping": {\n        "message": "{{trigger.issue.title}} - {{trigger.issue.url}}"\n      },\n      "order": 1\n    }\n  ],\n  "connections": [\n    {\n      "sourceServiceId": "action-0",\n      "targetServiceId": "reaction-0"\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"key-processes",children:"Key Processes"}),"\n",(0,t.jsx)(n.h3,{id:"1-validation-phase",children:"1. Validation Phase"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify user exists and is active"}),"\n",(0,t.jsx)(n.li,{children:"Validate all ActionDefinitions exist"}),"\n",(0,t.jsx)(n.li,{children:"Verify ServiceAccounts belong to user and match services"}),"\n",(0,t.jsx)(n.li,{children:"Ensure proper action/reaction configuration"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-entity-creation",children:"2. Entity Creation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create Area entity with JSONB actions/reactions"}),"\n",(0,t.jsx)(n.li,{children:"Create ActionInstance for each action and reaction"}),"\n",(0,t.jsx)(n.li,{children:"Store parameters, mappings, and conditions"}),"\n",(0,t.jsx)(n.li,{children:"Assign execution order to reactions"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-link-establishment",children:"3. Link Establishment"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Resolve temporary service IDs to actual ActionInstance IDs"}),"\n",(0,t.jsx)(n.li,{children:"Create ActionLink entities connecting triggers to reactions"}),"\n",(0,t.jsx)(n.li,{children:"Enable data flow between actions"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-activation-setup",children:"4. Activation Setup"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Parse activation configuration"}),"\n",(0,t.jsx)(n.li,{children:"Create ActivationMode entities"}),"\n",(0,t.jsx)(n.li,{children:"Register webhooks with external services"}),"\n",(0,t.jsx)(n.li,{children:"Schedule cron jobs for periodic triggers"}),"\n",(0,t.jsx)(n.li,{children:"Start polling services if needed"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"5-response-building",children:"5. Response Building"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Enrich JSONB data with ActionInstance IDs"}),"\n",(0,t.jsx)(n.li,{children:"Include all created links"}),"\n",(0,t.jsx)(n.li,{children:"Return complete AREA configuration"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"data-mapping",children:"Data Mapping"}),"\n",(0,t.jsx)(n.p,{children:"The system supports sophisticated data mapping using JSON path expressions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "mapping": {\n    "message": "New issue: {{trigger.issue.title}}",\n    "url": "{{trigger.issue.html_url}}",\n    "author": "{{trigger.issue.user.login}}"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conditional-execution",children:"Conditional Execution"}),"\n",(0,t.jsx)(n.p,{children:"Reactions can have conditions evaluated before execution:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "condition": {\n    "operator": "AND",\n    "rules": [\n      {\n        "field": "{{trigger.issue.labels}}",\n        "operator": "contains",\n        "value": "bug"\n      },\n      {\n        "field": "{{trigger.issue.state}}",\n        "operator": "equals",\n        "value": "open"\n      }\n    ]\n  }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>o});var a=i(6540);const t={},r=a.createContext(t);function c(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);