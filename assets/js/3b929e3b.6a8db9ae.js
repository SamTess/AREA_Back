"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[3020],{8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:n},e.children)}},9593:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"technical/service-integration","title":"Service Integration Architecture","description":"Table of Contents","source":"@site/docs/technical/04-service-integration.md","sourceDirName":"technical","slug":"/technical/service-integration","permalink":"/AREA_Back/docs/technical/service-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/technical/04-service-integration.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Area Management System","permalink":"/AREA_Back/docs/technical/area-management"},"next":{"title":"Database Schema Documentation","permalink":"/AREA_Back/docs/technical/database-schema"}}');var r=i(4848),s=i(8453);const c={},a="Service Integration Architecture",o={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Supported Services",id:"supported-services",level:3},{value:"Integration Capabilities",id:"integration-capabilities",level:3},{value:"Service Framework",id:"service-framework",level:2},{value:"Service Entity Model",id:"service-entity-model",level:3},{value:"Authentication Types",id:"authentication-types",level:3},{value:"Service Account Management",id:"service-account-management",level:3},{value:"Service Discovery",id:"service-discovery",level:2},{value:"Service Registry",id:"service-registry",level:3},{value:"About Endpoint",id:"about-endpoint",level:3},{value:"Authentication Management",id:"authentication-management",level:2},{value:"Service Account Service",id:"service-account-service",level:3},{value:"Token Encryption Service",id:"token-encryption-service",level:3},{value:"Supported Services",id:"supported-services-1",level:2},{value:"GitHub Integration",id:"github-integration",level:3},{value:"GitHub Service Implementation",id:"github-service-implementation",level:4},{value:"GitHub Features",id:"github-features",level:4},{value:"Google Integration",id:"google-integration",level:3},{value:"Google Service Implementation",id:"google-service-implementation",level:4},{value:"Google Features",id:"google-features",level:4},{value:"Discord Integration",id:"discord-integration",level:3},{value:"Discord Service Implementation",id:"discord-service-implementation",level:4},{value:"Discord Features",id:"discord-features",level:4},{value:"Slack Integration",id:"slack-integration",level:3},{value:"Slack Service Implementation",id:"slack-service-implementation",level:4},{value:"Slack Features",id:"slack-features",level:4},{value:"Adding New Services",id:"adding-new-services",level:3},{value:"Webhook System",id:"webhook-system",level:2},{value:"Webhook Controller",id:"webhook-controller",level:3},{value:"GitHub Event Processing",id:"github-event-processing",level:3},{value:"Webhook System",id:"webhook-system-1",level:2},{value:"Webhook Signature Validation",id:"webhook-signature-validation",level:3},{value:"Webhook Deduplication",id:"webhook-deduplication",level:3},{value:"Service Cache",id:"service-cache",level:2},{value:"Service Cache Implementation",id:"service-cache-implementation",level:3},{value:"Redis Cache Configuration",id:"redis-cache-configuration",level:3},{value:"Event Stream Processing",id:"event-stream-processing",level:2},{value:"Redis Event Service",id:"redis-event-service",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Service Management Endpoints",id:"service-management-endpoints",level:3},{value:"Get All Services",id:"get-all-services",level:4},{value:"Get Enabled Services",id:"get-enabled-services",level:4},{value:"Get Service Details",id:"get-service-details",level:4},{value:"About Information",id:"about-information",level:4},{value:"Service Account Endpoints",id:"service-account-endpoints",level:3},{value:"Create Service Account",id:"create-service-account",level:4},{value:"Get User Service Accounts",id:"get-user-service-accounts",level:4},{value:"Update Service Account",id:"update-service-account",level:4},{value:"Delete Service Account",id:"delete-service-account",level:4},{value:"Webhook Endpoints",id:"webhook-endpoints",level:3},{value:"GitHub Webhook",id:"github-webhook",level:4},{value:"Error Handling",id:"error-handling",level:2},{value:"Service Integration Errors",id:"service-integration-errors",level:3},{value:"Webhook Processing Errors",id:"webhook-processing-errors",level:3},{value:"Monitoring &amp; Observability",id:"monitoring--observability",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Health Checks",id:"health-checks",level:3},{value:"Alerting",id:"alerting",level:3}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"service-integration-architecture",children:"Service Integration Architecture"})}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#service-framework",children:"Service Framework"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#service-discovery",children:"Service Discovery"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#authentication-management",children:"Authentication Management"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#supported-services",children:"Supported Services"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#github-integration",children:"GitHub Integration"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#google-integration",children:"Google Integration"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#discord-integration",children:"Discord Integration"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#slack-integration",children:"Slack Integration"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#webhook-system",children:"Webhook System"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#service-cache",children:"Service Cache"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#api-reference",children:"API Reference"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Service Integration Architecture provides a unified framework for connecting with external services (GitHub, Google, Discord, Slack, etc.). It handles authentication, API interactions, webhooks, and event processing in a scalable and extensible manner."}),"\n",(0,r.jsx)(n.h3,{id:"supported-services",children:"Supported Services"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Service"}),(0,r.jsx)(n.th,{children:"Auth Type"}),(0,r.jsx)(n.th,{children:"Actions"}),(0,r.jsx)(n.th,{children:"Events"}),(0,r.jsx)(n.th,{children:"Webhooks"}),(0,r.jsx)(n.th,{children:"Status"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"GitHub"})}),(0,r.jsx)(n.td,{children:"OAuth2"}),(0,r.jsx)(n.td,{children:"Create issues, PRs, comments"}),(0,r.jsx)(n.td,{children:"New issues, PRs, commits"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"Active"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Google"})}),(0,r.jsx)(n.td,{children:"OAuth2"}),(0,r.jsx)(n.td,{children:"Gmail, Calendar, Drive, Sheets"}),(0,r.jsx)(n.td,{children:"New emails, events, files"}),(0,r.jsx)(n.td,{children:"\u26a0\ufe0f"}),(0,r.jsx)(n.td,{children:"Polling"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Discord"})}),(0,r.jsx)(n.td,{children:"OAuth2"}),(0,r.jsx)(n.td,{children:"Send messages, manage channels"}),(0,r.jsx)(n.td,{children:"New messages, members, reactions"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"Active"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Slack"})}),(0,r.jsx)(n.td,{children:"OAuth2"}),(0,r.jsx)(n.td,{children:"Send messages, manage channels"}),(0,r.jsx)(n.td,{children:"New messages, reactions"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"Active"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"integration-capabilities",children:"Integration Capabilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OAuth2 Authentication"}),": Secure user authorization with token encryption"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Real-time Webhooks"}),": Instant event notifications from external services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Polling"}),": Periodic checking for services without webhook support"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Token Management"}),": Automatic refresh and secure storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rate Limiting"}),": Respect service API limits"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Caching"}),": Redis-based caching for performance optimization"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"service-framework",children:"Service Framework"}),"\n",(0,r.jsx)(n.h3,{id:"service-entity-model",children:"Service Entity Model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "a_services", schema = "area")\npublic class Service {\n    @Id\n    private UUID id;\n    \n    @NotBlank\n    @Column(unique = true)\n    private String key;                   // Unique identifier (github, slack, google)\n    \n    @NotBlank\n    private String name;                  // Display name\n    \n    @Enumerated(EnumType.STRING)\n    private AuthType auth;                // OAUTH2, APIKEY, NONE\n    \n    private String docsUrl;               // Service documentation\n    private String iconLightUrl;          // Light theme icon\n    private String iconDarkUrl;           // Dark theme icon\n    \n    private Boolean isActive;             // Enabled/disabled state\n    \n    private LocalDateTime createdAt;\n    private LocalDateTime updatedAt;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"authentication-types",children:"Authentication Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public enum AuthType {\n    OAUTH2,        // OAuth2 flow (GitHub, Google, Slack)\n    APIKEY,        // API key authentication  \n    NONE           // No authentication required\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"service-account-management",children:"Service Account Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "a_service_accounts", schema = "area")\npublic class ServiceAccount {\n    @Id\n    private UUID id;\n    \n    @ManyToOne\n    private User user;                    // Account owner\n    \n    @ManyToOne  \n    private Service service;              // Associated service\n    \n    private String accountName;           // User-friendly name\n    \n    // Encrypted tokens\n    private String accessTokenEnc;        // Encrypted access token\n    private String refreshTokenEnc;       // Encrypted refresh token\n    \n    private LocalDateTime expiresAt;      // Token expiration\n    private String scopes;                // OAuth scopes\n    \n    @JdbcTypeCode(SqlTypes.JSON)\n    private Map<String, Object> metadata; // Service-specific data\n    \n    private Boolean isActive;\n    private LocalDateTime createdAt;\n    private LocalDateTime updatedAt;\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"service-discovery",children:"Service Discovery"}),"\n",(0,r.jsx)(n.h3,{id:"service-registry",children:"Service Registry"}),"\n",(0,r.jsx)(n.p,{children:"The system maintains a dynamic registry of available services and their capabilities:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/services")\npublic class ServiceController {\n    \n    @GetMapping\n    public ResponseEntity<Page<ServiceResponse>> getAllServices(\n            @RequestParam(defaultValue = "0") int page,\n            @RequestParam(defaultValue = "20") int size,\n            @RequestParam(defaultValue = "id") String sortBy,\n            @RequestParam(defaultValue = "asc") String sortDir) {\n        \n        Pageable pageable = PageRequest.of(page, size, Sort.by(sortDir.equals("desc") \n            ? Sort.Direction.DESC : Sort.Direction.ASC, sortBy));\n        \n        Page<Service> services = serviceRepository.findAll(pageable);\n        Page<ServiceResponse> serviceResponses = services.map(this::convertToResponse);\n        \n        return ResponseEntity.ok(serviceResponses);\n    }\n    \n    @GetMapping("/catalog/enabled")\n    public ResponseEntity<List<ServiceResponse>> getEnabledServices() {\n        List<Service> enabledServices = serviceRepository.findAllEnabledServices();\n        List<ServiceResponse> responses = enabledServices.stream()\n            .map(this::convertToResponse)\n            .collect(Collectors.toList());\n        return ResponseEntity.ok(responses);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"about-endpoint",children:"About Endpoint"}),"\n",(0,r.jsx)(n.p,{children:"Provides comprehensive service information for client applications:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/")\npublic class AboutController {\n    \n    @GetMapping("/about.json")\n    public ResponseEntity<Map<String, Object>> getAbout() {\n        Map<String, Object> about = new HashMap<>();\n        about.put("client", Map.of("host", "localhost:8080"));\n        about.put("server", Map.of("current_time", LocalDateTime.now()));\n        about.put("services", buildServicesInfo());\n        \n        return ResponseEntity.ok(about);\n    }\n    \n    private List<Map<String, Object>> buildServicesInfo() {\n        List<Service> services = serviceRepository.findAllEnabledServices();\n        \n        return services.stream().map(service -> {\n            Map<String, Object> serviceInfo = new HashMap<>();\n            serviceInfo.put("name", service.getName());\n            serviceInfo.put("key", service.getKey());\n            \n            // Get available actions (triggers)\n            List<ActionDefinition> actions = actionDefinitionRepository\n                .findByServiceKey(service.getKey())\n                .stream()\n                .filter(ActionDefinition::getIsEventCapable)\n                .collect(Collectors.toList());\n            \n            serviceInfo.put("actions", actions.stream()\n                .map(this::mapActionDefinition)\n                .collect(Collectors.toList()));\n            \n            // Get available reactions\n            List<ActionDefinition> reactions = actionDefinitionRepository\n                .findByServiceKey(service.getKey())\n                .stream()\n                .filter(ActionDefinition::getIsExecutable)\n                .collect(Collectors.toList());\n            \n            serviceInfo.put("reactions", reactions.stream()\n                .map(this::mapActionDefinition)\n                .collect(Collectors.toList()));\n            \n            return serviceInfo;\n        }).collect(Collectors.toList());\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"authentication-management",children:"Authentication Management"}),"\n",(0,r.jsx)(n.h3,{id:"service-account-service",children:"Service Account Service"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Service\n@Transactional\npublic class ServiceAccountService {\n    \n    private final ServiceAccountRepository serviceAccountRepository;\n    private final TokenEncryptionService tokenEncryptionService;\n    \n    /**\n     * Creates a new service account with OAuth2 tokens\n     */\n    public ServiceAccount createServiceAccount(User user, \n                                             Service service,\n                                             String accountName,\n                                             String accessToken,\n                                             String refreshToken,\n                                             LocalDateTime expiresAt,\n                                             String scopes) {\n        \n        ServiceAccount account = new ServiceAccount();\n        account.setUser(user);\n        account.setService(service);\n        account.setAccountName(accountName);\n        account.setAccessTokenEnc(tokenEncryptionService.encrypt(accessToken));\n        account.setRefreshTokenEnc(tokenEncryptionService.encrypt(refreshToken));\n        account.setExpiresAt(expiresAt);\n        account.setScopes(scopes);\n        account.setIsActive(true);\n        \n        return serviceAccountRepository.save(account);\n    }\n    \n    /**\n     * Retrieves decrypted access token\n     */\n    public String getAccessToken(ServiceAccount account) {\n        return tokenEncryptionService.decrypt(account.getAccessTokenEnc());\n    }\n    \n    /**\n     * Updates tokens after refresh\n     */\n    public void updateTokens(ServiceAccount account, \n                           String newAccessToken,\n                           String newRefreshToken,\n                           LocalDateTime newExpiresAt) {\n        \n        account.setAccessTokenEnc(tokenEncryptionService.encrypt(newAccessToken));\n        account.setRefreshTokenEnc(tokenEncryptionService.encrypt(newRefreshToken));\n        account.setExpiresAt(newExpiresAt);\n        account.setUpdatedAt(LocalDateTime.now());\n        \n        serviceAccountRepository.save(account);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"token-encryption-service",children:"Token Encryption Service"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class TokenEncryptionService {\n    \n    private static final String ENCRYPTION_ALGORITHM = "AES/GCM/NoPadding";\n    private static final int GCM_IV_LENGTH = 12;\n    private static final int GCM_TAG_LENGTH = 16;\n    \n    @Value("${app.encryption.secret}")\n    private String encryptionSecret;\n    \n    /**\n     * Encrypts sensitive token data\n     */\n    public String encrypt(String plaintext) {\n        try {\n            SecretKeySpec secretKey = new SecretKeySpec(\n                encryptionSecret.getBytes(), "AES");\n            \n            Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n            \n            byte[] iv = new byte[GCM_IV_LENGTH];\n            SecureRandom.getInstanceStrong().nextBytes(iv);\n            \n            GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(\n                GCM_TAG_LENGTH * 8, iv);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, gcmParameterSpec);\n            \n            byte[] cipherText = cipher.doFinal(plaintext.getBytes());\n            \n            // Combine IV and ciphertext\n            byte[] encryptedWithIv = new byte[GCM_IV_LENGTH + cipherText.length];\n            System.arraycopy(iv, 0, encryptedWithIv, 0, GCM_IV_LENGTH);\n            System.arraycopy(cipherText, 0, encryptedWithIv, GCM_IV_LENGTH, cipherText.length);\n            \n            return Base64.getEncoder().encodeToString(encryptedWithIv);\n            \n        } catch (Exception e) {\n            throw new RuntimeException("Encryption failed", e);\n        }\n    }\n    \n    /**\n     * Decrypts sensitive token data\n     */\n    public String decrypt(String encryptedText) {\n        try {\n            byte[] encryptedWithIv = Base64.getDecoder().decode(encryptedText);\n            \n            // Extract IV and ciphertext\n            byte[] iv = new byte[GCM_IV_LENGTH];\n            byte[] cipherText = new byte[encryptedWithIv.length - GCM_IV_LENGTH];\n            \n            System.arraycopy(encryptedWithIv, 0, iv, 0, GCM_IV_LENGTH);\n            System.arraycopy(encryptedWithIv, GCM_IV_LENGTH, cipherText, 0, cipherText.length);\n            \n            SecretKeySpec secretKey = new SecretKeySpec(\n                encryptionSecret.getBytes(), "AES");\n            \n            Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n            GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(\n                GCM_TAG_LENGTH * 8, iv);\n            cipher.init(Cipher.DECRYPT_MODE, secretKey, gcmParameterSpec);\n            \n            byte[] plainText = cipher.doFinal(cipherText);\n            return new String(plainText);\n            \n        } catch (Exception e) {\n            throw new RuntimeException("Decryption failed", e);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"supported-services-1",children:"Supported Services"}),"\n",(0,r.jsx)(n.h3,{id:"github-integration",children:"GitHub Integration"}),"\n",(0,r.jsx)(n.p,{children:"GitHub provides comprehensive repository management, issue tracking, and collaboration features."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Service Key"}),": ",(0,r.jsx)(n.code,{children:"github"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Documentation"}),": ",(0,r.jsx)(n.a,{href:"/AREA_Back/docs/providers/github",children:"GitHub Provider Documentation"})]}),"\n",(0,r.jsx)(n.h4,{id:"github-service-implementation",children:"GitHub Service Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\n@ConditionalOnProperty(name = "github.enabled", havingValue = "true", matchIfMissing = true)\npublic class GitHubActionService {\n    \n    private final ServiceAccountService serviceAccountService;\n    private final WebClient webClient;\n    \n    /**\n     * Creates a GitHub issue\n     */\n    public Map<String, Object> createIssue(ServiceAccount serviceAccount,\n                                          String repository,\n                                          String title,\n                                          String body) {\n        \n        String accessToken = serviceAccountService.getAccessToken(serviceAccount);\n        \n        Map<String, Object> issueRequest = Map.of(\n            "title", title,\n            "body", body\n        );\n        \n        try {\n            WebClient.ResponseSpec response = webClient\n                .post()\n                .uri("/repos/{repo}/issues", repository)\n                .header("Authorization", "token " + accessToken)\n                .header("Accept", "application/vnd.github.v3+json")\n                .bodyValue(issueRequest)\n                .retrieve();\n            \n            return response.bodyToMono(Map.class).block();\n            \n        } catch (WebClientResponseException e) {\n            throw new ServiceIntegrationException(\n                "Failed to create GitHub issue: " + e.getResponseBodyAsString(), e);\n        }\n    }\n    \n    /**\n     * Lists repository issues\n     */\n    public List<Map<String, Object>> listIssues(ServiceAccount serviceAccount,\n                                               String repository,\n                                               String state) {\n        \n        String accessToken = serviceAccountService.getAccessToken(serviceAccount);\n        \n        try {\n            WebClient.ResponseSpec response = webClient\n                .get()\n                .uri(uriBuilder -> uriBuilder\n                    .path("/repos/{repo}/issues")\n                    .queryParam("state", state)\n                    .build(repository))\n                .header("Authorization", "token " + accessToken)\n                .header("Accept", "application/vnd.github.v3+json")\n                .retrieve();\n            \n            return response.bodyToMono(List.class).block();\n            \n        } catch (WebClientResponseException e) {\n            throw new ServiceIntegrationException(\n                "Failed to list GitHub issues: " + e.getResponseBodyAsString(), e);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"github-features",children:"GitHub Features"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Available Actions"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create issues"}),"\n",(0,r.jsx)(n.li,{children:"Comment on issues"}),"\n",(0,r.jsx)(n.li,{children:"Close issues"}),"\n",(0,r.jsx)(n.li,{children:"Add labels"}),"\n",(0,r.jsx)(n.li,{children:"Create pull requests"}),"\n",(0,r.jsx)(n.li,{children:"Merge pull requests"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Available Events"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"New issue created"}),"\n",(0,r.jsx)(n.li,{children:"Issue updated/closed"}),"\n",(0,r.jsx)(n.li,{children:"New pull request"}),"\n",(0,r.jsx)(n.li,{children:"PR merged"}),"\n",(0,r.jsx)(n.li,{children:"Push to branch"}),"\n",(0,r.jsx)(n.li,{children:"New commit"}),"\n",(0,r.jsx)(n.li,{children:"Repository starred"}),"\n",(0,r.jsx)(n.li,{children:"New release"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Webhook Support"}),": \u2705 Full webhook support with HMAC-SHA256 signature validation"]}),"\n",(0,r.jsxs)(n.p,{children:["For complete GitHub integration details, see ",(0,r.jsx)(n.a,{href:"/AREA_Back/docs/providers/github",children:"GitHub Provider Documentation"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"google-integration",children:"Google Integration"}),"\n",(0,r.jsx)(n.p,{children:"Google provides integration with Gmail, Calendar, Drive, and Sheets services."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Service Key"}),": ",(0,r.jsx)(n.code,{children:"google"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Documentation"}),": ",(0,r.jsx)(n.a,{href:"/AREA_Back/docs/providers/google",children:"Google Provider Documentation"})]}),"\n",(0,r.jsx)(n.h4,{id:"google-service-implementation",children:"Google Service Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\n@RequiredArgsConstructor\npublic class GoogleActionService {\n    \n    private final ServiceAccountService serviceAccountService;\n    \n    /**\n     * Executes Google service actions\n     */\n    public Map<String, Object> executeAction(String actionKey,\n                                            Map<String, Object> inputPayload,\n                                            Map<String, Object> actionParams,\n                                            UUID userId) {\n        \n        return switch (actionKey) {\n            case "gmail_send_email" -> sendEmail(userId, actionParams);\n            case "calendar_create_event" -> createCalendarEvent(userId, actionParams);\n            case "drive_create_folder" -> createDriveFolder(userId, actionParams);\n            case "sheets_add_row" -> addSheetRow(userId, actionParams);\n            default -> throw new IllegalArgumentException("Unknown action: " + actionKey);\n        };\n    }\n    \n    private Map<String, Object> sendEmail(UUID userId, Map<String, Object> params) {\n        String accessToken = serviceAccountService.getAccessToken(userId, "google")\n            .orElseThrow(() -> new RuntimeException("Google not connected"));\n        \n        // Gmail API call implementation\n        // ...\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"google-features",children:"Google Features"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Gmail"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Send emails"}),"\n",(0,r.jsx)(n.li,{children:"Search emails"}),"\n",(0,r.jsx)(n.li,{children:"Mark as read/unread"}),"\n",(0,r.jsx)(n.li,{children:"Add labels"}),"\n",(0,r.jsx)(n.li,{children:"Monitor new emails"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Calendar"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create events"}),"\n",(0,r.jsx)(n.li,{children:"Update events"}),"\n",(0,r.jsx)(n.li,{children:"Delete events"}),"\n",(0,r.jsx)(n.li,{children:"Monitor new/upcoming events"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Drive"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create folders"}),"\n",(0,r.jsx)(n.li,{children:"Upload files"}),"\n",(0,r.jsx)(n.li,{children:"Share documents"}),"\n",(0,r.jsx)(n.li,{children:"Monitor file changes"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Sheets"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add rows"}),"\n",(0,r.jsx)(n.li,{children:"Update cells"}),"\n",(0,r.jsx)(n.li,{children:"Create spreadsheets"}),"\n",(0,r.jsx)(n.li,{children:"Monitor spreadsheet changes"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Webhook Support"}),": \u26a0\ufe0f Polling-based (no native webhook support for most services)"]}),"\n",(0,r.jsxs)(n.p,{children:["For complete Google integration details, see ",(0,r.jsx)(n.a,{href:"/AREA_Back/docs/providers/google",children:"Google Provider Documentation"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"discord-integration",children:"Discord Integration"}),"\n",(0,r.jsx)(n.p,{children:"Discord provides real-time messaging, guild management, and bot capabilities."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Service Key"}),": ",(0,r.jsx)(n.code,{children:"discord"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Documentation"}),": ",(0,r.jsx)(n.a,{href:"/AREA_Back/docs/providers/discord",children:"Discord Provider Documentation"})]}),"\n",(0,r.jsx)(n.h4,{id:"discord-service-implementation",children:"Discord Service Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\n@ConditionalOnProperty(name = "spring.security.oauth2.client.registration.discord.client-id")\n@RequiredArgsConstructor\npublic class DiscordActionService {\n    \n    private final ServiceAccountService serviceAccountService;\n    private final RestTemplate restTemplate;\n    private static final String DISCORD_API_BASE = "https://discord.com/api/v10";\n    \n    /**\n     * Executes Discord actions\n     */\n    public Map<String, Object> executeAction(String actionKey,\n                                            Map<String, Object> inputPayload,\n                                            Map<String, Object> actionParams,\n                                            UUID userId) {\n        \n        String accessToken = serviceAccountService.getAccessToken(userId, "discord")\n            .orElseThrow(() -> new RuntimeException("Discord not connected"));\n        \n        return switch (actionKey) {\n            case "send_message" -> sendMessage(accessToken, actionParams);\n            case "create_webhook" -> createWebhook(accessToken, actionParams);\n            case "add_reaction" -> addReaction(accessToken, actionParams);\n            case "create_channel" -> createChannel(accessToken, actionParams);\n            default -> throw new IllegalArgumentException("Unknown action: " + actionKey);\n        };\n    }\n    \n    private Map<String, Object> sendMessage(String accessToken, Map<String, Object> params) {\n        String channelId = (String) params.get("channel_id");\n        String content = (String) params.get("content");\n        \n        HttpHeaders headers = new HttpHeaders();\n        headers.set("Authorization", "Bearer " + accessToken);\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        \n        Map<String, Object> body = Map.of("content", content);\n        \n        HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);\n        \n        ResponseEntity<Map> response = restTemplate.postForEntity(\n            DISCORD_API_BASE + "/channels/" + channelId + "/messages",\n            request,\n            Map.class\n        );\n        \n        return response.getBody();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"discord-features",children:"Discord Features"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Available Actions"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Send messages to channels"}),"\n",(0,r.jsx)(n.li,{children:"Create channel webhooks"}),"\n",(0,r.jsx)(n.li,{children:"Send webhook messages"}),"\n",(0,r.jsx)(n.li,{children:"Add reactions"}),"\n",(0,r.jsx)(n.li,{children:"Create guild channels"}),"\n",(0,r.jsx)(n.li,{children:"Delete messages"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Available Events"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"New message posted"}),"\n",(0,r.jsx)(n.li,{children:"Message deleted"}),"\n",(0,r.jsx)(n.li,{children:"Guild member joined"}),"\n",(0,r.jsx)(n.li,{children:"Guild member left"}),"\n",(0,r.jsx)(n.li,{children:"Reaction added"}),"\n",(0,r.jsx)(n.li,{children:"Channel created"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Webhook Support"}),": \u2705 Full webhook support with Ed25519 signature validation"]}),"\n",(0,r.jsxs)(n.p,{children:["For complete Discord integration details, see ",(0,r.jsx)(n.a,{href:"/AREA_Back/docs/providers/discord",children:"Discord Provider Documentation"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"slack-integration",children:"Slack Integration"}),"\n",(0,r.jsx)(n.p,{children:"Slack provides workspace messaging, channel management, and workflow automation."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Service Key"}),": ",(0,r.jsx)(n.code,{children:"slack"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Documentation"}),": ",(0,r.jsx)(n.a,{href:"/AREA_Back/docs/providers/slack",children:"Slack Provider Documentation"})]}),"\n",(0,r.jsx)(n.h4,{id:"slack-service-implementation",children:"Slack Service Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\n@ConditionalOnProperty(name = "spring.security.oauth2.client.registration.slack.client-id")\n@RequiredArgsConstructor\npublic class SlackActionService {\n    \n    private final ServiceAccountService serviceAccountService;\n    private final RestTemplate restTemplate;\n    private static final String SLACK_API_BASE = "https://slack.com/api";\n    \n    /**\n     * Executes Slack actions\n     */\n    public Map<String, Object> executeAction(String actionKey,\n                                            Map<String, Object> inputPayload,\n                                            Map<String, Object> actionParams,\n                                            UUID userId) {\n        \n        String accessToken = serviceAccountService.getAccessToken(userId, "slack")\n            .orElseThrow(() -> new RuntimeException("Slack not connected"));\n        \n        return switch (actionKey) {\n            case "send_message" -> sendMessage(accessToken, actionParams);\n            case "create_channel" -> createChannel(accessToken, actionParams);\n            case "add_reaction" -> addReaction(accessToken, actionParams);\n            case "pin_message" -> pinMessage(accessToken, actionParams);\n            default -> throw new IllegalArgumentException("Unknown action: " + actionKey);\n        };\n    }\n    \n    private Map<String, Object> sendMessage(String accessToken, Map<String, Object> params) {\n        String channel = (String) params.get("channel");\n        String text = (String) params.get("text");\n        \n        HttpHeaders headers = new HttpHeaders();\n        headers.set("Authorization", "Bearer " + accessToken);\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        \n        Map<String, Object> body = Map.of(\n            "channel", channel,\n            "text", text\n        );\n        \n        HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);\n        \n        ResponseEntity<Map> response = restTemplate.postForEntity(\n            SLACK_API_BASE + "/chat.postMessage",\n            request,\n            Map.class\n        );\n        \n        return response.getBody();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"slack-features",children:"Slack Features"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Available Actions"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Send messages to channels"}),"\n",(0,r.jsx)(n.li,{children:"Create channels"}),"\n",(0,r.jsx)(n.li,{children:"Add reactions"}),"\n",(0,r.jsx)(n.li,{children:"Pin messages"}),"\n",(0,r.jsx)(n.li,{children:"Upload files"}),"\n",(0,r.jsx)(n.li,{children:"Invite users to channels"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Available Events"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"New message in channel"}),"\n",(0,r.jsx)(n.li,{children:"Message deleted"}),"\n",(0,r.jsx)(n.li,{children:"Reaction added"}),"\n",(0,r.jsx)(n.li,{children:"Channel created"}),"\n",(0,r.jsx)(n.li,{children:"User joined channel"}),"\n",(0,r.jsx)(n.li,{children:"File uploaded"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Webhook Support"}),": \u2705 Full webhook support with HMAC-SHA256 signature validation"]}),"\n",(0,r.jsxs)(n.p,{children:["For complete Slack integration details, see ",(0,r.jsx)(n.a,{href:"/AREA_Back/docs/providers/slack",children:"Slack Provider Documentation"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"adding-new-services",children:"Adding New Services"}),"\n",(0,r.jsx)(n.p,{children:"To add a new service integration:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create OAuth Service"}),": Extend ",(0,r.jsx)(n.code,{children:"OAuthService"})," abstract class"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement Action Service"}),": Create service for executing actions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add Database Migration"}),": Create service and action definitions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configure Webhooks"})," (optional): Add webhook handling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create Documentation"}),": Follow provider documentation template"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add Tests"}),": Unit and integration tests"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/AREA_Back/docs/providers/#adding-a-new-provider",children:"Provider Documentation Template"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"webhook-system",children:"Webhook System"}),"\n",(0,r.jsxs)(n.p,{children:["The webhook system enables real-time event notifications from external services. For complete webhook system documentation, see ",(0,r.jsx)(n.a,{href:"/AREA_Back/docs/technical/webhook-system",children:"Webhook System Guide"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"webhook-controller",children:"Webhook Controller"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@PostMapping("/webhooks/github")\npublic ResponseEntity<String> handleGitHubWebhook(\n            @RequestHeader("X-GitHub-Event") String eventType,\n            @RequestHeader("X-GitHub-Delivery") String deliveryId,\n            @RequestHeader(value = "X-Hub-Signature-256", required = false) String signature,\n            @RequestBody String payload) {\n        \n        log.info("Received GitHub webhook: event={}, delivery={}", eventType, deliveryId);\n        \n        try {\n            // Validate webhook signature\n            if (!signatureValidator.validateGitHubSignature(payload, signature)) {\n                log.warn("Invalid GitHub webhook signature for delivery: {}", deliveryId);\n                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                    .body("Invalid signature");\n            }\n            \n            // Process webhook event\n            processingService.processGitHubWebhook(eventType, deliveryId, payload);\n            \n            return ResponseEntity.ok("Webhook processed successfully");\n            \n        } catch (Exception e) {\n            log.error("Error processing GitHub webhook: {}", e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body("Webhook processing failed");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"github-event-processing",children:"GitHub Event Processing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class WebhookEventProcessingService {\n    \n    private final RedisEventService redisEventService;\n    private final WebhookDeduplicationService deduplicationService;\n    private final ObjectMapper objectMapper;\n    \n    /**\n     * Processes GitHub webhook events\n     */\n    public void processGitHubWebhook(String eventType, String deliveryId, String payload) {\n        try {\n            Map<String, Object> eventData = objectMapper.readValue(payload, Map.class);\n            \n            // Check for duplicate events\n            if (deduplicationService.isDuplicateEvent("github", deliveryId)) {\n                log.debug("Duplicate GitHub webhook ignored: {}", deliveryId);\n                return;\n            }\n            \n            // Create standardized event\n            Map<String, Object> standardizedEvent = Map.of(\n                "service", "github",\n                "event_type", eventType,\n                "delivery_id", deliveryId,\n                "timestamp", Instant.now().toString(),\n                "data", eventData\n            );\n            \n            // Send to Redis stream for processing\n            redisEventService.publishEvent("github." + eventType, standardizedEvent);\n            \n            // Mark as processed\n            deduplicationService.markEventProcessed("github", deliveryId);\n            \n        } catch (Exception e) {\n            log.error("Failed to process GitHub webhook: {}", e.getMessage(), e);\n            throw new WebhookProcessingException("Webhook processing failed", e);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"webhook-system-1",children:"Webhook System"}),"\n",(0,r.jsx)(n.h3,{id:"webhook-signature-validation",children:"Webhook Signature Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class WebhookSignatureValidator {\n    \n    private static final String GITHUB_SIGNATURE_PREFIX = "sha256=";\n    \n    @Value("${github.webhook.secret}")\n    private String githubWebhookSecret;\n    \n    /**\n     * Validates GitHub webhook signature\n     */\n    public boolean validateGitHubSignature(String payload, String signature) {\n        if (signature == null || !signature.startsWith(GITHUB_SIGNATURE_PREFIX)) {\n            return false;\n        }\n        \n        try {\n            String expectedSignature = GITHUB_SIGNATURE_PREFIX + \n                calculateHmacSha256(payload, githubWebhookSecret);\n            \n            return MessageDigest.isEqual(\n                signature.getBytes(),\n                expectedSignature.getBytes()\n            );\n            \n        } catch (Exception e) {\n            log.error("Error validating GitHub signature: {}", e.getMessage());\n            return false;\n        }\n    }\n    \n    private String calculateHmacSha256(String data, String secret) \n            throws NoSuchAlgorithmException, InvalidKeyException {\n        \n        Mac mac = Mac.getInstance("HmacSHA256");\n        SecretKeySpec secretKeySpec = new SecretKeySpec(secret.getBytes(), "HmacSHA256");\n        mac.init(secretKeySpec);\n        \n        byte[] hash = mac.doFinal(data.getBytes());\n        return bytesToHex(hash);\n    }\n    \n    private String bytesToHex(byte[] bytes) {\n        StringBuilder result = new StringBuilder();\n        for (byte b : bytes) {\n            result.append(String.format("%02x", b));\n        }\n        return result.toString();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"webhook-deduplication",children:"Webhook Deduplication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class WebhookDeduplicationService {\n    \n    private final RedisTemplate<String, String> redisTemplate;\n    \n    private static final String DEDUP_KEY_PREFIX = "webhook:dedup:";\n    private static final Duration DEDUP_TTL = Duration.ofHours(24);\n    \n    /**\n     * Checks if webhook event is duplicate\n     */\n    public boolean isDuplicateEvent(String service, String deliveryId) {\n        String key = DEDUP_KEY_PREFIX + service + ":" + deliveryId;\n        return redisTemplate.hasKey(key);\n    }\n    \n    /**\n     * Marks webhook event as processed\n     */\n    public void markEventProcessed(String service, String deliveryId) {\n        String key = DEDUP_KEY_PREFIX + service + ":" + deliveryId;\n        redisTemplate.opsForValue().set(key, "processed", DEDUP_TTL);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"service-cache",children:"Service Cache"}),"\n",(0,r.jsx)(n.h3,{id:"service-cache-implementation",children:"Service Cache Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class ServiceCacheService {\n    \n    private final ServiceRepository serviceRepository;\n    private final RedisTemplate<String, Object> redisTemplate;\n    \n    private static final String SERVICE_CACHE_KEY = "services:enabled";\n    private static final Duration CACHE_TTL = Duration.ofMinutes(30);\n    \n    /**\n     * Gets enabled services with caching\n     */\n    @Cacheable(value = "services", key = "\'enabled\'")\n    public List<Service> getEnabledServices() {\n        return serviceRepository.findAllEnabledServices();\n    }\n    \n    /**\n     * Invalidates service cache\n     */\n    @CacheEvict(value = "services", allEntries = true)\n    public void invalidateServiceCache() {\n        log.info("Service cache invalidated");\n    }\n    \n    /**\n     * Refreshes service cache\n     */\n    @Scheduled(fixedDelay = 1800000) // 30 minutes\n    public void refreshServiceCache() {\n        invalidateServiceCache();\n        getEnabledServices();\n        log.info("Service cache refreshed");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"redis-cache-configuration",children:"Redis Cache Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Configuration\n@EnableCaching\npublic class CacheConfig {\n    \n    @Bean\n    public RedisCacheManager cacheManager(RedisConnectionFactory connectionFactory) {\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\n            .entryTtl(Duration.ofMinutes(30))\n            .serializeKeysWith(RedisSerializationContext.SerializationPair\n                .fromSerializer(new StringRedisSerializer()))\n            .serializeValuesWith(RedisSerializationContext.SerializationPair\n                .fromSerializer(new GenericJackson2JsonRedisSerializer()));\n        \n        return RedisCacheManager.builder(connectionFactory)\n            .cacheDefaults(config)\n            .build();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"event-stream-processing",children:"Event Stream Processing"}),"\n",(0,r.jsx)(n.h3,{id:"redis-event-service",children:"Redis Event Service"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class RedisEventService {\n    \n    private final RedisTemplate<String, Object> redisTemplate;\n    private final RedisConfig redisConfig;\n    \n    /**\n     * Publishes event to Redis stream\n     */\n    public void publishEvent(String eventKey, Map<String, Object> eventData) {\n        try {\n            Map<String, Object> streamData = Map.of(\n                "event_key", eventKey,\n                "timestamp", Instant.now().toString(),\n                "data", eventData\n            );\n            \n            redisTemplate.opsForStream().add(\n                redisConfig.getAreasEventsStream(),\n                streamData\n            );\n            \n            log.debug("Published event to stream: {}", eventKey);\n            \n        } catch (Exception e) {\n            log.error("Failed to publish event to Redis stream: {}", e.getMessage(), e);\n            throw new EventPublishingException("Event publishing failed", e);\n        }\n    }\n    \n    /**\n     * Initializes Redis stream and consumer group\n     */\n    public void initializeStream() {\n        try {\n            // Create stream if it doesn\'t exist\n            if (!redisTemplate.hasKey(redisConfig.getAreasEventsStream())) {\n                redisTemplate.opsForStream().add(\n                    redisConfig.getAreasEventsStream(),\n                    Collections.singletonMap("init", "stream")\n                );\n            }\n            \n            // Create consumer group if it doesn\'t exist\n            try {\n                redisTemplate.opsForStream().createGroup(\n                    redisConfig.getAreasEventsStream(),\n                    redisConfig.getAreasConsumerGroup()\n                );\n            } catch (Exception e) {\n                // Consumer group already exists\n                log.debug("Consumer group already exists: {}", \n                    redisConfig.getAreasConsumerGroup());\n            }\n            \n        } catch (Exception e) {\n            log.error("Failed to initialize Redis stream: {}", e.getMessage(), e);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsx)(n.h3,{id:"service-management-endpoints",children:"Service Management Endpoints"}),"\n",(0,r.jsx)(n.h4,{id:"get-all-services",children:"Get All Services"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /api/services?page=0&size=20&sortBy=name&sortDir=asc\n"})}),"\n",(0,r.jsx)(n.h4,{id:"get-enabled-services",children:"Get Enabled Services"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /api/services/catalog/enabled\n"})}),"\n",(0,r.jsx)(n.h4,{id:"get-service-details",children:"Get Service Details"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /api/services/{serviceId}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"about-information",children:"About Information"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /about.json\n"})}),"\n",(0,r.jsx)(n.h3,{id:"service-account-endpoints",children:"Service Account Endpoints"}),"\n",(0,r.jsx)(n.h4,{id:"create-service-account",children:"Create Service Account"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /api/service-accounts\nContent-Type: application/json\n\n{\n    "serviceId": "service-uuid",\n    "accountName": "My GitHub Account",\n    "accessToken": "encrypted-token",\n    "refreshToken": "encrypted-refresh-token",\n    "expiresAt": "2024-12-31T23:59:59",\n    "scopes": "repo,issues"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"get-user-service-accounts",children:"Get User Service Accounts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /api/service-accounts/user/{userId}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"update-service-account",children:"Update Service Account"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'PUT /api/service-accounts/{accountId}\nContent-Type: application/json\n\n{\n    "accountName": "Updated Account Name",\n    "isActive": true\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"delete-service-account",children:"Delete Service Account"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"DELETE /api/service-accounts/{accountId}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"webhook-endpoints",children:"Webhook Endpoints"}),"\n",(0,r.jsx)(n.h4,{id:"github-webhook",children:"GitHub Webhook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /api/webhooks/github\nX-GitHub-Event: issues\nX-GitHub-Delivery: 12345678-1234-1234-1234-123456789abc\nX-Hub-Signature-256: sha256=hash\nContent-Type: application/json\n\n{\n    "action": "opened",\n    "issue": {\n        "title": "Bug report",\n        "body": "Description of the bug"\n    },\n    "repository": {\n        "full_name": "owner/repo"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"service-integration-errors",children:"Service Integration Errors"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "error": "SERVICE_INTEGRATION_ERROR",\n    "message": "Failed to connect to GitHub API",\n    "details": {\n        "service": "github",\n        "operation": "create_issue",\n        "httpStatus": 401,\n        "errorCode": "UNAUTHORIZED"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"webhook-processing-errors",children:"Webhook Processing Errors"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "error": "WEBHOOK_PROCESSING_ERROR",\n    "message": "Invalid webhook signature",\n    "details": {\n        "service": "github",\n        "deliveryId": "12345678-1234-1234-1234-123456789abc",\n        "eventType": "issues"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"monitoring--observability",children:"Monitoring & Observability"}),"\n",(0,r.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Service API response times"}),"\n",(0,r.jsx)(n.li,{children:"Webhook processing rates"}),"\n",(0,r.jsx)(n.li,{children:"Authentication success/failure rates"}),"\n",(0,r.jsx)(n.li,{children:"Cache hit/miss ratios"}),"\n",(0,r.jsx)(n.li,{children:"Stream processing latency"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class ServiceHealthIndicator implements HealthIndicator {\n    \n    @Override\n    public Health health() {\n        // Check GitHub API connectivity\n        // Check Redis connectivity\n        // Check database connectivity\n        // Return aggregated health status\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"alerting",children:"Alerting"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Service API failures"}),"\n",(0,r.jsx)(n.li,{children:"Webhook processing failures"}),"\n",(0,r.jsx)(n.li,{children:"Token expiration warnings"}),"\n",(0,r.jsx)(n.li,{children:"Stream processing delays"}),"\n",(0,r.jsx)(n.li,{children:"Cache invalidation events"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);