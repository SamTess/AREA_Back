"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[2813],{3856:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"technical/diagrams/webhook-system-sequence","title":"Webhook System - Sequence Diagram","description":"This diagram shows webhook registration, event reception, and processing.","source":"@site/docs/technical/diagrams/07-webhook-system-sequence.md","sourceDirName":"technical/diagrams","slug":"/technical/diagrams/webhook-system-sequence","permalink":"/AREA_Back/docs/technical/diagrams/webhook-system-sequence","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/technical/diagrams/07-webhook-system-sequence.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AREA Execution Flow - Sequence Diagram","permalink":"/AREA_Back/docs/technical/diagrams/area-execution-sequence"},"next":{"title":"AREA Backend Architecture Overview","permalink":"/AREA_Back/docs/technical/architecture-overview"}}');var r=o(4848),a=o(8453);const i={},s="Webhook System - Sequence Diagram",l={},c=[{value:"Webhook Registration Flow",id:"webhook-registration-flow",level:2},{value:"Webhook Event Reception and Validation",id:"webhook-event-reception-and-validation",level:2},{value:"Webhook Deregistration Flow",id:"webhook-deregistration-flow",level:2},{value:"Webhook Retry Mechanism",id:"webhook-retry-mechanism",level:2},{value:"Service-Specific Webhook Configurations",id:"service-specific-webhook-configurations",level:2},{value:"GitHub Webhooks",id:"github-webhooks",level:3},{value:"Slack Webhooks",id:"slack-webhooks",level:3},{value:"Security Features",id:"security-features",level:2},{value:"Error Handling",id:"error-handling",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"webhook-system---sequence-diagram",children:"Webhook System - Sequence Diagram"})}),"\n",(0,r.jsx)(n.p,{children:"This diagram shows webhook registration, event reception, and processing."}),"\n",(0,r.jsx)(n.h2,{id:"webhook-registration-flow",children:"Webhook Registration Flow"}),"\n",(0,r.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant AreaService\n    participant WebhookRegistry\n    participant ServiceClient\n    participant ExternalService as External Service<br/>(GitHub/Slack)\n    participant Database\n\n    AreaService->>AreaService: Create ActionInstance with WEBHOOK mode\n    AreaService->>WebhookRegistry: registerWebhook(actionInstance)\n    activate WebhookRegistry\n\n    WebhookRegistry->>Database: Get ServiceAccount for authentication\n    Database--\x3e>WebhookRegistry: ServiceAccount with tokens\n\n    WebhookRegistry->>WebhookRegistry: Build webhook URL\n    Note over WebhookRegistry: {baseUrl}/webhooks/{service}/{actionInstanceId}\n\n    WebhookRegistry->>WebhookRegistry: Get activation config\n    Note over WebhookRegistry: Extract: events, filters,<br/>secret generation\n\n    WebhookRegistry->>WebhookRegistry: Generate webhook secret\n    Note over WebhookRegistry: For signature verification\n\n    WebhookRegistry->>ServiceClient: Create webhook subscription\n    ServiceClient->>ExternalService: POST /hooks (Create webhook)\n    Note over ServiceClient,ExternalService: Body: {<br/>  url: callbackUrl,<br/>  events: ["issue.created"],<br/>  secret: webhookSecret<br/>}\n\n    alt Webhook created successfully\n        ExternalService--\x3e>ServiceClient: 201 Created + webhook_id\n        ServiceClient--\x3e>WebhookRegistry: Webhook registered (webhook_id)\n\n        WebhookRegistry->>Database: Store webhook metadata\n        Note over Database: Store: webhook_id,<br/>secret, events,<br/>service, actionInstanceId\n        Database--\x3e>WebhookRegistry: Saved\n\n        WebhookRegistry--\x3e>AreaService: Registration successful\n    else Registration failed\n        ExternalService--\x3e>ServiceClient: 4xx/5xx Error\n        ServiceClient--\x3e>WebhookRegistry: Registration failed\n        WebhookRegistry--\x3e>AreaService: Registration error\n    end\n    deactivate WebhookRegistry'}),"\n",(0,r.jsx)(n.h2,{id:"webhook-event-reception-and-validation",children:"Webhook Event Reception and Validation"}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant ExternalService as External Service\n    participant WebhookController\n    participant WebhookValidator\n    participant WebhookHandler\n    participant Database\n\n    ExternalService->>WebhookController: POST /webhooks/{service}/{instanceId}\n    Note over ExternalService,WebhookController: Headers:<br/>X-Hub-Signature: sha256=...<br/>X-GitHub-Event: issues<br/>Content-Type: application/json\n\n    activate WebhookController\n    WebhookController->>WebhookController: Extract headers & body\n    \n    WebhookController->>Database: Get webhook metadata by instanceId\n    Database--\x3e>WebhookController: Webhook config (secret, events)\n\n    WebhookController->>WebhookValidator: validateSignature(body, signature, secret)\n    \n    WebhookValidator->>WebhookValidator: Compute HMAC-SHA256\n    Note over WebhookValidator: HMAC(secret, requestBody)\n    \n    WebhookValidator->>WebhookValidator: Compare signatures\n    \n    alt Signature valid\n        WebhookValidator--\x3e>WebhookController: Validation success\n        \n        WebhookController->>WebhookValidator: validateEvent(eventType, allowedEvents)\n        WebhookValidator->>WebhookValidator: Check event in allowed list\n        \n        alt Event allowed\n            WebhookValidator--\x3e>WebhookController: Event valid\n            \n            WebhookController->>WebhookHandler: processWebhook(instanceId, event, payload)\n            WebhookHandler->>WebhookHandler: Process event\n            Note over WebhookHandler: See AREA Execution Flow\n            WebhookHandler--\x3e>WebhookController: Processing initiated\n            \n            WebhookController--\x3e>ExternalService: 200 OK\n        else Event not allowed\n            WebhookValidator--\x3e>WebhookController: Event not allowed\n            WebhookController->>Database: Log rejected event\n            WebhookController--\x3e>ExternalService: 200 OK (acknowledge)\n            Note over WebhookController,ExternalService: Return 200 to prevent<br/>retry from service\n        end\n    else Signature invalid\n        WebhookValidator--\x3e>WebhookController: Validation failed\n        WebhookController->>Database: Log security violation\n        WebhookController--\x3e>ExternalService: 401 Unauthorized\n    end\n    deactivate WebhookController"}),"\n",(0,r.jsx)(n.h2,{id:"webhook-deregistration-flow",children:"Webhook Deregistration Flow"}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant User\n    participant AreaService\n    participant WebhookRegistry\n    participant ServiceClient\n    participant ExternalService as External Service\n    participant Database\n\n    User->>AreaService: Delete AREA or disable action\n    activate AreaService\n    \n    AreaService->>Database: Get ActionInstance with webhook mode\n    Database--\x3e>AreaService: ActionInstance details\n    \n    AreaService->>Database: Get webhook registration\n    Database--\x3e>AreaService: Webhook metadata (webhook_id)\n    \n    AreaService->>WebhookRegistry: unregisterWebhook(actionInstanceId)\n    activate WebhookRegistry\n    \n    WebhookRegistry->>Database: Get ServiceAccount\n    Database--\x3e>WebhookRegistry: ServiceAccount with tokens\n    \n    WebhookRegistry->>ServiceClient: Delete webhook\n    ServiceClient->>ExternalService: DELETE /hooks/{webhook_id}\n    \n    alt Deletion successful\n        ExternalService--\x3e>ServiceClient: 204 No Content\n        ServiceClient--\x3e>WebhookRegistry: Webhook deleted\n        \n        WebhookRegistry->>Database: Remove webhook metadata\n        Database--\x3e>WebhookRegistry: Removed\n        \n        WebhookRegistry--\x3e>AreaService: Unregistration successful\n    else Webhook not found (already deleted)\n        ExternalService--\x3e>ServiceClient: 404 Not Found\n        ServiceClient--\x3e>WebhookRegistry: Already deleted\n        \n        WebhookRegistry->>Database: Clean up metadata\n        WebhookRegistry--\x3e>AreaService: Cleanup complete\n    else Deletion failed\n        ExternalService--\x3e>ServiceClient: Error\n        ServiceClient--\x3e>WebhookRegistry: Deletion failed\n        \n        WebhookRegistry->>Database: Mark for retry\n        WebhookRegistry--\x3e>AreaService: Scheduled for retry\n    end\n    deactivate WebhookRegistry\n    \n    AreaService->>Database: Delete/disable ActionInstance\n    AreaService--\x3e>User: Action removed\n    deactivate AreaService"}),"\n",(0,r.jsx)(n.h2,{id:"webhook-retry-mechanism",children:"Webhook Retry Mechanism"}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant ExternalService as External Service\n    participant WebhookController\n    participant RetryQueue\n    participant Database\n\n    ExternalService->>WebhookController: POST /webhooks/{service}/{instanceId}\n    activate WebhookController\n    \n    WebhookController->>WebhookController: Process webhook\n    \n    alt Processing fails (temp error)\n        WebhookController->>RetryQueue: Enqueue for retry\n        activate RetryQueue\n        \n        RetryQueue->>Database: Store webhook payload & metadata\n        Note over Database: Store attempt count,<br/>next retry time,<br/>original payload\n        \n        RetryQueue--\x3e>WebhookController: Queued\n        deactivate RetryQueue\n        \n        WebhookController--\x3e>ExternalService: 503 Service Unavailable\n        Note over ExternalService: Service will retry<br/>automatically\n    else Processing successful\n        WebhookController--\x3e>ExternalService: 200 OK\n    end\n    deactivate WebhookController\n    \n    Note over RetryQueue: Wait for retry interval\n    \n    RetryQueue->>Database: Get pending webhooks\n    Database--\x3e>RetryQueue: List of failed webhooks\n    \n    loop For each failed webhook\n        RetryQueue->>RetryQueue: Check retry count < max\n        alt Can retry\n            RetryQueue->>WebhookController: Retry processing\n            WebhookController->>WebhookController: Process webhook\n            \n            alt Success\n                WebhookController--\x3e>RetryQueue: Success\n                RetryQueue->>Database: Remove from retry queue\n            else Still failing\n                WebhookController--\x3e>RetryQueue: Failed\n                RetryQueue->>Database: Increment retry count\n                RetryQueue->>Database: Update next retry time\n            end\n        else Max retries exceeded\n            RetryQueue->>Database: Move to dead letter queue\n            RetryQueue->>Database: Log permanent failure\n        end\n    end"}),"\n",(0,r.jsx)(n.h2,{id:"service-specific-webhook-configurations",children:"Service-Specific Webhook Configurations"}),"\n",(0,r.jsx)(n.h3,{id:"github-webhooks",children:"GitHub Webhooks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "events": ["push", "pull_request", "issues"],\n  "contentType": "application/json",\n  "signatureHeader": "X-Hub-Signature-256",\n  "eventHeader": "X-GitHub-Event",\n  "deliveryHeader": "X-GitHub-Delivery"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"slack-webhooks",children:"Slack Webhooks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "events": ["message.channels", "app_mention"],\n  "contentType": "application/json",\n  "signatureHeader": "X-Slack-Signature",\n  "timestampHeader": "X-Slack-Request-Timestamp",\n  "verificationToken": true\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-features",children:"Security Features"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Signature Verification"}),": HMAC-SHA256 validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Filtering"}),": Only process allowed event types"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rate Limiting"}),": Prevent webhook flooding"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Secret Rotation"}),": Periodic webhook secret updates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IP Whitelisting"}),": Accept webhooks only from known IPs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Replay Protection"}),": Timestamp validation for Slack"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Invalid Signature"}),": Return 401, log security event"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unknown Event"}),": Return 200, log and ignore"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Processing Error"}),": Return 503, queue for retry"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Missing ActionInstance"}),": Return 404, clean up webhook"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Disabled AREA"}),": Return 200, skip processing"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>s});var t=o(6540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);