"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[3851],{4098:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/docker-explanation","title":"Docker Setup Guide","description":"This directory contains Docker Compose configurations for different use cases.","source":"@site/docs/guides/docker-explanation.md","sourceDirName":"guides","slug":"/guides/docker-explanation","permalink":"/AREA_Back/docs/guides/docker-explanation","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/guides/docker-explanation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Database Migrations Guide","permalink":"/AREA_Back/docs/guides/database-migrations-guide"},"next":{"title":"Email Configuration Guide","permalink":"/AREA_Back/docs/guides/email-configuration-guide"}}');var c=o(4848),r=o(8453);const a={},i="Docker Setup Guide",l={},d=[{value:"Available Configurations",id:"available-configurations",level:2},{value:"1. <code>docker-compose.db.yaml</code> - Database Services Only",id:"1-docker-composedbyaml---database-services-only",level:3},{value:"2. <code>docker-compose.back.yaml</code> - Complete Backend Stack",id:"2-docker-composebackyaml---complete-backend-stack",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Required Environment Variables",id:"required-environment-variables",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"For Backend Developers",id:"for-backend-developers",level:3},{value:"For Frontend Developers",id:"for-frontend-developers",level:3},{value:"Accessing Services",id:"accessing-services",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Backend container fails to start",id:"backend-container-fails-to-start",level:3},{value:"Database connection issues",id:"database-connection-issues",level:3},{value:"Port conflicts",id:"port-conflicts",level:3},{value:"Clean restart",id:"clean-restart",level:3},{value:"Building the Backend Image",id:"building-the-backend-image",level:2},{value:"Monitoring",id:"monitoring",level:2},{value:"Notes",id:"notes",level:2}];function t(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"docker-setup-guide",children:"Docker Setup Guide"})}),"\n",(0,c.jsx)(n.p,{children:"This directory contains Docker Compose configurations for different use cases."}),"\n",(0,c.jsx)(n.h2,{id:"available-configurations",children:"Available Configurations"}),"\n",(0,c.jsxs)(n.h3,{id:"1-docker-composedbyaml---database-services-only",children:["1. ",(0,c.jsx)(n.code,{children:"docker-compose.db.yaml"})," - Database Services Only"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"For: Backend Development Team"})}),"\n",(0,c.jsx)(n.p,{children:"This configuration only starts the database services (PostgreSQL, Redis) along with monitoring tools (Prometheus, Grafana). Use this when you're developing the backend locally and need the databases running."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# Start databases only\ncd Docker\ndocker-compose -f docker-compose.db.yaml up -d\n\n# Stop databases\ndocker-compose -f docker-compose.db.yaml down\n\n# Stop and remove volumes (clean start)\ndocker-compose -f docker-compose.db.yaml down -v\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Services included:"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"PostgreSQL (port 5432)"}),"\n",(0,c.jsx)(n.li,{children:"Redis (port 6379)"}),"\n",(0,c.jsx)(n.li,{children:"Prometheus (port 9090)"}),"\n",(0,c.jsx)(n.li,{children:"Grafana (port 3000)"}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"2-docker-composebackyaml---complete-backend-stack",children:["2. ",(0,c.jsx)(n.code,{children:"docker-compose.back.yaml"})," - Complete Backend Stack"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"For: Frontend Development Team"})}),"\n",(0,c.jsx)(n.p,{children:"This configuration starts everything: the AREA backend application along with all its dependencies. Use this when you're developing the frontend and need a fully functional backend."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# Start complete backend stack\ncd Docker\ndocker-compose -f docker-compose.back.yaml up -d\n\n# View logs\ndocker-compose -f docker-compose.back.yaml logs -f\n\n# Stop complete stack\ndocker-compose -f docker-compose.back.yaml down\n\n# Stop and remove volumes (clean start)\ndocker-compose -f docker-compose.back.yaml down -v\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Services included:"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"AREA Backend Application (port 8080)"}),"\n",(0,c.jsx)(n.li,{children:"PostgreSQL (port 5432)"}),"\n",(0,c.jsx)(n.li,{children:"Redis (port 6379)"}),"\n",(0,c.jsx)(n.li,{children:"Prometheus (port 9090)"}),"\n",(0,c.jsx)(n.li,{children:"Grafana (port 3000)"}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Docker and Docker Compose"})," installed"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Environment variables"})," configured (create a ",(0,c.jsx)(n.code,{children:".env"})," file in the project root)"]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"required-environment-variables",children:"Required Environment Variables"}),"\n",(0,c.jsxs)(n.p,{children:["Create a ",(0,c.jsx)(n.code,{children:".env"})," file in the project root (not in the Docker folder) with the following variables:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-env",children:"# Database\nDATABASE_NAME=area_db\nDATABASE_USERNAME=area_user\nDATABASE_PASSWORD=your_secure_password\n\n# Application\nSPRING_APPLICATION_NAME=AREA_Back\nSPRING_PROFILES_ACTIVE=dev\nSERVER_PORT=8080\n\n# Security\nADMIN_USERNAME=admin\nADMIN_PASSWORD=your_admin_password\nADMIN_ROLES=ADMIN\n\n# JWT Secrets (generate secure random strings)\nJWT_ACCESS_SECRET=your_256bit_base64_encoded_access_secret_here\nJWT_REFRESH_SECRET=your_256bit_base64_encoded_refresh_secret_here\nACCESS_TOKEN_EXPIRES_IN=15m\nREFRESH_TOKEN_EXPIRES_IN=7d\n\n# JPA\nJPA_DDL_AUTO=none\nJPA_SHOW_SQL=false\nJPA_FORMAT_SQL=false\n\n# Flyway\nFLYWAY_ENABLED=true\nFLYWAY_BASELINE_ON_MIGRATE=true\n\n# Redis\nREDIS_PASSWORD=\nREDIS_HOST=localhost\nREDIS_PORT=6379\n\n# Swagger\nSWAGGER_ENABLED=true\nSWAGGER_UI_ENABLED=true\n\n# Logging\nLOG_LEVEL_APP=INFO\nLOG_LEVEL_WEB=INFO\nLOG_LEVEL_SECURITY=INFO\n\n# Cache\nCACHE_TTL=1800000\n"})}),"\n",(0,c.jsxs)(n.p,{children:["See ",(0,c.jsx)(n.code,{children:".env.example"})," in the project root for a complete template."]}),"\n",(0,c.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,c.jsx)(n.h3,{id:"for-backend-developers",children:"For Backend Developers"}),"\n",(0,c.jsx)(n.p,{children:"When working on backend code:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# 1. Start only the databases\ncd Docker\ndocker-compose -f docker-compose.db.yaml up -d\n\n# 2. Run your backend application from your IDE or via Gradle\ncd ..\n./gradlew bootRun\n\n# 3. When done, stop the databases\ncd Docker\ndocker-compose -f docker-compose.db.yaml down\n"})}),"\n",(0,c.jsx)(n.h3,{id:"for-frontend-developers",children:"For Frontend Developers"}),"\n",(0,c.jsx)(n.p,{children:"When working on frontend and need the complete backend:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# 1. Start the complete backend stack\ncd Docker\ndocker-compose -f docker-compose.back.yaml up -d\n\n# 2. Wait for the backend to be healthy (check logs)\ndocker-compose -f docker-compose.back.yaml logs -f area-backend\n\n# 3. Access the backend API at http://localhost:8080\n# 4. Access Swagger UI at http://localhost:8080/swagger-ui.html\n\n# 5. When done, stop everything\ndocker-compose -f docker-compose.back.yaml down\n"})}),"\n",(0,c.jsx)(n.h2,{id:"accessing-services",children:"Accessing Services"}),"\n",(0,c.jsx)(n.p,{children:"Once the services are running:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Backend API"}),": ",(0,c.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Swagger UI"}),": ",(0,c.jsx)(n.a,{href:"http://localhost:8080/swagger-ui.html",children:"http://localhost:8080/swagger-ui.html"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"API Docs"}),": ",(0,c.jsx)(n.a,{href:"http://localhost:8080/v3/api-docs",children:"http://localhost:8080/v3/api-docs"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Health Check"}),": ",(0,c.jsx)(n.a,{href:"http://localhost:8080/actuator/health",children:"http://localhost:8080/actuator/health"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Metrics"}),": ",(0,c.jsx)(n.a,{href:"http://localhost:8080/actuator/metrics",children:"http://localhost:8080/actuator/metrics"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Prometheus"}),": ",(0,c.jsx)(n.a,{href:"http://localhost:9090",children:"http://localhost:9090"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Grafana"}),": ",(0,c.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," (default credentials: admin/admin)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"PostgreSQL"}),": localhost:5432"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Redis"}),": localhost:6379"]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,c.jsx)(n.h3,{id:"backend-container-fails-to-start",children:"Backend container fails to start"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["Check if the ",(0,c.jsx)(n.code,{children:".env"})," file exists and has all required variables"]}),"\n",(0,c.jsxs)(n.li,{children:["View container logs: ",(0,c.jsx)(n.code,{children:"docker-compose -f docker-compose.back.yaml logs area-backend"})]}),"\n",(0,c.jsx)(n.li,{children:"Check if ports are already in use"}),"\n",(0,c.jsx)(n.li,{children:"Ensure databases are healthy before backend starts"}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"database-connection-issues",children:"Database connection issues"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["Check database container status: ",(0,c.jsx)(n.code,{children:"docker-compose ps"})]}),"\n",(0,c.jsxs)(n.li,{children:["Verify environment variables in ",(0,c.jsx)(n.code,{children:".env"})]}),"\n",(0,c.jsxs)(n.li,{children:["Check database logs: ",(0,c.jsx)(n.code,{children:"docker-compose -f docker-compose.db.yaml logs postgres"})]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"port-conflicts",children:"Port conflicts"}),"\n",(0,c.jsx)(n.p,{children:"If you get port conflicts:"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["Check what's using the port: ",(0,c.jsx)(n.code,{children:"lsof -i :8080"})," (or the conflicting port)"]}),"\n",(0,c.jsxs)(n.li,{children:["Either stop the conflicting service or change the port in ",(0,c.jsx)(n.code,{children:".env"})]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"clean-restart",children:"Clean restart"}),"\n",(0,c.jsx)(n.p,{children:"If you need to start fresh:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# Stop everything and remove volumes\ndocker-compose -f docker-compose.back.yaml down -v\n\n# Rebuild the backend image\ndocker-compose -f docker-compose.back.yaml build --no-cache\n\n# Start again\ndocker-compose -f docker-compose.back.yaml up -d\n"})}),"\n",(0,c.jsx)(n.h2,{id:"building-the-backend-image",children:"Building the Backend Image"}),"\n",(0,c.jsxs)(n.p,{children:["The backend image is built automatically when you run ",(0,c.jsx)(n.code,{children:"docker-compose up"}),". To rebuild manually:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# From the Docker directory\ndocker-compose -f docker-compose.back.yaml build\n\n# Or with no cache\ndocker-compose -f docker-compose.back.yaml build --no-cache\n"})}),"\n",(0,c.jsx)(n.h2,{id:"monitoring",children:"Monitoring"}),"\n",(0,c.jsx)(n.p,{children:"Both configurations include Prometheus and Grafana for monitoring:"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["Access Grafana at ",(0,c.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})]}),"\n",(0,c.jsxs)(n.li,{children:["Default credentials: admin/admin (or as configured in ",(0,c.jsx)(n.code,{children:".env"}),")"]}),"\n",(0,c.jsx)(n.li,{children:"Prometheus data source is pre-configured"}),"\n",(0,c.jsxs)(n.li,{children:["Dashboards are available in ",(0,c.jsx)(n.code,{children:"monitoring/grafana/dashboards/"})]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"The backend application takes about 30-60 seconds to start"}),"\n",(0,c.jsx)(n.li,{children:"Database migrations are run automatically via Flyway on startup"}),"\n",(0,c.jsx)(n.li,{children:"All data is persisted in Docker volumes"}),"\n",(0,c.jsxs)(n.li,{children:["Use ",(0,c.jsx)(n.code,{children:"docker-compose down -v"})," to remove volumes and start fresh"]}),"\n",(0,c.jsx)(n.li,{children:"The backend container includes health checks to ensure it's ready"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(t,{...e})}):t(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var s=o(6540);const c={},r=s.createContext(c);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);