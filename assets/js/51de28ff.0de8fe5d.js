"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[3922],{270:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"technical/diagrams/oauth-flow-sequence","title":"OAuth Authentication Flow - Sequence Diagram","description":"This diagram shows the complete OAuth 2.0 authentication flow for user login and service integration.","source":"@site/docs/technical/diagrams/04-oauth-flow-sequence.md","sourceDirName":"technical/diagrams","slug":"/technical/diagrams/oauth-flow-sequence","permalink":"/AREA_Back/docs/technical/diagrams/oauth-flow-sequence","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/technical/diagrams/04-oauth-flow-sequence.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Service Integration Architecture Class Diagram","permalink":"/AREA_Back/docs/technical/diagrams/service-integration-class-diagram"},"next":{"title":"AREA Creation Flow - Sequence Diagram","permalink":"/AREA_Back/docs/technical/diagrams/area-creation-sequence"}}');var c=t(4848),i=t(8453);const o={},a="OAuth Authentication Flow - Sequence Diagram",s={},u=[{value:"User Authentication with OAuth",id:"user-authentication-with-oauth",level:2},{value:"Service Account Connection (OAuth for Third-Party Services)",id:"service-account-connection-oauth-for-third-party-services",level:2},{value:"Token Refresh Flow",id:"token-refresh-flow",level:2},{value:"Key Points",id:"key-points",level:2},{value:"User OAuth Flow",id:"user-oauth-flow",level:3},{value:"Service Account OAuth Flow",id:"service-account-oauth-flow",level:3},{value:"Security Considerations",id:"security-considerations",level:3}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"oauth-authentication-flow---sequence-diagram",children:"OAuth Authentication Flow - Sequence Diagram"})}),"\n",(0,c.jsx)(n.p,{children:"This diagram shows the complete OAuth 2.0 authentication flow for user login and service integration."}),"\n",(0,c.jsx)(n.h2,{id:"user-authentication-with-oauth",children:"User Authentication with OAuth"}),"\n",(0,c.jsx)(n.mermaid,{value:'sequenceDiagram\n    actor User\n    participant Frontend\n    participant Backend\n    participant OAuthService\n    participant Provider as OAuth Provider (Google/GitHub)\n    participant Database\n\n    User->>Frontend: Click "Login with Google"\n    Frontend->>Backend: GET /oauth/authorize/{provider}\n    Backend->>OAuthService: initiateOAuthFlow(provider)\n    OAuthService->>OAuthService: Generate state token\n    OAuthService->>OAuthService: Build authorization URL\n    OAuthService--\x3e>Backend: Authorization URL + state\n    Backend--\x3e>Frontend: Redirect URL\n    Frontend->>Provider: Redirect to OAuth provider\n    Provider->>User: Show consent screen\n    User->>Provider: Approve access\n    Provider->>Frontend: Redirect to callback with code\n    \n    Frontend->>Backend: GET /oauth/callback/{provider}?code=xxx&state=yyy\n    Backend->>OAuthService: handleOAuthCallback(provider, code, state)\n    OAuthService->>OAuthService: Verify state token\n    \n    OAuthService->>Provider: POST /oauth/token (exchange code)\n    Provider--\x3e>OAuthService: Access token + user info\n    \n    OAuthService->>Database: Find user by provider ID\n    \n    alt User exists\n        Database--\x3e>OAuthService: Existing user\n        OAuthService->>Database: Update last login\n    else New user\n        OAuthService->>Database: Create new User\n        OAuthService->>Database: Create UserOAuthIdentity\n        Database--\x3e>OAuthService: New user created\n    end\n    \n    OAuthService->>OAuthService: Generate JWT token\n    OAuthService--\x3e>Backend: UserResponse + JWT\n    Backend--\x3e>Frontend: JWT token + user data\n    Frontend->>Frontend: Store JWT in localStorage\n    Frontend--\x3e>User: Redirect to dashboard'}),"\n",(0,c.jsx)(n.h2,{id:"service-account-connection-oauth-for-third-party-services",children:"Service Account Connection (OAuth for Third-Party Services)"}),"\n",(0,c.jsx)(n.mermaid,{value:'sequenceDiagram\n    actor User\n    participant Frontend\n    participant Backend\n    participant ServiceAccountService\n    participant OAuthService\n    participant Provider as Third-Party Service (GitHub/Slack)\n    participant Database\n\n    User->>Frontend: Connect GitHub service\n    Frontend->>Backend: POST /services/{serviceId}/connect\n    Backend->>Backend: Verify JWT & get userId\n    Backend->>OAuthService: initiateOAuthFlow("github", scopes)\n    OAuthService->>OAuthService: Generate state with userId + serviceId\n    OAuthService--\x3e>Backend: Authorization URL\n    Backend--\x3e>Frontend: Authorization URL\n    Frontend->>Provider: Redirect to GitHub OAuth\n    Provider->>User: Show permissions screen\n    User->>Provider: Approve permissions\n    Provider->>Frontend: Redirect with code\n    \n    Frontend->>Backend: GET /oauth/callback/service/github?code=xxx&state=yyy\n    Backend->>OAuthService: handleServiceOAuthCallback(code, state)\n    OAuthService->>OAuthService: Decode state (userId, serviceId)\n    \n    OAuthService->>Provider: POST /oauth/token (exchange code)\n    Provider--\x3e>OAuthService: Access + Refresh tokens\n    \n    OAuthService->>Provider: GET /user (get account info)\n    Provider--\x3e>OAuthService: User account details\n    \n    OAuthService->>ServiceAccountService: createServiceAccount(tokens, accountInfo)\n    ServiceAccountService->>Database: Check existing account\n    \n    alt Account exists\n        Database--\x3e>ServiceAccountService: Existing ServiceAccount\n        ServiceAccountService->>Database: Update tokens & metadata\n    else New account\n        ServiceAccountService->>Database: Create new ServiceAccount\n        Database--\x3e>ServiceAccountService: ServiceAccount created\n    end\n    \n    ServiceAccountService--\x3e>Backend: ServiceAccount details\n    Backend--\x3e>Frontend: Connection successful\n    Frontend--\x3e>User: Show "GitHub connected" \u2713'}),"\n",(0,c.jsx)(n.h2,{id:"token-refresh-flow",children:"Token Refresh Flow"}),"\n",(0,c.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant AreaExecutionService\n    participant ActionExecutor\n    participant ServiceAccountService\n    participant Provider as Third-Party API\n    participant Database\n\n    AreaExecutionService->>ActionExecutor: execute(actionInstance, context)\n    ActionExecutor->>ActionExecutor: Get ServiceAccount\n    ActionExecutor->>ActionExecutor: Check token expiration\n    \n    alt Token expired or about to expire\n        ActionExecutor->>ServiceAccountService: refreshServiceAccount(accountId)\n        ServiceAccountService->>Database: Get ServiceAccount with refresh token\n        Database--\x3e>ServiceAccountService: ServiceAccount data\n        \n        ServiceAccountService->>Provider: POST /oauth/token (refresh)\n        Note over ServiceAccountService,Provider: grant_type=refresh_token\n        Provider--\x3e>ServiceAccountService: New access + refresh tokens\n        \n        ServiceAccountService->>Database: Update tokens & expiration\n        Database--\x3e>ServiceAccountService: Updated\n        ServiceAccountService--\x3e>ActionExecutor: New access token\n    else Token valid\n        ActionExecutor->>ActionExecutor: Use existing access token\n    end\n    \n    ActionExecutor->>Provider: API Request with access token\n    \n    alt API call successful\n        Provider--\x3e>ActionExecutor: Response data\n        ActionExecutor--\x3e>AreaExecutionService: Execution result\n    else Token invalid (401)\n        Provider--\x3e>ActionExecutor: 401 Unauthorized\n        ActionExecutor->>ServiceAccountService: Force token refresh\n        ServiceAccountService->>Provider: Refresh token request\n        Provider--\x3e>ServiceAccountService: New tokens\n        ServiceAccountService->>Database: Update tokens\n        ActionExecutor->>Provider: Retry API call\n        Provider--\x3e>ActionExecutor: Response data\n        ActionExecutor--\x3e>AreaExecutionService: Execution result\n    end"}),"\n",(0,c.jsx)(n.h2,{id:"key-points",children:"Key Points"}),"\n",(0,c.jsx)(n.h3,{id:"user-oauth-flow",children:"User OAuth Flow"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:"State token prevents CSRF attacks"}),"\n",(0,c.jsx)(n.li,{children:"User approves permissions on provider site"}),"\n",(0,c.jsx)(n.li,{children:"Code is exchanged for access token server-side"}),"\n",(0,c.jsx)(n.li,{children:"User account is created or linked with OAuth identity"}),"\n",(0,c.jsx)(n.li,{children:"JWT token is generated for session management"}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"service-account-oauth-flow",children:"Service Account OAuth Flow"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:"State includes userId and serviceId for context"}),"\n",(0,c.jsx)(n.li,{children:"Scopes request specific permissions needed for actions"}),"\n",(0,c.jsx)(n.li,{children:"Both access and refresh tokens are stored"}),"\n",(0,c.jsx)(n.li,{children:"Account identifier links to provider account"}),"\n",(0,c.jsx)(n.li,{children:"Tokens are automatically refreshed when expired"}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"State tokens prevent CSRF attacks"}),"\n",(0,c.jsx)(n.li,{children:"Authorization codes are single-use"}),"\n",(0,c.jsx)(n.li,{children:"Access tokens have limited lifetime"}),"\n",(0,c.jsx)(n.li,{children:"Refresh tokens enable automatic renewal"}),"\n",(0,c.jsx)(n.li,{children:"All OAuth operations are server-side to protect secrets"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const c={},i=r.createContext(c);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);