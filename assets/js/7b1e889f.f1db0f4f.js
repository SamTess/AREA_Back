"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[9011],{3196:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"providers/discord","title":"Discord Provider - Technical Documentation","description":"Overview","source":"@site/docs/providers/discord.md","sourceDirName":"providers","slug":"/providers/discord","permalink":"/docs/providers/discord","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/providers/discord.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"OAuth Providers Documentation","permalink":"/docs/providers/"},"next":{"title":"GitHub Provider - Technical Documentation","permalink":"/docs/providers/github"}}');var r=i(4848),d=i(8453);const c={},t="Discord Provider - Technical Documentation",l={},o=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Core Components",id:"core-components",level:3},{value:"1. OAuth Service (<code>OAuthDiscordService.java</code>)",id:"1-oauth-service-oauthdiscordservicejava",level:4},{value:"2. Action Service (<code>DiscordActionService.java</code>)",id:"2-action-service-discordactionservicejava",level:4},{value:"3. Webhook Service (<code>DiscordWebhookService.java</code>)",id:"3-webhook-service-discordwebhookservicejava",level:4},{value:"OAuth2 Implementation",id:"oauth2-implementation",level:2},{value:"Configuration",id:"configuration",level:3},{value:"OAuth Flow",id:"oauth-flow",level:3},{value:"Required Scopes",id:"required-scopes",level:3},{value:"Account Linking",id:"account-linking",level:3},{value:"Implemented Services",id:"implemented-services",level:2},{value:"Actions (Executable Operations)",id:"actions-executable-operations",level:3},{value:"1. Send Message to Channel",id:"1-send-message-to-channel",level:4},{value:"2. Create Channel Webhook",id:"2-create-channel-webhook",level:4},{value:"3. Send Webhook Message",id:"3-send-webhook-message",level:4},{value:"4. Add Reaction",id:"4-add-reaction",level:4},{value:"5. Create Guild Channel",id:"5-create-guild-channel",level:4},{value:"6. Delete Message",id:"6-delete-message",level:4},{value:"Events (Triggers)",id:"events-triggers",level:3},{value:"1. New Message",id:"1-new-message",level:4},{value:"2. Message Deleted",id:"2-message-deleted",level:4},{value:"3. New Guild Member",id:"3-new-guild-member",level:4},{value:"4. Guild Member Removed",id:"4-guild-member-removed",level:4},{value:"5. Reaction Added",id:"5-reaction-added",level:4},{value:"6. Channel Created",id:"6-channel-created",level:4},{value:"API Integration",id:"api-integration",level:2},{value:"Base URL",id:"base-url",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"Key Endpoints Used",id:"key-endpoints-used",level:3},{value:"Webhook System",id:"webhook-system",level:2},{value:"Webhook Registration",id:"webhook-registration",level:3},{value:"Webhook Signature Validation",id:"webhook-signature-validation",level:3},{value:"Webhook Event Processing",id:"webhook-event-processing",level:3},{value:"Deduplication",id:"deduplication",level:3},{value:"Token Management",id:"token-management",level:2},{value:"Storage",id:"storage",level:3},{value:"Retrieval",id:"retrieval",level:3},{value:"Token Refresh",id:"token-refresh",level:3},{value:"Monitoring &amp; Metrics",id:"monitoring--metrics",level:2},{value:"Prometheus Metrics",id:"prometheus-metrics",level:3},{value:"Exposed Metrics",id:"exposed-metrics",level:3},{value:"Database Schema",id:"database-schema",level:2},{value:"Service Entry",id:"service-entry",level:3},{value:"Action Definitions",id:"action-definitions",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Errors",id:"common-errors",level:3},{value:"Error Response Format",id:"error-response-format",level:3},{value:"Implementation",id:"implementation",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Token Security",id:"token-security",level:3},{value:"Webhook Security",id:"webhook-security",level:3},{value:"Permission Management",id:"permission-management",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Frontend OAuth Initiation",id:"frontend-oauth-initiation",level:3},{value:"Backend AREA Creation",id:"backend-area-creation",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Tests Location",id:"unit-tests-location",level:3},{value:"Test Coverage",id:"test-coverage",level:3},{value:"Mock Data",id:"mock-data",level:3},{value:"Future Enhancements",id:"future-enhancements",level:2},{value:"Planned Features",id:"planned-features",level:3},{value:"API Version Updates",id:"api-version-updates",level:3},{value:"Resources",id:"resources",level:2},{value:"Support",id:"support",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"discord-provider---technical-documentation",children:"Discord Provider - Technical Documentation"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Discord provider enables OAuth2 authentication and integration with Discord services within the AREA platform. It allows users to authenticate using their Discord account and interact with Discord servers, channels, and messages through automated actions and event triggers."}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsxs)(n.h4,{id:"1-oauth-service-oauthdiscordservicejava",children:["1. OAuth Service (",(0,r.jsx)(n.code,{children:"OAuthDiscordService.java"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"src/main/java/area/server/AREA_Back/service/Auth/OAuthDiscordService.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extends"}),": ",(0,r.jsx)(n.code,{children:"OAuthService"})," (abstract base class)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Handles Discord OAuth2 authentication and token management"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"OAuth2 authorization code flow"}),"\n",(0,r.jsx)(n.li,{children:"User authentication and registration"}),"\n",(0,r.jsx)(n.li,{children:"Account linking to existing users"}),"\n",(0,r.jsx)(n.li,{children:"Access token encryption and storage"}),"\n",(0,r.jsx)(n.li,{children:"Prometheus metrics integration"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"2-action-service-discordactionservicejava",children:["2. Action Service (",(0,r.jsx)(n.code,{children:"DiscordActionService.java"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"src/main/java/area/server/AREA_Back/service/Area/Services/DiscordActionService.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Executes Discord actions (send messages, manage channels, etc.)"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"3-webhook-service-discordwebhookservicejava",children:["3. Webhook Service (",(0,r.jsx)(n.code,{children:"DiscordWebhookService.java"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"src/main/java/area/server/AREA_Back/service/Webhook/DiscordWebhookService.java"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Processes incoming Discord webhook events"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"oauth2-implementation",children:"OAuth2 Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The Discord provider requires the following environment variables:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"spring.security.oauth2.client.registration.discord.client-id=<your-client-id>\nspring.security.oauth2.client.registration.discord.client-secret=<your-client-secret>\napp.webhook.discord.secret=<your-webhook-secret>\nOAUTH_REDIRECT_BASE_URL=http://localhost:3000\n"})}),"\n",(0,r.jsx)(n.h3,{id:"oauth-flow",children:"OAuth Flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Authorization Request"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["User initiates OAuth flow via ",(0,r.jsx)(n.code,{children:"/api/oauth/discord/authorize"})]}),"\n",(0,r.jsxs)(n.li,{children:["Redirects to Discord with required scopes: ",(0,r.jsx)(n.code,{children:"identify"}),", ",(0,r.jsx)(n.code,{children:"email"}),", ",(0,r.jsx)(n.code,{children:"guilds"}),", ",(0,r.jsx)(n.code,{children:"webhook.incoming"})]}),"\n",(0,r.jsxs)(n.li,{children:["Callback URL: ",(0,r.jsx)(n.code,{children:"{OAUTH_REDIRECT_BASE_URL}/oauth-callback"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Token Exchange"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Authorization code is exchanged for access token"}),"\n",(0,r.jsxs)(n.li,{children:["Token endpoint: ",(0,r.jsx)(n.code,{children:"https://discord.com/api/oauth2/token"})]}),"\n",(0,r.jsx)(n.li,{children:"Access token is encrypted before storage"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"User Profile Retrieval"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Fetches user profile from ",(0,r.jsx)(n.code,{children:"https://discord.com/api/users/@me"})]}),"\n",(0,r.jsxs)(n.li,{children:["Retrieves user guilds from ",(0,r.jsx)(n.code,{children:"https://discord.com/api/users/@me/guilds"})]}),"\n",(0,r.jsx)(n.li,{children:"Creates or updates user account"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Session Creation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generates JWT access and refresh tokens"}),"\n",(0,r.jsx)(n.li,{children:"Sets secure HTTP-only cookies"}),"\n",(0,r.jsx)(n.li,{children:"Stores encrypted Discord access token in database"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"required-scopes",children:"Required Scopes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"identify         - Access to user's identity\nemail            - Access to user's email\nguilds           - Access to user's guilds (servers)\nwebhook.incoming - Create and manage webhooks\nmessages.read    - Read message history\nbot              - Add bot to guilds (optional)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"account-linking",children:"Account Linking"}),"\n",(0,r.jsx)(n.p,{children:"The provider supports linking Discord accounts to existing authenticated users:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public UserOAuthIdentity linkToExistingUser(User existingUser, String authorizationCode)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Endpoint"}),": ",(0,r.jsx)(n.code,{children:"/api/oauth-link/discord/exchange"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Links Discord account to current session user"}),"\n",(0,r.jsx)(n.li,{children:"Validates email uniqueness"}),"\n",(0,r.jsx)(n.li,{children:"Prevents duplicate linking"}),"\n",(0,r.jsx)(n.li,{children:"Stores Discord profile metadata (username, discriminator, avatar, guilds)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implemented-services",children:"Implemented Services"}),"\n",(0,r.jsx)(n.h3,{id:"actions-executable-operations",children:"Actions (Executable Operations)"}),"\n",(0,r.jsx)(n.h4,{id:"1-send-message-to-channel",children:"1. Send Message to Channel"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action Key"}),": ",(0,r.jsx)(n.code,{children:"send_message"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Sends a message to a Discord channel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channel_id"})," (required): Discord channel ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"})," (required): Message content (max 2000 characters)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"embeds"})," (optional): Array of embed objects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tts"})," (optional): Text-to-speech flag"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "channel_id": "123456789012345678",\n  "content": "Hello from AREA!",\n  "embeds": [{\n    "title": "Notification",\n    "description": "Your automation was triggered",\n    "color": 3447003,\n    "fields": [\n      {"name": "Status", "value": "Success", "inline": true}\n    ]\n  }]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"API Endpoint"}),": ",(0,r.jsx)(n.code,{children:"POST https://discord.com/api/v10/channels/{channel_id}/messages"})]}),"\n",(0,r.jsx)(n.h4,{id:"2-create-channel-webhook",children:"2. Create Channel Webhook"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action Key"}),": ",(0,r.jsx)(n.code,{children:"create_webhook"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Creates a webhook for a Discord channel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channel_id"})," (required): Discord channel ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (required): Webhook name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"avatar_url"})," (optional): Webhook avatar URL"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"API Endpoint"}),": ",(0,r.jsx)(n.code,{children:"POST https://discord.com/api/v10/channels/{channel_id}/webhooks"})]}),"\n",(0,r.jsx)(n.h4,{id:"3-send-webhook-message",children:"3. Send Webhook Message"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action Key"}),": ",(0,r.jsx)(n.code,{children:"send_webhook_message"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Sends a message via webhook (no authentication required)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"webhook_url"})," (required): Complete webhook URL with token"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"})," (required): Message content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"username"})," (optional): Override webhook username"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"avatar_url"})," (optional): Override webhook avatar"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"4-add-reaction",children:"4. Add Reaction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action Key"}),": ",(0,r.jsx)(n.code,{children:"add_reaction"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Adds a reaction emoji to a message"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channel_id"})," (required): Discord channel ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"message_id"})," (required): Discord message ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"emoji"})," (required): Unicode emoji or custom emoji ID"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"API Endpoint"}),": ",(0,r.jsx)(n.code,{children:"PUT https://discord.com/api/v10/channels/{channel_id}/messages/{message_id}/reactions/{emoji}/@me"})]}),"\n",(0,r.jsx)(n.h4,{id:"5-create-guild-channel",children:"5. Create Guild Channel"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action Key"}),": ",(0,r.jsx)(n.code,{children:"create_channel"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Creates a new channel in a guild"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"guild_id"})," (required): Discord guild (server) ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (required): Channel name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," (optional): Channel type (0=text, 2=voice, 4=category)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic"})," (optional): Channel topic"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"API Endpoint"}),": ",(0,r.jsx)(n.code,{children:"POST https://discord.com/api/v10/guilds/{guild_id}/channels"})]}),"\n",(0,r.jsx)(n.h4,{id:"6-delete-message",children:"6. Delete Message"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action Key"}),": ",(0,r.jsx)(n.code,{children:"delete_message"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Deletes a message"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channel_id"})," (required): Discord channel ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"message_id"})," (required): Discord message ID"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"API Endpoint"}),": ",(0,r.jsx)(n.code,{children:"DELETE https://discord.com/api/v10/channels/{channel_id}/messages/{message_id}"})]}),"\n",(0,r.jsx)(n.h3,{id:"events-triggers",children:"Events (Triggers)"}),"\n",(0,r.jsx)(n.h4,{id:"1-new-message",children:"1. New Message"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Key"}),": ",(0,r.jsx)(n.code,{children:"new_message"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Triggers when a new message is posted"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Webhook Event"}),": ",(0,r.jsx)(n.code,{children:"MESSAGE_CREATE"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channel_id"})," (optional): Filter by specific channel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"guild_id"})," (optional): Filter by specific guild"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content_contains"})," (optional): Filter by message content"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Payload"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "message_id": "123456789012345678",\n  "channel_id": "123456789012345678",\n  "guild_id": "123456789012345678",\n  "author": {\n    "id": "123456789012345678",\n    "username": "username",\n    "discriminator": "1234",\n    "avatar": "avatar_hash"\n  },\n  "content": "Message content",\n  "timestamp": "2024-01-15T10:30:00.000Z",\n  "attachments": [],\n  "embeds": [],\n  "mentions": []\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"2-message-deleted",children:"2. Message Deleted"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Key"}),": ",(0,r.jsx)(n.code,{children:"message_deleted"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Triggers when a message is deleted"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Webhook Event"}),": ",(0,r.jsx)(n.code,{children:"MESSAGE_DELETE"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channel_id"})," (optional): Filter by specific channel"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"3-new-guild-member",children:"3. New Guild Member"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Key"}),": ",(0,r.jsx)(n.code,{children:"member_joined"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Triggers when a user joins a guild"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Webhook Event"}),": ",(0,r.jsx)(n.code,{children:"GUILD_MEMBER_ADD"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"guild_id"})," (required): Discord guild ID"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Payload"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "guild_id": "123456789012345678",\n  "user": {\n    "id": "123456789012345678",\n    "username": "newmember",\n    "discriminator": "5678",\n    "avatar": "avatar_hash"\n  },\n  "joined_at": "2024-01-15T10:30:00.000Z",\n  "roles": []\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"4-guild-member-removed",children:"4. Guild Member Removed"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Key"}),": ",(0,r.jsx)(n.code,{children:"member_left"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Triggers when a user leaves or is kicked from a guild"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Webhook Event"}),": ",(0,r.jsx)(n.code,{children:"GUILD_MEMBER_REMOVE"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"guild_id"})," (required): Discord guild ID"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"5-reaction-added",children:"5. Reaction Added"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Key"}),": ",(0,r.jsx)(n.code,{children:"reaction_added"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Triggers when a reaction is added to a message"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Webhook Event"}),": ",(0,r.jsx)(n.code,{children:"MESSAGE_REACTION_ADD"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channel_id"})," (optional): Filter by specific channel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"emoji"})," (optional): Filter by specific emoji"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"6-channel-created",children:"6. Channel Created"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Key"}),": ",(0,r.jsx)(n.code,{children:"channel_created"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Triggers when a channel is created"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Webhook Event"}),": ",(0,r.jsx)(n.code,{children:"CHANNEL_CREATE"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"guild_id"})," (required): Discord guild ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," (optional): Filter by channel type"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"api-integration",children:"API Integration"}),"\n",(0,r.jsx)(n.h3,{id:"base-url",children:"Base URL"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://discord.com/api/v10\n"})}),"\n",(0,r.jsx)(n.h3,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsx)(n.p,{children:"All API requests require authentication via Bearer token:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer <access_token>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,r.jsx)(n.p,{children:"Discord implements rate limiting:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Global Rate Limit"}),": 50 requests per second"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Per-Route Rate Limits"}),": Vary by endpoint"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response Headers"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"X-RateLimit-Limit"}),": Maximum requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"X-RateLimit-Remaining"}),": Remaining requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"X-RateLimit-Reset"}),": Unix timestamp when limit resets"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Handling"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'if (response.getStatusCode() == 429) {\n    int retryAfter = response.getHeaders().get("Retry-After");\n    Thread.sleep(retryAfter * 1000);\n    // Retry request\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"key-endpoints-used",children:"Key Endpoints Used"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Endpoint"}),(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Purpose"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/oauth2/token"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Exchange authorization code"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/users/@me"})}),(0,r.jsx)(n.td,{children:"GET"}),(0,r.jsx)(n.td,{children:"Get current user profile"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/users/@me/guilds"})}),(0,r.jsx)(n.td,{children:"GET"}),(0,r.jsx)(n.td,{children:"Get user's guilds"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/channels/{channel_id}/messages"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Send message"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/channels/{channel_id}/messages"})}),(0,r.jsx)(n.td,{children:"GET"}),(0,r.jsx)(n.td,{children:"Get channel messages"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/channels/{channel_id}/webhooks"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Create webhook"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/guilds/{guild_id}/channels"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Create channel"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"webhook-system",children:"Webhook System"}),"\n",(0,r.jsx)(n.h3,{id:"webhook-registration",children:"Webhook Registration"}),"\n",(0,r.jsx)(n.p,{children:"To receive Discord events, register a webhook in your Discord application:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Go to Discord Developer Portal"}),"\n",(0,r.jsx)(n.li,{children:"Select your application"}),"\n",(0,r.jsx)(n.li,{children:"Navigate to Webhooks section"}),"\n",(0,r.jsxs)(n.li,{children:["Add webhook URL: ",(0,r.jsx)(n.code,{children:"https://your-domain.com/api/webhooks/discord"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"webhook-signature-validation",children:"Webhook Signature Validation"}),"\n",(0,r.jsx)(n.p,{children:"Discord signs webhooks using Ed25519:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public boolean validateSignature(String signature, String timestamp, String body) {\n    // Discord uses Ed25519 signature verification\n    String message = timestamp + body;\n    return Ed25519.verify(signature, message, publicKey);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Headers"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"X-Signature-Ed25519"}),": Request signature"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"X-Signature-Timestamp"}),": Request timestamp"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"webhook-event-processing",children:"Webhook Event Processing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@PostMapping("/api/webhooks/discord")\npublic ResponseEntity<?> handleWebhook(\n    @RequestHeader("X-Signature-Ed25519") String signature,\n    @RequestHeader("X-Signature-Timestamp") String timestamp,\n    @RequestBody Map<String, Object> payload\n) {\n    // Validate signature\n    if (!webhookSignatureValidator.validate("discord", signature, timestamp, payload)) {\n        return ResponseEntity.status(401).build();\n    }\n    \n    // Handle interaction verification\n    if (payload.get("type").equals(1)) {\n        return ResponseEntity.ok(Map.of("type", 1));\n    }\n    \n    // Process webhook event\n    webhookEventProcessingService.processWebhook("discord", payload);\n    return ResponseEntity.ok().build();\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"deduplication",children:"Deduplication"}),"\n",(0,r.jsx)(n.p,{children:"Discord webhooks are deduplicated using event IDs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String eventId = payload.get("id").toString();\nif (webhookDeduplicationService.isDuplicate("discord", eventId)) {\n    return; // Skip duplicate event\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"token-management",children:"Token Management"}),"\n",(0,r.jsx)(n.h3,{id:"storage",children:"Storage"}),"\n",(0,r.jsx)(n.p,{children:"Discord OAuth tokens are stored encrypted in the database:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "a_user_oauth_identities", schema = "area")\npublic class UserOAuthIdentity {\n    private String provider = "discord";\n    private String accessTokenEnc;    // Encrypted access token\n    private String refreshTokenEnc;   // Encrypted refresh token\n    private LocalDateTime expiresAt;  // Token expiration\n    private Map<String, Object> scopes; // OAuth scopes\n    private Map<String, Object> tokenMeta; // Discord user metadata\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"retrieval",children:"Retrieval"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public String getAccessToken(UUID userId) {\n    ServiceAccount account = serviceAccountRepository\n        .findByUserIdAndServiceKey(userId, "discord")\n        .orElseThrow(() -> new RuntimeException("Discord not connected"));\n    \n    return tokenEncryptionService.decrypt(account.getAccessTokenEnc());\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"token-refresh",children:"Token Refresh"}),"\n",(0,r.jsx)(n.p,{children:"Discord access tokens expire after 7 days:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public String refreshToken(UUID userId) {\n    UserOAuthIdentity identity = userOAuthIdentityRepository\n        .findByUserIdAndProvider(userId, "discord")\n        .orElseThrow();\n    \n    String refreshToken = tokenEncryptionService.decrypt(identity.getRefreshTokenEnc());\n    \n    // Exchange refresh token\n    MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n    params.add("grant_type", "refresh_token");\n    params.add("refresh_token", refreshToken);\n    params.add("client_id", clientId);\n    params.add("client_secret", clientSecret);\n    \n    // Update stored tokens\n    // ...\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"monitoring--metrics",children:"Monitoring & Metrics"}),"\n",(0,r.jsx)(n.h3,{id:"prometheus-metrics",children:"Prometheus Metrics"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@PostConstruct\nprivate void initMetrics() {\n    oauthLoginSuccessCounter = Counter.builder("discord_oauth_login_success")\n        .description("Discord OAuth login successes")\n        .register(meterRegistry);\n    \n    oauthLoginFailureCounter = Counter.builder("discord_oauth_login_failure")\n        .description("Discord OAuth login failures")\n        .register(meterRegistry);\n    \n    apiCallCounter = Counter.builder("discord_api_calls")\n        .tag("endpoint", "various")\n        .description("Discord API calls")\n        .register(meterRegistry);\n    \n    webhookEventCounter = Counter.builder("discord_webhook_events")\n        .tag("event_type", "various")\n        .description("Discord webhook events received")\n        .register(meterRegistry);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"exposed-metrics",children:"Exposed Metrics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"discord_oauth_login_success_total"}),": Successful OAuth logins"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"discord_oauth_login_failure_total"}),": Failed OAuth logins"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"discord_api_calls_total"}),": Total API calls made"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"discord_webhook_events_total"}),": Webhook events received"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"discord_rate_limit_hits_total"}),": Rate limit encounters"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,r.jsx)(n.h3,{id:"service-entry",children:"Service Entry"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"INSERT INTO area.a_services (key, name, auth, is_active, docs_url, icon_light_url, icon_dark_url) \nVALUES (\n    'discord',\n    'Discord',\n    'OAUTH2',\n    true,\n    'https://discord.com/developers/docs',\n    'https://cdn.simpleicons.org/discord/5865F2',\n    'https://cdn.simpleicons.org/discord/FFFFFF'\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"action-definitions",children:"Action Definitions"}),"\n",(0,r.jsx)(n.p,{children:"Action definitions for Discord are stored in the migration file:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Location: ",(0,r.jsx)(n.code,{children:"src/main/resources/db/migration/V12__Add_discord_service_and_actions.sql"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"common-errors",children:"Common Errors"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Error Code"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Handling"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"401"}),(0,r.jsx)(n.td,{children:"Unauthorized"}),(0,r.jsx)(n.td,{children:"Refresh token or re-authenticate"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"403"}),(0,r.jsx)(n.td,{children:"Forbidden"}),(0,r.jsx)(n.td,{children:"Check bot permissions"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"404"}),(0,r.jsx)(n.td,{children:"Not Found"}),(0,r.jsx)(n.td,{children:"Verify channel/guild/message ID"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"429"}),(0,r.jsx)(n.td,{children:"Rate Limited"}),(0,r.jsx)(n.td,{children:"Wait and retry with exponential backoff"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"50001"}),(0,r.jsx)(n.td,{children:"Missing Access"}),(0,r.jsx)(n.td,{children:"User lacks permission"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"50013"}),(0,r.jsx)(n.td,{children:"Missing Permissions"}),(0,r.jsx)(n.td,{children:"Bot lacks permission"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"50035"}),(0,r.jsx)(n.td,{children:"Invalid Form Body"}),(0,r.jsx)(n.td,{children:"Validate request parameters"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"error-response-format",children:"Error Response Format"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "code": 50035,\n  "message": "Invalid Form Body",\n  "errors": {\n    "content": {\n      "_errors": [\n        {\n          "code": "BASE_TYPE_REQUIRED",\n          "message": "This field is required"\n        }\n      ]\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public Map<String, Object> executeAction(String actionKey, \n                                         Map<String, Object> inputPayload,\n                                         Map<String, Object> actionParams,\n                                         UUID userId) {\n    try {\n        String accessToken = getAccessToken(userId);\n        \n        return switch (actionKey) {\n            case "send_message" -> sendMessage(accessToken, actionParams);\n            case "create_webhook" -> createWebhook(accessToken, actionParams);\n            default -> throw new IllegalArgumentException("Unknown action: " + actionKey);\n        };\n    } catch (HttpClientErrorException e) {\n        if (e.getStatusCode().value() == 401) {\n            // Token expired, try refresh\n            refreshToken(userId);\n            return executeAction(actionKey, inputPayload, actionParams, userId);\n        }\n        throw new RuntimeException("Discord API error: " + e.getMessage());\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"token-security",children:"Token Security"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encryption"}),": All tokens encrypted at rest using AES-256"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Transmission"}),": Tokens only transmitted over HTTPS"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scope Limitation"}),": Request minimum required scopes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Token Rotation"}),": Implement automatic token refresh"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"webhook-security",children:"Webhook Security"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Signature Validation"}),": Always validate Ed25519 signatures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timestamp Check"}),": Reject requests older than 5 minutes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Secret Management"}),": Store webhook secrets in environment variables"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTPS Only"}),": Only accept webhook requests over HTTPS"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"permission-management",children:"Permission Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Check bot permissions before action execution\npublic boolean hasPermission(String guildId, String permission) {\n    // Fetch bot member in guild\n    // Check permission flags\n    return true; // or false\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,r.jsx)(n.h3,{id:"frontend-oauth-initiation",children:"Frontend OAuth Initiation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const connectDiscord = (): void => {\n  localStorage.setItem('oauth_provider', 'discord');\n  const oauthUrl = `${API_CONFIG.baseURL}/api/oauth/discord/authorize`;\n  window.location.href = oauthUrl;\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"backend-area-creation",children:"Backend AREA Creation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'CreateAreaWithActionsRequest request = new CreateAreaWithActionsRequest();\nrequest.setName("Discord Notification");\nrequest.setDescription("Send message when GitHub issue created");\n\n// Action (trigger)\nActionLinkRequest action = new ActionLinkRequest();\naction.setActionDefinitionKey("github.new_issue");\naction.setServiceAccountId(githubAccountId);\naction.setActionParams(Map.of("repository", "owner/repo"));\n\n// Reaction\nActionLinkRequest reaction = new ActionLinkRequest();\nreaction.setActionDefinitionKey("discord.send_message");\nreaction.setServiceAccountId(discordAccountId);\nreaction.setActionParams(Map.of(\n    "channel_id", "123456789012345678",\n    "content", "New issue: {{issue_title}}"\n));\n\nrequest.setActions(List.of(action));\nrequest.setReactions(List.of(reaction));\n'})}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.h3,{id:"unit-tests-location",children:"Unit Tests Location"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"src/test/java/area/server/AREA_Back/service/OAuthDiscordServiceTest.java"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"src/test/java/area/server/AREA_Back/service/DiscordActionServiceTest.java"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"src/test/java/area/server/AREA_Back/service/DiscordWebhookServiceTest.java"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"test-coverage",children:"Test Coverage"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Invalid action keys"}),"\n",(0,r.jsx)(n.li,{children:"Missing tokens"}),"\n",(0,r.jsx)(n.li,{children:"Token expiration and refresh"}),"\n",(0,r.jsx)(n.li,{children:"Webhook signature validation"}),"\n",(0,r.jsx)(n.li,{children:"Event deduplication"}),"\n",(0,r.jsx)(n.li,{children:"Error handling scenarios"}),"\n",(0,r.jsx)(n.li,{children:"Rate limiting scenarios"}),"\n",(0,r.jsx)(n.li,{children:"Permission validation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"mock-data",children:"Mock Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Test\nvoid testSendMessage() {\n    // Mock Discord API response\n    when(restTemplate.postForEntity(anyString(), any(), eq(Map.class)))\n        .thenReturn(ResponseEntity.ok(Map.of(\n            "id", "123456789012345678",\n            "content", "Test message"\n        )));\n    \n    Map<String, Object> result = discordActionService.executeAction(\n        "send_message",\n        Map.of(),\n        Map.of("channel_id", "123", "content", "Test"),\n        userId\n    );\n    \n    assertNotNull(result);\n    assertEquals("123456789012345678", result.get("message_id"));\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,r.jsx)(n.h3,{id:"planned-features",children:"Planned Features"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Voice Channel Support"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Join/leave voice channels"}),"\n",(0,r.jsx)(n.li,{children:"Send voice messages"}),"\n",(0,r.jsx)(n.li,{children:"Stream audio"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Advanced Moderation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Auto-moderation rules"}),"\n",(0,r.jsx)(n.li,{children:"Ban/kick members"}),"\n",(0,r.jsx)(n.li,{children:"Timeout management"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Slash Commands"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Register slash commands"}),"\n",(0,r.jsx)(n.li,{children:"Handle command interactions"}),"\n",(0,r.jsx)(n.li,{children:"Command permissions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Thread Support"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create/manage threads"}),"\n",(0,r.jsx)(n.li,{children:"Thread events"}),"\n",(0,r.jsx)(n.li,{children:"Thread permissions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Forum Channels"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create forum posts"}),"\n",(0,r.jsx)(n.li,{children:"Manage tags"}),"\n",(0,r.jsx)(n.li,{children:"Forum events"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Stage Channels"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create stage instances"}),"\n",(0,r.jsx)(n.li,{children:"Manage speakers"}),"\n",(0,r.jsx)(n.li,{children:"Stage events"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Scheduled Events"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create guild events"}),"\n",(0,r.jsx)(n.li,{children:"Manage RSVPs"}),"\n",(0,r.jsx)(n.li,{children:"Event reminders"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"api-version-updates",children:"API Version Updates"}),"\n",(0,r.jsx)(n.p,{children:"Discord API is currently at v10. Monitor for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"New event types"}),"\n",(0,r.jsx)(n.li,{children:"Deprecated endpoints"}),"\n",(0,r.jsx)(n.li,{children:"New permissions"}),"\n",(0,r.jsx)(n.li,{children:"Gateway intents changes"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Discord Developer Portal"}),": ",(0,r.jsx)(n.a,{href:"https://discord.com/developers/docs",children:"https://discord.com/developers/docs"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OAuth2 Documentation"}),": ",(0,r.jsx)(n.a,{href:"https://discord.com/developers/docs/topics/oauth2",children:"https://discord.com/developers/docs/topics/oauth2"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API Reference"}),": ",(0,r.jsx)(n.a,{href:"https://discord.com/developers/docs/reference",children:"https://discord.com/developers/docs/reference"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Community Resources"}),": ",(0,r.jsx)(n.a,{href:"https://discord.gg/discord-developers",children:"https://discord.gg/discord-developers"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rate Limit Guide"}),": ",(0,r.jsx)(n.a,{href:"https://discord.com/developers/docs/topics/rate-limits",children:"https://discord.com/developers/docs/topics/rate-limits"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Gateway Documentation"}),": ",(0,r.jsx)(n.a,{href:"https://discord.com/developers/docs/topics/gateway",children:"https://discord.com/developers/docs/topics/gateway"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,r.jsx)(n.p,{children:"For issues related to Discord integration:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Check Discord API status: ",(0,r.jsx)(n.a,{href:"https://discordstatus.com",children:"https://discordstatus.com"})]}),"\n",(0,r.jsx)(n.li,{children:"Review API documentation"}),"\n",(0,r.jsx)(n.li,{children:"Check AREA backend logs"}),"\n",(0,r.jsx)(n.li,{children:"Verify OAuth credentials"}),"\n",(0,r.jsx)(n.li,{children:"Test webhook connectivity"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>t});var s=i(6540);const r={},d=s.createContext(r);function c(e){const n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);