"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[5080],{326:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"worker/quick-start-worker","title":"AREA Worker System - Quick Start Guide","description":"\ud83d\ude80 Quick Start","source":"@site/docs/worker/quick-start-worker.md","sourceDirName":"worker","slug":"/worker/quick-start-worker","permalink":"/AREA_Back/docs/worker/quick-start-worker","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/worker/quick-start-worker.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AREA Reaction Worker System","permalink":"/AREA_Back/docs/worker/area-reaction-worker"},"next":{"title":"AREA Worker System - Architecture Deep Dive","permalink":"/AREA_Back/docs/worker/worker-architecture"}}');var i=t(4848),s=t(8453);const a={},o="AREA Worker System - Quick Start Guide",c={},l=[{value:"\ud83d\ude80 Quick Start",id:"-quick-start",level:2},{value:"1. Prerequisites",id:"1-prerequisites",level:3},{value:"2. Start the System",id:"2-start-the-system",level:3},{value:"3. Initialize the Worker",id:"3-initialize-the-worker",level:3},{value:"4. Check Worker Status",id:"4-check-worker-status",level:3},{value:"\ud83d\udcd6 Basic Usage Examples",id:"-basic-usage-examples",level:2},{value:"Example 1: Send a Test Event",id:"example-1-send-a-test-event",level:3},{value:"Example 2: Create and Execute a Reaction",id:"example-2-create-and-execute-a-reaction",level:3},{value:"Example 3: Monitor Processing",id:"example-3-monitor-processing",level:3},{value:"\ud83d\udd27 Configuration Examples",id:"-configuration-examples",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Application Properties",id:"application-properties",level:3},{value:"\ud83e\uddea Testing Guide",id:"-testing-guide",level:2},{value:"Run Unit Tests",id:"run-unit-tests",level:3},{value:"Run Integration Tests",id:"run-integration-tests",level:3},{value:"Manual Testing",id:"manual-testing",level:3},{value:"\ud83d\udcca Monitoring Examples",id:"-monitoring-examples",level:2},{value:"Health Check Script",id:"health-check-script",level:3},{value:"Prometheus Metrics (if enabled)",id:"prometheus-metrics-if-enabled",level:3},{value:"\ud83d\udea8 Troubleshooting Examples",id:"-troubleshooting-examples",level:2},{value:"Problem: Worker Not Processing Events",id:"problem-worker-not-processing-events",level:3},{value:"Problem: High Failure Rate",id:"problem-high-failure-rate",level:3},{value:"Problem: Memory Issues",id:"problem-memory-issues",level:3},{value:"\ud83d\udcda Common Patterns",id:"-common-patterns",level:2},{value:"Pattern 1: Batch Processing",id:"pattern-1-batch-processing",level:3},{value:"Pattern 2: Priority Processing",id:"pattern-2-priority-processing",level:3},{value:"Pattern 3: Graceful Shutdown",id:"pattern-3-graceful-shutdown",level:3},{value:"\ud83d\udd17 Related Documentation",id:"-related-documentation",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"area-worker-system---quick-start-guide",children:"AREA Worker System - Quick Start Guide"})}),"\n",(0,i.jsx)(n.h2,{id:"-quick-start",children:"\ud83d\ude80 Quick Start"}),"\n",(0,i.jsx)(n.h3,{id:"1-prerequisites",children:"1. Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Java 17+"}),"\n",(0,i.jsx)(n.li,{children:"Docker & Docker Compose"}),"\n",(0,i.jsx)(n.li,{children:"Gradle 7.6+"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-start-the-system",children:"2. Start the System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Start Redis and PostgreSQL\ndocker-compose up -d\n\n# Run the application\n./gradlew bootRun\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-initialize-the-worker",children:"3. Initialize the Worker"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Initialize Redis stream and consumer group\ncurl -X POST http://localhost:8080/api/worker/initialize-stream\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-check-worker-status",children:"4. Check Worker Status"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check if worker is running\ncurl http://localhost:8080/api/worker/status\n\n# Get execution statistics\ncurl http://localhost:8080/api/worker/statistics\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-basic-usage-examples",children:"\ud83d\udcd6 Basic Usage Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-1-send-a-test-event",children:"Example 1: Send a Test Event"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X POST "http://localhost:8080/api/worker/test-event" \\\n  -d "actionInstanceId=550e8400-e29b-41d4-a716-446655440000" \\\n  -d "areaId=550e8400-e29b-41d4-a716-446655440001"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-2-create-and-execute-a-reaction",children:"Example 2: Create and Execute a Reaction"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// 1. Create an execution\nExecution execution = executionService.createExecution(\n    actionInstance,\n    null,\n    Map.of("message", "Hello World!", "recipient", "user@example.com"),\n    UUID.randomUUID()\n);\n\n// 2. Publish to worker\nString eventId = redisEventService.publishExecutionEvent(\n    execution.getId(),\n    actionInstance.getId(),\n    area.getId(),\n    Map.of("trigger", "webhook", "data", "example")\n);\n\n// 3. Worker automatically processes the execution\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-3-monitor-processing",children:"Example 3: Monitor Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Watch worker statistics in real-time\nwatch -n 2 "curl -s http://localhost:8080/api/worker/statistics | jq"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-configuration-examples",children:"\ud83d\udd27 Configuration Examples"}),"\n",(0,i.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Redis configuration\nexport REDIS_HOST=localhost\nexport REDIS_PORT=6379\nexport REDIS_PASSWORD=yourpassword\n\n# Database configuration\nexport DATABASE_URL=jdbc:postgresql://localhost:5432/area\nexport DATABASE_USERNAME=area\nexport DATABASE_PASSWORD=password\n"})}),"\n",(0,i.jsx)(n.h3,{id:"application-properties",children:"Application Properties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# application-prod.yml\nspring:\n  redis:\n    host: ${REDIS_HOST:localhost}\n    port: ${REDIS_PORT:6379}\n    password: ${REDIS_PASSWORD:}\n    timeout: 2000ms\n    lettuce:\n      pool:\n        max-active: 8\n        max-idle: 8\n        min-idle: 0\n\n# Worker thread pool configuration\narea:\n  worker:\n    core-pool-size: 4\n    max-pool-size: 10\n    queue-capacity: 100\n  reaction:\n    core-pool-size: 2\n    max-pool-size: 6\n    queue-capacity: 50\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-testing-guide",children:"\ud83e\uddea Testing Guide"}),"\n",(0,i.jsx)(n.h3,{id:"run-unit-tests",children:"Run Unit Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# All unit tests\n./gradlew test\n\n# Specific test class\n./gradlew test --tests AreaReactionWorkerTest\n\n# With coverage report\n./gradlew jacocoTestReport\n"})}),"\n",(0,i.jsx)(n.h3,{id:"run-integration-tests",children:"Run Integration Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Integration tests (requires Docker)\n./gradlew integrationTest\n\n# Specific integration test\n./gradlew test --tests WorkerIntegrationTest\n"})}),"\n",(0,i.jsx)(n.h3,{id:"manual-testing",children:"Manual Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# 1. Start the application\n./gradlew bootRun\n\n# 2. In another terminal, send test events\nfor i in {1..10}; do\n  curl -X POST "http://localhost:8080/api/worker/test-event" \\\n    -d "actionInstanceId=$(uuidgen)" \\\n    -d "areaId=$(uuidgen)"\n  sleep 1\ndone\n\n# 3. Monitor results\ncurl http://localhost:8080/api/worker/statistics\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-monitoring-examples",children:"\ud83d\udcca Monitoring Examples"}),"\n",(0,i.jsx)(n.h3,{id:"health-check-script",children:"Health Check Script"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# health-check.sh\n\nWORKER_URL="http://localhost:8080/api/worker"\n\necho "=== Worker Health Check ==="\necho "Worker Status:"\ncurl -s "$WORKER_URL/status" | jq\n\necho -e "\\nExecution Statistics:"\ncurl -s "$WORKER_URL/statistics" | jq\n\necho -e "\\nRedis Stream Info:"\ncurl -s "$WORKER_URL/stream-info" | jq\n'})}),"\n",(0,i.jsx)(n.h3,{id:"prometheus-metrics-if-enabled",children:"Prometheus Metrics (if enabled)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Get worker metrics\ncurl http://localhost:8080/actuator/prometheus | grep area_worker\n\n# Example metrics:\n# area_worker_executions_total{status="ok"} 150\n# area_worker_executions_total{status="failed"} 5\n# area_worker_retry_attempts_total 12\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-troubleshooting-examples",children:"\ud83d\udea8 Troubleshooting Examples"}),"\n",(0,i.jsx)(n.h3,{id:"problem-worker-not-processing-events",children:"Problem: Worker Not Processing Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# 1. Check Redis connection\nredis-cli ping\n# Expected: PONG\n\n# 2. Check stream exists\nredis-cli XINFO STREAM areas:events\n# Should show stream information\n\n# 3. Check consumer group\nredis-cli XINFO GROUPS areas:events\n# Should show "area-processors" group\n\n# 4. Check application logs\ntail -f logs/application.log | grep -i worker\n'})}),"\n",(0,i.jsx)(n.h3,{id:"problem-high-failure-rate",children:"Problem: High Failure Rate"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 1. Check execution statistics\ncurl http://localhost:8080/api/worker/statistics\n\n# 2. Look for error patterns in database\npsql -d area -c \"\nSELECT error->>'exception' as error_type, COUNT(*) \nFROM a_executions \nWHERE status = 'FAILED' \n  AND created_at > NOW() - INTERVAL '1 hour'\nGROUP BY error->>'exception'\nORDER BY count DESC;\n\"\n\n# 3. Check recent failures\npsql -d area -c \"\nSELECT id, error->>'message' as error_message, created_at \nFROM a_executions \nWHERE status = 'FAILED' \nORDER BY created_at DESC \nLIMIT 10;\n\"\n"})}),"\n",(0,i.jsx)(n.h3,{id:"problem-memory-issues",children:"Problem: Memory Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 1. Check JVM memory usage\ncurl http://localhost:8080/actuator/metrics/jvm.memory.used\n\n# 2. Check thread pool usage\ncurl http://localhost:8080/actuator/metrics/executor.active\n\n# 3. Monitor Redis memory\nredis-cli INFO memory\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-common-patterns",children:"\ud83d\udcda Common Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"pattern-1-batch-processing",children:"Pattern 1: Batch Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Process multiple executions at once\n@Scheduled(fixedDelay = 5000)\npublic void processBatch() {\n    List<Execution> executions = executionService.getQueuedExecutions();\n    executions.parallelStream()\n        .forEach(this::processExecution);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pattern-2-priority-processing",children:"Pattern 2: Priority Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Process high-priority executions first\npublic void processWithPriority() {\n    // Get executions sorted by priority\n    List<Execution> executions = executionService.getQueuedExecutionsByPriority();\n    \n    for (Execution execution : executions) {\n        if (shouldProcessImmediately(execution)) {\n            processExecution(execution);\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pattern-3-graceful-shutdown",children:"Pattern 3: Graceful Shutdown"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@PreDestroy\npublic void shutdown() {\n    log.info("Shutting down worker gracefully...");\n    running = false;\n    \n    // Wait for current executions to complete\n    awaitTermination(Duration.ofSeconds(30));\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-related-documentation",children:"\ud83d\udd17 Related Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./api-documentation.md",children:"API Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./database-schema.md",children:"Database Schema"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./redis-configuration.md",children:"Redis Configuration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./testing-guide.md",children:"Testing Guide"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./deployment.md",children:"Deployment Guide"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["For more detailed information, see the ",(0,i.jsx)(n.a,{href:"/AREA_Back/docs/worker/area-reaction-worker",children:"complete documentation"}),"."]})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);