"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[8755],{7648:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guides/database-migrations-guide","title":"Database Migrations Guide","description":"Table of Contents","source":"@site/docs/guides/database-migrations-guide.md","sourceDirName":"guides","slug":"/guides/database-migrations-guide","permalink":"/docs/guides/database-migrations-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/guides/database-migrations-guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Data Migration Guide","permalink":"/docs/guides/data-migration-guide"},"next":{"title":"Docker Setup Guide","permalink":"/docs/guides/docker-explanation"}}');var a=i(4848),r=i(8453);const t={},l="Database Migrations Guide",d={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Flyway Basics",id:"flyway-basics",level:2},{value:"How Flyway Works",id:"how-flyway-works",level:3},{value:"Metadata Table",id:"metadata-table",level:3},{value:"Migration Structure",id:"migration-structure",level:2},{value:"Directory Layout",id:"directory-layout",level:3},{value:"Migration File Structure",id:"migration-file-structure",level:3},{value:"Creating Migrations",id:"creating-migrations",level:2},{value:"Step-by-Step Process",id:"step-by-step-process",level:3},{value:"1. Determine Version Number",id:"1-determine-version-number",level:4},{value:"2. Create Migration File",id:"2-create-migration-file",level:4},{value:"3. Write Migration SQL",id:"3-write-migration-sql",level:4},{value:"4. Test Migration Locally",id:"4-test-migration-locally",level:4},{value:"5. Verify Migration",id:"5-verify-migration",level:4},{value:"Naming Conventions",id:"naming-conventions",level:2},{value:"Version-Based Migrations (Recommended)",id:"version-based-migrations-recommended",level:3},{value:"Repeatable Migrations (Advanced)",id:"repeatable-migrations-advanced",level:3},{value:"Migration Types",id:"migration-types",level:2},{value:"1. Schema Migrations",id:"1-schema-migrations",level:3},{value:"2. Data Migrations",id:"2-data-migrations",level:3},{value:"3. Index Migrations",id:"3-index-migrations",level:3},{value:"4. Constraint Migrations",id:"4-constraint-migrations",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Idempotent Migrations",id:"1-idempotent-migrations",level:3},{value:"2. Use Transactions",id:"2-use-transactions",level:3},{value:"3. Handle Existing Data",id:"3-handle-existing-data",level:3},{value:"4. Use CTEs for Complex Migrations",id:"4-use-ctes-for-complex-migrations",level:3},{value:"5. Document Breaking Changes",id:"5-document-breaking-changes",level:3},{value:"6. Test with Production Data",id:"6-test-with-production-data",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Pattern 1: Adding a New Service",id:"pattern-1-adding-a-new-service",level:3},{value:"Pattern 2: Modifying Column Type",id:"pattern-2-modifying-column-type",level:3},{value:"Pattern 3: Data Backfill",id:"pattern-3-data-backfill",level:3},{value:"Pattern 4: Renaming Column",id:"pattern-4-renaming-column",level:3},{value:"Rollback Strategy",id:"rollback-strategy",level:2},{value:"Flyway Limitations",id:"flyway-limitations",level:3},{value:"Manual Rollback",id:"manual-rollback",level:3},{value:"Best Rollback Practices",id:"best-rollback-practices",level:3},{value:"Testing Migrations",id:"testing-migrations",level:2},{value:"Local Testing",id:"local-testing",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"1. Checksum Mismatch",id:"1-checksum-mismatch",level:4},{value:"2. Migration Failed",id:"2-migration-failed",level:4},{value:"3. Out of Order Migration",id:"3-out-of-order-migration",level:4},{value:"Useful Flyway Commands",id:"useful-flyway-commands",level:3},{value:"Resources",id:"resources",level:2},{value:"Checklist for New Migrations",id:"checklist-for-new-migrations",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"database-migrations-guide",children:"Database Migrations Guide"})}),"\n",(0,a.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#flyway-basics",children:"Flyway Basics"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#migration-structure",children:"Migration Structure"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#creating-migrations",children:"Creating Migrations"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#naming-conventions",children:"Naming Conventions"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#migration-types",children:"Migration Types"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#common-patterns",children:"Common Patterns"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#rollback-strategy",children:"Rollback Strategy"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#testing-migrations",children:"Testing Migrations"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["The AREA Backend uses ",(0,a.jsx)(n.strong,{children:"Flyway"})," for database schema versioning and migration management. Flyway ensures that all database changes are tracked, versioned, and applied consistently across all environments."]}),"\n",(0,a.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Version Control"}),": All schema changes are versioned and tracked"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Repeatability"}),": Migrations can be applied consistently across environments"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Safety"}),": Checksums prevent accidental modifications"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Audit Trail"}),": Complete history of database changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Team Collaboration"}),": Multiple developers can work on schema changes"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["Flyway is configured in ",(0,a.jsx)(n.code,{children:"application.yml"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"spring:\n  flyway:\n    enabled: true\n    baseline-on-migrate: true\n    locations: classpath:db/migration\n    schemas: area\n    table: flyway_schema_history\n    validate-on-migrate: true\n"})}),"\n",(0,a.jsx)(n.h2,{id:"flyway-basics",children:"Flyway Basics"}),"\n",(0,a.jsx)(n.h3,{id:"how-flyway-works",children:"How Flyway Works"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Initialization"}),": Flyway creates a metadata table (",(0,a.jsx)(n.code,{children:"flyway_schema_history"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Discovery"}),": Scans ",(0,a.jsx)(n.code,{children:"src/main/resources/db/migration"})," for migration files"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Validation"}),": Checks checksums of applied migrations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Execution"}),": Applies pending migrations in order"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Recording"}),": Records successful migrations in metadata table"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"metadata-table",children:"Metadata Table"}),"\n",(0,a.jsxs)(n.p,{children:["Flyway tracks migrations in the ",(0,a.jsx)(n.code,{children:"flyway_schema_history"})," table:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM area.flyway_schema_history;\n"})}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Column"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"installed_rank"})}),(0,a.jsx)(n.td,{children:"Order of execution"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"version"})}),(0,a.jsx)(n.td,{children:"Migration version"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"description"})}),(0,a.jsx)(n.td,{children:"Migration description"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"type"})}),(0,a.jsx)(n.td,{children:"Migration type (SQL, JAVA)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"script"})}),(0,a.jsx)(n.td,{children:"Migration file name"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"checksum"})}),(0,a.jsx)(n.td,{children:"File checksum"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"installed_by"})}),(0,a.jsx)(n.td,{children:"Database user"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"installed_on"})}),(0,a.jsx)(n.td,{children:"Execution timestamp"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"execution_time"})}),(0,a.jsx)(n.td,{children:"Execution duration (ms)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"success"})}),(0,a.jsx)(n.td,{children:"Success status"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"migration-structure",children:"Migration Structure"}),"\n",(0,a.jsx)(n.h3,{id:"directory-layout",children:"Directory Layout"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"src/main/resources/db/migration/\n\u251c\u2500\u2500 V1__Initial_schema.sql\n\u251c\u2500\u2500 V2__Fix_action_definition_description_column.sql\n\u251c\u2500\u2500 V3__Change_all_enum_columns_to_varchar.sql\n\u251c\u2500\u2500 V4__Fix_execution_area_trigger.sql\n\u251c\u2500\u2500 V5__Add_github_service_and_actions.sql\n\u251c\u2500\u2500 V6__Add_jsonb_actions_reactions_to_areas.sql\n\u251c\u2500\u2500 V7__Add_github_personal_token.sql\n\u251c\u2500\u2500 V8__Add_link_type_to_action_links.sql\n\u251c\u2500\u2500 V9__Fix_action_links_trigger_schema.sql\n\u251c\u2500\u2500 V10__Add_firstname_lastname_to_users.sql\n\u251c\u2500\u2500 V11__Add_google_service_and_actions.sql\n\u251c\u2500\u2500 V12__Add_discord_service_and_actions.sql (planned)\n\u2514\u2500\u2500 V13__Add_slack_service_and_actions.sql (planned)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"migration-file-structure",children:"Migration File Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- ============================================\n-- Description: Brief description of changes\n-- Author: Your Name\n-- Date: 2024-01-15\n-- ============================================\n\n-- Clear comments explaining the purpose\nCREATE TABLE IF NOT EXISTS area.example_table (\n    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n    name text NOT NULL,\n    created_at timestamptz NOT NULL DEFAULT now()\n);\n\n-- Add indexes\nCREATE INDEX IF NOT EXISTS idx_example_table_name \n    ON area.example_table(name);\n\n-- Insert initial data if needed\nINSERT INTO area.example_table (name) \nVALUES ('Example') \nON CONFLICT (name) DO NOTHING;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"creating-migrations",children:"Creating Migrations"}),"\n",(0,a.jsx)(n.h3,{id:"step-by-step-process",children:"Step-by-Step Process"}),"\n",(0,a.jsx)(n.h4,{id:"1-determine-version-number",children:"1. Determine Version Number"}),"\n",(0,a.jsx)(n.p,{children:"Check the latest migration version:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"ls -1 src/main/resources/db/migration/ | sort -V | tail -1\n"})}),"\n",(0,a.jsx)(n.p,{children:"Increment the version number (e.g., V11 \u2192 V12)."}),"\n",(0,a.jsx)(n.h4,{id:"2-create-migration-file",children:"2. Create Migration File"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# File naming format: V{version}__{description}.sql\ntouch src/main/resources/db/migration/V12__Add_discord_service_and_actions.sql\n"})}),"\n",(0,a.jsx)(n.h4,{id:"3-write-migration-sql",children:"3. Write Migration SQL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'-- ============================================\n-- AREA - Discord Service and Actions\n-- Add Discord service and action definitions\n-- ============================================\n\n-- Add Discord service\nINSERT INTO area.a_services (key, name, auth, is_active, docs_url, icon_light_url, icon_dark_url) \nVALUES (\n    \'discord\',\n    \'Discord\',\n    \'OAUTH2\',\n    true,\n    \'https://discord.com/developers/docs\',\n    \'https://cdn.simpleicons.org/discord/5865F2\',\n    \'https://cdn.simpleicons.org/discord/FFFFFF\'\n)\nON CONFLICT (key) DO UPDATE SET\n    name = EXCLUDED.name,\n    auth = EXCLUDED.auth,\n    is_active = EXCLUDED.is_active,\n    docs_url = EXCLUDED.docs_url,\n    icon_light_url = EXCLUDED.icon_light_url,\n    icon_dark_url = EXCLUDED.icon_dark_url;\n\n-- Get Discord service ID for action definitions\nWITH discord_service AS (\n    SELECT id FROM area.a_services WHERE key = \'discord\'\n)\n\n-- Insert Discord Actions\nINSERT INTO area.a_action_definitions (\n    service_id, key, name, description,\n    is_event_capable, is_executable, version,\n    input_schema, output_schema\n)\nSELECT\n    ds.id,\n    \'send_message\',\n    \'Send Message\',\n    \'Send a message to a Discord channel\',\n    false,\n    true,\n    1,\n    \'{\n        "type": "object",\n        "properties": {\n            "channel_id": {"type": "string"},\n            "content": {"type": "string"}\n        },\n        "required": ["channel_id", "content"]\n    }\'::jsonb,\n    \'{\n        "type": "object",\n        "properties": {\n            "message_id": {"type": "string"}\n        }\n    }\'::jsonb\nFROM discord_service ds\nON CONFLICT (service_id, key) DO NOTHING;\n'})}),"\n",(0,a.jsx)(n.h4,{id:"4-test-migration-locally",children:"4. Test Migration Locally"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Start database\ndocker-compose up -d postgres\n\n# Run application (Flyway will execute migrations)\n./gradlew bootRun\n\n# Or run Flyway directly\n./gradlew flywayMigrate\n"})}),"\n",(0,a.jsx)(n.h4,{id:"5-verify-migration",children:"5. Verify Migration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Check migration was applied\nSELECT * FROM area.flyway_schema_history \nWHERE version = '12' \nORDER BY installed_rank DESC \nLIMIT 1;\n\n-- Verify data\nSELECT * FROM area.a_services WHERE key = 'discord';\nSELECT * FROM area.a_action_definitions WHERE service_id IN (\n    SELECT id FROM area.a_services WHERE key = 'discord'\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,a.jsx)(n.h3,{id:"version-based-migrations-recommended",children:"Version-Based Migrations (Recommended)"}),"\n",(0,a.jsxs)(n.p,{children:["Format: ",(0,a.jsx)(n.code,{children:"V{version}__{description}.sql"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Rules"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Version must be numeric (e.g., V1, V2, V10, V100)"}),"\n",(0,a.jsxs)(n.li,{children:["Use double underscore ",(0,a.jsx)(n.code,{children:"__"})," to separate version from description"]}),"\n",(0,a.jsx)(n.li,{children:"Description uses snake_case with underscores"}),"\n",(0,a.jsx)(n.li,{children:"No spaces in filename"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u2705 V1__Initial_schema.sql\n\u2705 V12__Add_discord_service_and_actions.sql\n\u2705 V100__Major_refactoring.sql\n\n\u274c V1.2__Invalid.sql                    # No dots in version\n\u274c V12_Single_underscore.sql            # Need double underscore\n\u274c V12__Add Discord Service.sql         # No spaces\n\u274c v12__lowercase_version.sql           # Version must be uppercase V\n"})}),"\n",(0,a.jsx)(n.h3,{id:"repeatable-migrations-advanced",children:"Repeatable Migrations (Advanced)"}),"\n",(0,a.jsxs)(n.p,{children:["Format: ",(0,a.jsx)(n.code,{children:"R__{description}.sql"})]}),"\n",(0,a.jsx)(n.p,{children:"Used for views, procedures, functions that can be re-applied:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"R__Create_user_statistics_view.sql\nR__Update_aggregation_functions.sql\n"})}),"\n",(0,a.jsx)(n.h2,{id:"migration-types",children:"Migration Types"}),"\n",(0,a.jsx)(n.h3,{id:"1-schema-migrations",children:"1. Schema Migrations"}),"\n",(0,a.jsx)(n.p,{children:"Create or modify database structure:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Create table\nCREATE TABLE IF NOT EXISTS area.new_table (\n    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n    name text NOT NULL\n);\n\n-- Add column\nALTER TABLE area.existing_table \nADD COLUMN IF NOT EXISTS new_column text;\n\n-- Modify column\nALTER TABLE area.existing_table \nALTER COLUMN existing_column TYPE varchar(255);\n\n-- Drop column (use carefully!)\nALTER TABLE area.existing_table \nDROP COLUMN IF EXISTS old_column;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-data-migrations",children:"2. Data Migrations"}),"\n",(0,a.jsx)(n.p,{children:"Insert, update, or transform data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Insert reference data\nINSERT INTO area.a_services (key, name, auth, is_active)\nVALUES ('new_service', 'New Service', 'OAUTH2', true)\nON CONFLICT (key) DO NOTHING;\n\n-- Update existing data\nUPDATE area.a_users \nSET is_active = true \nWHERE is_active IS NULL;\n\n-- Transform data\nUPDATE area.a_action_definitions \nSET input_schema = input_schema || '{\"additionalProperties\": false}'::jsonb\nWHERE input_schema IS NOT NULL;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-index-migrations",children:"3. Index Migrations"}),"\n",(0,a.jsx)(n.p,{children:"Add or modify indexes for performance:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Create index\nCREATE INDEX IF NOT EXISTS idx_users_email \nON area.a_users(email);\n\n-- Create composite index\nCREATE INDEX IF NOT EXISTS idx_service_accounts_user_service \nON area.a_service_accounts(user_id, service_id);\n\n-- Create partial index\nCREATE INDEX IF NOT EXISTS idx_active_areas \nON area.a_areas(user_id) \nWHERE is_active = true;\n\n-- Drop index\nDROP INDEX IF EXISTS area.idx_old_index;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-constraint-migrations",children:"4. Constraint Migrations"}),"\n",(0,a.jsx)(n.p,{children:"Add or modify constraints:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Add foreign key\nALTER TABLE area.child_table \nADD CONSTRAINT fk_child_parent \nFOREIGN KEY (parent_id) \nREFERENCES area.parent_table(id) \nON DELETE CASCADE;\n\n-- Add unique constraint\nALTER TABLE area.a_services \nADD CONSTRAINT uq_services_key \nUNIQUE (key);\n\n-- Add check constraint\nALTER TABLE area.a_users \nADD CONSTRAINT chk_email_format \nCHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}$');\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"1-idempotent-migrations",children:"1. Idempotent Migrations"}),"\n",(0,a.jsx)(n.p,{children:"Always write migrations that can be re-run safely:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- \u2705 Good: Idempotent\nCREATE TABLE IF NOT EXISTS area.example (...);\nALTER TABLE area.example ADD COLUMN IF NOT EXISTS col text;\nINSERT INTO area.example VALUES (...) ON CONFLICT DO NOTHING;\n\n-- \u274c Bad: Not idempotent\nCREATE TABLE area.example (...);  -- Fails if table exists\nALTER TABLE area.example ADD COLUMN col text;  -- Fails if column exists\nINSERT INTO area.example VALUES (...);  -- May create duplicates\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-use-transactions",children:"2. Use Transactions"}),"\n",(0,a.jsx)(n.p,{children:"Most migrations run in a transaction by default:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Explicit transaction (if needed)\nBEGIN;\n\n-- Your migration statements\nCREATE TABLE ...;\nINSERT INTO ...;\n\nCOMMIT;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-handle-existing-data",children:"3. Handle Existing Data"}),"\n",(0,a.jsx)(n.p,{children:"When modifying schema, handle existing data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Add NOT NULL column with default\nALTER TABLE area.a_users \nADD COLUMN email_verified boolean DEFAULT false NOT NULL;\n\n-- Or in two steps\nALTER TABLE area.a_users ADD COLUMN email_verified boolean;\nUPDATE area.a_users SET email_verified = false WHERE email_verified IS NULL;\nALTER TABLE area.a_users ALTER COLUMN email_verified SET NOT NULL;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-use-ctes-for-complex-migrations",children:"4. Use CTEs for Complex Migrations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Use CTE for readability\nWITH service AS (\n    SELECT id FROM area.a_services WHERE key = 'github'\n)\nINSERT INTO area.a_action_definitions (service_id, key, name, ...)\nSELECT s.id, 'action_key', 'Action Name', ...\nFROM service s;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-document-breaking-changes",children:"5. Document Breaking Changes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- ============================================\n-- BREAKING CHANGE: This migration drops the old_table\n-- Ensure all applications are updated before deployment\n-- ============================================\nDROP TABLE IF EXISTS area.old_table;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"6-test-with-production-data",children:"6. Test with Production Data"}),"\n",(0,a.jsx)(n.p,{children:"Before deploying, test migrations with production-like data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create backup\npg_dump -h localhost -U area_user area_db > backup.sql\n\n# Test migration\n./gradlew flywayMigrate\n\n# Verify results\npsql -h localhost -U area_user area_db\n\n# If issues, restore backup\npsql -h localhost -U area_user area_db < backup.sql\n"})}),"\n",(0,a.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"pattern-1-adding-a-new-service",children:"Pattern 1: Adding a New Service"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- 1. Insert service\nINSERT INTO area.a_services (key, name, auth, is_active, docs_url, icon_light_url, icon_dark_url)\nVALUES ('service_key', 'Service Name', 'OAUTH2', true, 'https://docs.url', 'icon_url', 'icon_url')\nON CONFLICT (key) DO UPDATE SET\n    name = EXCLUDED.name,\n    is_active = EXCLUDED.is_active;\n\n-- 2. Add action definitions\nWITH service AS (\n    SELECT id FROM area.a_services WHERE key = 'service_key'\n)\nINSERT INTO area.a_action_definitions (service_id, key, name, description, ...)\nSELECT s.id, 'action_key', 'Action Name', 'Description', ...\nFROM service s\nON CONFLICT (service_id, key) DO NOTHING;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pattern-2-modifying-column-type",children:"Pattern 2: Modifying Column Type"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Safe column type change\nALTER TABLE area.a_users \nALTER COLUMN age TYPE integer USING age::integer;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pattern-3-data-backfill",children:"Pattern 3: Data Backfill"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Backfill missing data\nUPDATE area.a_users u\nSET avatar_url = 'https://default-avatar.png'\nWHERE avatar_url IS NULL;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pattern-4-renaming-column",children:"Pattern 4: Renaming Column"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Rename column\nALTER TABLE area.a_users \nRENAME COLUMN old_name TO new_name;\n\n-- Update dependent indexes\nDROP INDEX IF EXISTS idx_old_name;\nCREATE INDEX idx_new_name ON area.a_users(new_name);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"rollback-strategy",children:"Rollback Strategy"}),"\n",(0,a.jsx)(n.h3,{id:"flyway-limitations",children:"Flyway Limitations"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Important"}),": Flyway Community Edition does not support automatic rollback."]}),"\n",(0,a.jsx)(n.h3,{id:"manual-rollback",children:"Manual Rollback"}),"\n",(0,a.jsx)(n.p,{children:'Create a separate "undo" migration:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- V12__Add_discord_service.sql (forward)\nINSERT INTO area.a_services VALUES (...);\n\n-- V13__Rollback_discord_service.sql (rollback)\nDELETE FROM area.a_services WHERE key = 'discord';\n"})}),"\n",(0,a.jsx)(n.h3,{id:"best-rollback-practices",children:"Best Rollback Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test Migrations"}),": Always test in dev/staging first"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Backup Database"}),": Create backup before major migrations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Small Changes"}),": Make incremental, reversible changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Feature Flags"}),": Use application-level flags for new features"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Blue-Green Deployment"}),": Deploy to separate environment first"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"testing-migrations",children:"Testing Migrations"}),"\n",(0,a.jsx)(n.h3,{id:"local-testing",children:"Local Testing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# 1. Clean database\n./gradlew flywayClean  # \u26a0\ufe0f Destroys all data\n\n# 2. Run migrations\n./gradlew flywayMigrate\n\n# 3. Verify\n./gradlew bootRun\n"})}),"\n",(0,a.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@Testcontainers\nclass MigrationTest {\n    \n    @Container\n    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15")\n        .withDatabaseName("test_db")\n        .withUsername("test_user")\n        .withPassword("test_pass");\n    \n    @Autowired\n    private DataSource dataSource;\n    \n    @Test\n    void testMigrationsApplySuccessfully() {\n        Flyway flyway = Flyway.configure()\n            .dataSource(dataSource)\n            .schemas("area")\n            .locations("classpath:db/migration")\n            .load();\n        \n        MigrateResult result = flyway.migrate();\n        assertTrue(result.success);\n        assertTrue(result.migrationsExecuted >= 11);\n    }\n    \n    @Test\n    void testDiscordServiceExists() {\n        JdbcTemplate jdbc = new JdbcTemplate(dataSource);\n        Integer count = jdbc.queryForObject(\n            "SELECT COUNT(*) FROM area.a_services WHERE key = \'discord\'",\n            Integer.class\n        );\n        assertEquals(1, count);\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,a.jsx)(n.h4,{id:"1-checksum-mismatch",children:"1. Checksum Mismatch"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Error"}),": ",(0,a.jsx)(n.code,{children:"Migration checksum mismatch"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Cause"}),": Migration file was modified after execution"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Option 1: Repair (if change was unintentional)\n./gradlew flywayRepair\n\n# Option 2: Create new migration (if change was intentional)\n# Don't modify existing migrations!\n"})}),"\n",(0,a.jsx)(n.h4,{id:"2-migration-failed",children:"2. Migration Failed"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Error"}),": ",(0,a.jsx)(n.code,{children:"Migration V12__... failed"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# 1. Check error in logs\ntail -f logs/application.log\n\n# 2. Fix the SQL in the migration file\n\n# 3. Delete failed migration record\nDELETE FROM area.flyway_schema_history WHERE version = '12';\n\n# 4. Re-run migration\n./gradlew flywayMigrate\n"})}),"\n",(0,a.jsx)(n.h4,{id:"3-out-of-order-migration",children:"3. Out of Order Migration"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Error"}),": ",(0,a.jsx)(n.code,{children:"Detected resolved migration not applied to database"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Allow out-of-order migrations (not recommended for production)\nspring:\n  flyway:\n    out-of-order: true\n"})}),"\n",(0,a.jsx)(n.h3,{id:"useful-flyway-commands",children:"Useful Flyway Commands"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# View migration status\n./gradlew flywayInfo\n\n# Validate migrations\n./gradlew flywayValidate\n\n# Repair metadata table\n./gradlew flywayRepair\n\n# Clean database (\u26a0\ufe0f DESTRUCTIVE)\n./gradlew flywayClean\n\n# Run migrations\n./gradlew flywayMigrate\n\n# Generate baseline\n./gradlew flywayBaseline\n"})}),"\n",(0,a.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Flyway Documentation"}),": ",(0,a.jsx)(n.a,{href:"https://flywaydb.org/documentation/",children:"https://flywaydb.org/documentation/"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Migration Best Practices"}),": ",(0,a.jsx)(n.a,{href:"https://flywaydb.org/documentation/concepts/migrations",children:"https://flywaydb.org/documentation/concepts/migrations"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"PostgreSQL Documentation"}),": ",(0,a.jsx)(n.a,{href:"https://www.postgresql.org/docs/",children:"https://www.postgresql.org/docs/"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"AREA Database Schema"}),": ",(0,a.jsx)(n.code,{children:"docs/technical/05-database-schema.md"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"checklist-for-new-migrations",children:"Checklist for New Migrations"}),"\n",(0,a.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Increment version number correctly"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Use descriptive migration name"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add header comment with description"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Write idempotent SQL"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Handle existing data appropriately"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Use ",(0,a.jsx)(n.code,{children:"IF NOT EXISTS"})," / ",(0,a.jsx)(n.code,{children:"ON CONFLICT"})," clauses"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test migration locally"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Verify migration in ",(0,a.jsx)(n.code,{children:"flyway_schema_history"})]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Check data integrity after migration"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Document breaking changes if any"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Commit migration file to version control"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test in staging environment before production"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var s=i(6540);const a={},r=s.createContext(a);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);