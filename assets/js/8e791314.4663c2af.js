"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[941],{4052:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"guides/unit-testing-guide","title":"Unit Testing Guide","description":"This guide explains how to implement unit tests in the AREA Backend project using the existing testing setup.","source":"@site/docs/guides/unit-testing-guide.md","sourceDirName":"guides","slug":"/guides/unit-testing-guide","permalink":"/docs/guides/unit-testing-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/guides/unit-testing-guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Services Catalog API with Redis Caching","permalink":"/docs/guides/service-cache-implementation-guide"},"next":{"title":"Email Verification and Password Reset Guide","permalink":"/docs/guides/user-email-verification-guide"}}');var i=s(4848),r=s(8453);const a={},o="Unit Testing Guide",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Testing Framework",id:"testing-framework",level:2},{value:"Core Testing Libraries",id:"core-testing-libraries",level:3},{value:"Additional Testing Dependencies",id:"additional-testing-dependencies",level:3},{value:"Project Test Structure",id:"project-test-structure",level:2},{value:"Types of Tests",id:"types-of-tests",level:2},{value:"1. Unit Tests",id:"1-unit-tests",level:3},{value:"2. Web Layer Tests",id:"2-web-layer-tests",level:3},{value:"3. Repository Tests",id:"3-repository-tests",level:3},{value:"4. Integration Tests",id:"4-integration-tests",level:3},{value:"Setting Up Tests",id:"setting-up-tests",level:2},{value:"1. Test Class Structure",id:"1-test-class-structure",level:3},{value:"2. Common Annotations",id:"2-common-annotations",level:3},{value:"Writing Unit Tests",id:"writing-unit-tests",level:2},{value:"1. Test Method Naming",id:"1-test-method-naming",level:3},{value:"2. Test Structure (Given-When-Then)",id:"2-test-structure-given-when-then",level:3},{value:"3. Mocking Dependencies",id:"3-mocking-dependencies",level:3},{value:"Integration Tests",id:"integration-tests",level:2},{value:"Testcontainers Configuration",id:"testcontainers-configuration",level:3},{value:"Test Configuration",id:"test-configuration",level:2},{value:"Security Configuration for Tests",id:"security-configuration-for-tests",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Test Independence",id:"1-test-independence",level:3},{value:"2. Test Data Management",id:"2-test-data-management",level:3},{value:"3. Assertion Guidelines",id:"3-assertion-guidelines",level:3},{value:"4. Exception Testing",id:"4-exception-testing",level:3},{value:"5. Parameterized Tests",id:"5-parameterized-tests",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"Command Line",id:"command-line",level:3},{value:"IDE Integration",id:"ide-integration",level:3},{value:"Coverage Reports",id:"coverage-reports",level:2},{value:"Generating Coverage Reports",id:"generating-coverage-reports",level:3},{value:"Viewing Reports",id:"viewing-reports",level:3},{value:"Coverage Requirements",id:"coverage-requirements",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Tips",id:"debug-tips",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"unit-testing-guide",children:"Unit Testing Guide"})}),"\n",(0,i.jsx)(n.p,{children:"This guide explains how to implement unit tests in the AREA Backend project using the existing testing setup."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#testing-framework",children:"Testing Framework"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#project-test-structure",children:"Project Test Structure"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#types-of-tests",children:"Types of Tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#setting-up-tests",children:"Setting Up Tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#writing-unit-tests",children:"Writing Unit Tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#integration-tests",children:"Integration Tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#test-configuration",children:"Test Configuration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#running-tests",children:"Running Tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#coverage-reports",children:"Coverage Reports"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The AREA Backend project uses a comprehensive testing setup with JUnit 5, Mockito, Spring Boot Test, and Testcontainers. The project maintains a test coverage target of 80%."}),"\n",(0,i.jsx)(n.h2,{id:"testing-framework",children:"Testing Framework"}),"\n",(0,i.jsx)(n.h3,{id:"core-testing-libraries",children:"Core Testing Libraries"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"JUnit 5"}),": Main testing framework"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mockito"}),": Mocking framework for isolating units under test"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring Boot Test"}),": Integration testing with Spring context"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testcontainers"}),": Real database testing with Docker containers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"H2"}),": In-memory database for unit tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hamcrest"}),": Assertion matchers"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"additional-testing-dependencies",children:"Additional Testing Dependencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:"testImplementation 'org.springframework.boot:spring-boot-starter-test'\ntestImplementation 'org.springframework.boot:spring-boot-testcontainers'\ntestImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'\ntestImplementation 'org.springframework.security:spring-security-test'\ntestImplementation 'org.testcontainers:junit-jupiter'\ntestImplementation 'org.testcontainers:postgresql'\ntestImplementation 'com.h2database:h2'\ntestImplementation 'org.mockito:mockito-core'\ntestImplementation 'org.mockito:mockito-junit-jupiter'\ntestImplementation 'org.hamcrest:hamcrest'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"project-test-structure",children:"Project Test Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"src/test/java/area/server/AREA_Back/\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 TestSecurityConfig.java          # Test security configuration\n\u251c\u2500\u2500 controller/                          # Controller layer tests\n\u2502   \u251c\u2500\u2500 AboutControllerTest.java\n\u2502   \u251c\u2500\u2500 AreaControllerTest.java\n\u2502   \u251c\u2500\u2500 ServiceControllerTest.java\n\u2502   \u2514\u2500\u2500 UserControllerTest.java\n\u251c\u2500\u2500 dto/                                # DTO tests\n\u2502   \u251c\u2500\u2500 AreaResponseTest.java\n\u2502   \u251c\u2500\u2500 CreateAreaRequestTest.java\n\u2502   \u2514\u2500\u2500 UserResponseTest.java\n\u251c\u2500\u2500 entity/                             # Entity tests\n\u2502   \u251c\u2500\u2500 AreaTest.java\n\u2502   \u251c\u2500\u2500 ServiceTest.java\n\u2502   \u2514\u2500\u2500 UserTest.java\n\u251c\u2500\u2500 repository/                         # Repository layer tests\n\u2502   \u251c\u2500\u2500 AreaRepositoryTest.java\n\u2502   \u2514\u2500\u2500 UserRepositoryTest.java\n\u251c\u2500\u2500 service/                           # Service layer tests\n\u251c\u2500\u2500 AllTestsSuite.java                 # Test suite runner\n\u251c\u2500\u2500 AreaBackApplicationTests.java      # Application context tests\n\u251c\u2500\u2500 TestcontainersConfiguration.java   # Testcontainers setup\n\u2514\u2500\u2500 TestAreaBackApplication.java       # Test application entry point\n"})}),"\n",(0,i.jsx)(n.h2,{id:"types-of-tests",children:"Types of Tests"}),"\n",(0,i.jsx)(n.h3,{id:"1-unit-tests",children:"1. Unit Tests"}),"\n",(0,i.jsx)(n.p,{children:"Test individual components in isolation using mocks."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Entity Unit Test"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass UserTest {\n\n    @Test\n    void testUserCreation() {\n        // Given\n        String email = "test@example.com";\n        String username = "testuser";\n        \n        // When\n        User user = new User();\n        user.setEmail(email);\n        user.setUsername(username);\n        \n        // Then\n        assertThat(user.getEmail()).isEqualTo(email);\n        assertThat(user.getUsername()).isEqualTo(username);\n        assertThat(user.getCreatedAt()).isNotNull();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-web-layer-tests",children:"2. Web Layer Tests"}),"\n",(0,i.jsxs)(n.p,{children:["Test controllers with mocked dependencies using ",(0,i.jsx)(n.code,{children:"@WebMvcTest"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Controller Test"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@WebMvcTest(UserController.class)\n@Import(TestSecurityConfig.class)\nclass UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockitoBean\n    private UserRepository userRepository;\n\n    @MockitoBean\n    private PasswordEncoder passwordEncoder;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Test\n    @WithMockUser\n    void shouldCreateUser() throws Exception {\n        // Given\n        CreateUserRequest request = new CreateUserRequest();\n        request.setEmail("test@example.com");\n        request.setUsername("testuser");\n        request.setPassword("password");\n\n        User savedUser = new User();\n        savedUser.setId(UUID.randomUUID());\n        savedUser.setEmail(request.getEmail());\n        savedUser.setUsername(request.getUsername());\n\n        when(passwordEncoder.encode(anyString())).thenReturn("encoded-password");\n        when(userRepository.save(any(User.class))).thenReturn(savedUser);\n\n        // When & Then\n        mockMvc.perform(post("/api/users")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(objectMapper.writeValueAsString(request)))\n                .andExpect(status().isCreated())\n                .andExpected(jsonPath("$.email").value("test@example.com"))\n                .andExpected(jsonPath("$.username").value("testuser"));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-repository-tests",children:"3. Repository Tests"}),"\n",(0,i.jsxs)(n.p,{children:["Test data access layer with ",(0,i.jsx)(n.code,{children:"@DataJpaTest"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Repository Test"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@DataJpaTest\nclass UserRepositoryTest {\n\n    @Autowired\n    private TestEntityManager entityManager;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    void shouldFindByEmail() {\n        // Given\n        User user = new User();\n        user.setEmail("test@example.com");\n        user.setUsername("testuser");\n        entityManager.persistAndFlush(user);\n\n        // When\n        Optional<User> found = userRepository.findByEmail("test@example.com");\n\n        // Then\n        assertThat(found).isPresent();\n        assertThat(found.get().getUsername()).isEqualTo("testuser");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-integration-tests",children:"4. Integration Tests"}),"\n",(0,i.jsxs)(n.p,{children:["Test complete application flow with ",(0,i.jsx)(n.code,{children:"@SpringBootTest"})," and Testcontainers."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Integration Test"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@Testcontainers\nclass UserIntegrationTest {\n\n    @Container\n    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15")\n            .withDatabaseName("test_area_db")\n            .withUsername("test_user")\n            .withPassword("test_password");\n\n    @Autowired\n    private TestRestTemplate restTemplate;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    void shouldCreateAndRetrieveUser() {\n        // Given\n        CreateUserRequest request = new CreateUserRequest();\n        request.setEmail("integration@example.com");\n        request.setUsername("integrationuser");\n        request.setPassword("password");\n\n        // When\n        ResponseEntity<UserResponse> createResponse = restTemplate\n                .postForEntity("/api/users", request, UserResponse.class);\n\n        // Then\n        assertThat(createResponse.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n        \n        UUID userId = createResponse.getBody().getId();\n        ResponseEntity<UserResponse> getResponse = restTemplate\n                .getForEntity("/api/users/" + userId, UserResponse.class);\n                \n        assertThat(getResponse.getStatusCode()).isEqualTo(HttpStatus.OK);\n        assertThat(getResponse.getBody().getEmail()).isEqualTo("integration@example.com");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-tests",children:"Setting Up Tests"}),"\n",(0,i.jsx)(n.h3,{id:"1-test-class-structure",children:"1. Test Class Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// For unit tests\n@ExtendWith(MockitoExtension.class)\nclass ServiceClassTest {\n    // Test implementation\n}\n\n// For web layer tests\n@WebMvcTest(ControllerClass.class)\n@Import(TestSecurityConfig.class)\nclass ControllerClassTest {\n    // Test implementation\n}\n\n// For repository tests\n@DataJpaTest\nclass RepositoryClassTest {\n    // Test implementation\n}\n\n// For integration tests\n@SpringBootTest\n@Testcontainers\nclass IntegrationTest {\n    // Test implementation\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-common-annotations",children:"2. Common Annotations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@Test"}),": Marks a test method"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@BeforeEach"}),": Setup before each test"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@AfterEach"}),": Cleanup after each test"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@MockitoBean"}),": Create mock beans in Spring context"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@Mock"}),": Create mock objects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@InjectMocks"}),": Inject mocks into tested object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@WithMockUser"}),": Security context for tests"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"writing-unit-tests",children:"Writing Unit Tests"}),"\n",(0,i.jsx)(n.h3,{id:"1-test-method-naming",children:"1. Test Method Naming"}),"\n",(0,i.jsx)(n.p,{children:"Use descriptive names following the pattern:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Test\nvoid should_ReturnExpectedResult_When_GivenSpecificCondition() {\n    // Test implementation\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-test-structure-given-when-then",children:"2. Test Structure (Given-When-Then)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Test\nvoid shouldCalculateUserAge() {\n    // Given - Set up test data\n    LocalDate birthDate = LocalDate.of(1990, 1, 1);\n    User user = new User();\n    user.setBirthDate(birthDate);\n    \n    // When - Execute the method under test\n    int age = user.calculateAge();\n    \n    // Then - Verify the results\n    assertThat(age).isEqualTo(34);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-mocking-dependencies",children:"3. Mocking Dependencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @Mock\n    private PasswordEncoder passwordEncoder;\n\n    @InjectMocks\n    private UserService userService;\n\n    @Test\n    void shouldCreateUser() {\n        // Given\n        CreateUserRequest request = new CreateUserRequest();\n        request.setEmail("test@example.com");\n        \n        when(passwordEncoder.encode(anyString())).thenReturn("encoded");\n        when(userRepository.save(any(User.class))).thenReturn(createMockUser());\n\n        // When\n        UserResponse response = userService.createUser(request);\n\n        // Then\n        assertThat(response).isNotNull();\n        verify(userRepository).save(any(User.class));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,i.jsx)(n.h3,{id:"testcontainers-configuration",children:"Testcontainers Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["The project includes ",(0,i.jsx)(n.code,{children:"TestcontainersConfiguration.java"})," for database integration tests:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@TestConfiguration(proxyBeanMethods = false)\npublic class TestcontainersConfiguration {\n\n    @Bean\n    @ServiceConnection\n    PostgreSQLContainer<?> postgresContainer() {\n        return new PostgreSQLContainer<>("postgres:15")\n                .withDatabaseName("test_area_db")\n                .withUsername("test_user")\n                .withPassword("test_password");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"security-configuration-for-tests",children:"Security Configuration for Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@TestConfiguration\n@EnableWebSecurity\npublic class TestSecurityConfig {\n\n    @Bean\n    @Primary\n    public SecurityFilterChain testSecurityFilterChain(HttpSecurity http) throws Exception {\n        return http\n                .csrf(csrf -> csrf.disable())\n                .authorizeHttpRequests(auth -> auth.anyRequest().permitAll())\n                .build();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-test-independence",children:"1. Test Independence"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Each test should be independent and not rely on other tests"}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"@DirtiesContext"})," when tests modify shared state"]}),"\n",(0,i.jsxs)(n.li,{children:["Clean up resources in ",(0,i.jsx)(n.code,{children:"@AfterEach"})," methods"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-test-data-management",children:"2. Test Data Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@BeforeEach\nvoid setUp() {\n    // Create fresh test data for each test\n    testUser = createTestUser();\n}\n\n@AfterEach\nvoid tearDown() {\n    // Clean up if necessary\n    userRepository.deleteAll();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-assertion-guidelines",children:"3. Assertion Guidelines"}),"\n",(0,i.jsx)(n.p,{children:"Use AssertJ for fluent assertions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Good\nassertThat(users)\n    .hasSize(3)\n    .extracting(User::getEmail)\n    .containsExactly("user1@test.com", "user2@test.com", "user3@test.com");\n\n// Avoid\nassertEquals(3, users.size());\nassertEquals("user1@test.com", users.get(0).getEmail());\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-exception-testing",children:"4. Exception Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\nvoid shouldThrowExceptionWhenUserNotFound() {\n    // Given\n    UUID nonExistentId = UUID.randomUUID();\n    when(userRepository.findById(nonExistentId)).thenReturn(Optional.empty());\n\n    // When & Then\n    assertThatThrownBy(() -> userService.getUserById(nonExistentId))\n            .isInstanceOf(UserNotFoundException.class)\n            .hasMessage("User not found with id: " + nonExistentId);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5-parameterized-tests",children:"5. Parameterized Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@ParameterizedTest\n@ValueSource(strings = {"", " ", "invalid-email", "@test.com"})\nvoid shouldRejectInvalidEmails(String email) {\n    // Given\n    CreateUserRequest request = new CreateUserRequest();\n    request.setEmail(email);\n\n    // When & Then\n    assertThatThrownBy(() -> userService.createUser(request))\n            .isInstanceOf(ValidationException.class);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(n.h3,{id:"command-line",children:"Command Line"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Run all tests\n./gradlew test\n\n# Run specific test class\n./gradlew test --tests UserControllerTest\n\n# Run tests with specific tags\n./gradlew test --tests "*Integration*"\n\n# Run tests with coverage\n./gradlew jacocoTestReport\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ide-integration",children:"IDE Integration"}),"\n",(0,i.jsx)(n.p,{children:"Most IDEs (IntelliJ IDEA, Eclipse, VS Code) provide built-in support for running JUnit tests with visual feedback."}),"\n",(0,i.jsx)(n.h2,{id:"coverage-reports",children:"Coverage Reports"}),"\n",(0,i.jsx)(n.h3,{id:"generating-coverage-reports",children:"Generating Coverage Reports"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"./gradlew jacocoTestReport\n"})}),"\n",(0,i.jsx)(n.h3,{id:"viewing-reports",children:"Viewing Reports"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTML Report"}),": ",(0,i.jsx)(n.code,{children:"build/jacocoHtml/index.html"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"XML Report"}),": ",(0,i.jsx)(n.code,{children:"build/reports/jacoco/test/jacocoTestReport.xml"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"coverage-requirements",children:"Coverage Requirements"}),"\n",(0,i.jsx)(n.p,{children:"The project enforces a minimum coverage of 80%:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:"jacocoTestCoverageVerification {\n    violationRules {\n        rule {\n            limit {\n                minimum = 0.80\n            }\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tests fail due to security context"}),": Add ",(0,i.jsx)(n.code,{children:"@WithMockUser"})," or configure test security"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database connection issues"}),": Ensure Testcontainers is properly configured"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mock not working"}),": Verify ",(0,i.jsx)(n.code,{children:"@MockitoBean"})," vs ",(0,i.jsx)(n.code,{children:"@Mock"})," usage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tests pass individually but fail in suite"}),": Check for test interdependencies"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"debug-tips",children:"Debug Tips"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"@Sql"})," to load test data from SQL files"]}),"\n",(0,i.jsx)(n.li,{children:"Add logging to understand test execution flow"}),"\n",(0,i.jsx)(n.li,{children:"Use breakpoints and debug mode in your IDE"}),"\n",(0,i.jsxs)(n.li,{children:["Check test execution order with ",(0,i.jsx)(n.code,{children:"@TestMethodOrder"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This guide should help you implement comprehensive unit tests following the project's established patterns and best practices."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);