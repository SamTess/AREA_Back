"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[5083],{7587:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"how_to_contribute","title":"How to Contribute to AREA Backend","description":"Table of Contents","source":"@site/docs/how_to_contribute.md","sourceDirName":".","slug":"/how_to_contribute","permalink":"/docs/how_to_contribute","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/how_to_contribute.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AREA Worker System - Architecture Deep Dive","permalink":"/docs/worker/worker-architecture"}}');var t=s(4848),r=s(8453);const a={},o="How to Contribute to AREA Backend",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Welcome Contributors",id:"welcome-contributors",level:2},{value:"What is AREA?",id:"what-is-area",level:3},{value:"Ways to Contribute",id:"ways-to-contribute",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"First Time Setup",id:"first-time-setup",level:3},{value:"1. Fork and Clone the Repository",id:"1-fork-and-clone-the-repository",level:4},{value:"2. Install Dependencies",id:"2-install-dependencies",level:4},{value:"3. Set Up Environment",id:"3-set-up-environment",level:4},{value:"4. Start Development Environment",id:"4-start-development-environment",level:4},{value:"5. Verify Setup",id:"5-verify-setup",level:4},{value:"Development Environment Setup",id:"development-environment-setup",level:2},{value:"IDE Configuration",id:"ide-configuration",level:3},{value:"IntelliJ IDEA Setup",id:"intellij-idea-setup",level:4},{value:"VS Code Setup",id:"vs-code-setup",level:4},{value:"Database Setup",id:"database-setup",level:3},{value:"Local PostgreSQL",id:"local-postgresql",level:4},{value:"Test Database",id:"test-database",level:4},{value:"Redis Setup",id:"redis-setup",level:3},{value:"Project Structure",id:"project-structure",level:2},{value:"Key Components",id:"key-components",level:3},{value:"Controllers (<code>controller/</code>)",id:"controllers-controller",level:4},{value:"Services (<code>service/</code>)",id:"services-service",level:4},{value:"Entities (<code>entity/</code>)",id:"entities-entity",level:4},{value:"Repositories (<code>repository/</code>)",id:"repositories-repository",level:4},{value:"Contribution Workflow",id:"contribution-workflow",level:2},{value:"Branch Strategy",id:"branch-strategy",level:3},{value:"Workflow Steps",id:"workflow-steps",level:3},{value:"1. Create a Feature Branch",id:"1-create-a-feature-branch",level:4},{value:"2. Make Your Changes",id:"2-make-your-changes",level:4},{value:"3. Commit Your Changes",id:"3-commit-your-changes",level:4},{value:"4. Push and Create Pull Request",id:"4-push-and-create-pull-request",level:4},{value:"Commit Message Format",id:"commit-message-format",level:3},{value:"Coding Standards",id:"coding-standards",level:2},{value:"Java Code Style",id:"java-code-style",level:3},{value:"General Principles",id:"general-principles",level:4},{value:"Code Formatting",id:"code-formatting",level:4},{value:"Documentation",id:"documentation",level:4},{value:"Spring Boot Best Practices",id:"spring-boot-best-practices",level:3},{value:"Dependency Injection",id:"dependency-injection",level:4},{value:"Exception Handling",id:"exception-handling",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Database Guidelines",id:"database-guidelines",level:3},{value:"Entity Design",id:"entity-design",level:4},{value:"Repository Design",id:"repository-design",level:4},{value:"API Design Guidelines",id:"api-design-guidelines",level:3},{value:"REST Controller Design",id:"rest-controller-design",level:4},{value:"DTO Design",id:"dto-design",level:4},{value:"Testing Guidelines",id:"testing-guidelines",level:2},{value:"Testing Strategy",id:"testing-strategy",level:3},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Service Layer Tests",id:"service-layer-tests",level:4},{value:"Repository Tests",id:"repository-tests",level:4},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Controller Integration Tests",id:"controller-integration-tests",level:4},{value:"Test Utilities",id:"test-utilities",level:3},{value:"Test Data Builders",id:"test-data-builders",level:4},{value:"Custom Test Annotations",id:"custom-test-annotations",level:4},{value:"Test Coverage",id:"test-coverage",level:3},{value:"Documentation Guidelines",id:"documentation-guidelines",level:2},{value:"Code Documentation",id:"code-documentation",level:3},{value:"JavaDoc Standards",id:"javadoc-standards",level:4},{value:"API Documentation",id:"api-documentation",level:3},{value:"OpenAPI Annotations",id:"openapi-annotations",level:4},{value:"README Updates",id:"readme-updates",level:3},{value:"Technical Documentation",id:"technical-documentation",level:3},{value:"Pull Request Process",id:"pull-request-process",level:2},{value:"Pull Request Template",id:"pull-request-template",level:3},{value:"Review Process",id:"review-process",level:3},{value:"Before Submitting",id:"before-submitting",level:4},{value:"Review Criteria",id:"review-criteria",level:4},{value:"Addressing Review Comments",id:"addressing-review-comments",level:4},{value:"Merge Requirements",id:"merge-requirements",level:3},{value:"Issue Guidelines",id:"issue-guidelines",level:2},{value:"Reporting Bugs",id:"reporting-bugs",level:3},{value:"Bug Report Template",id:"bug-report-template",level:4},{value:"Issue Labels",id:"issue-labels",level:3},{value:"Security Guidelines",id:"security-guidelines",level:2},{value:"Security Best Practices",id:"security-best-practices",level:3},{value:"Authentication &amp; Authorization",id:"authentication--authorization",level:4},{value:"Secure Coding",id:"secure-coding",level:4},{value:"Environment Variables",id:"environment-variables",level:4},{value:"Reporting Security Issues",id:"reporting-security-issues",level:3},{value:"Security Testing",id:"security-testing",level:3},{value:"Community Guidelines",id:"community-guidelines",level:2},{value:"Code of Conduct",id:"code-of-conduct",level:3},{value:"Our Standards",id:"our-standards",level:4},{value:"Unacceptable Behavior",id:"unacceptable-behavior",level:4},{value:"Communication Channels",id:"communication-channels",level:3},{value:"Getting Help",id:"getting-help",level:3},{value:"Recognition",id:"recognition",level:3},{value:"Maintainer Responsibilities",id:"maintainer-responsibilities",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Quick Start Checklist",id:"quick-start-checklist",level:3},{value:"Resources",id:"resources",level:3},{value:"Questions?",id:"questions",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"how-to-contribute-to-area-backend",children:"How to Contribute to AREA Backend"})}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#welcome-contributors",children:"Welcome Contributors"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#getting-started",children:"Getting Started"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#development-environment-setup",children:"Development Environment Setup"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#project-structure",children:"Project Structure"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#contribution-workflow",children:"Contribution Workflow"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#coding-standards",children:"Coding Standards"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#testing-guidelines",children:"Testing Guidelines"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#documentation-guidelines",children:"Documentation Guidelines"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#pull-request-process",children:"Pull Request Process"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#issue-guidelines",children:"Issue Guidelines"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#security-guidelines",children:"Security Guidelines"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#community-guidelines",children:"Community Guidelines"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"welcome-contributors",children:"Welcome Contributors"}),"\n",(0,t.jsx)(n.p,{children:"Thank you for your interest in contributing to the AREA (Action REAction) Backend project! AREA is an automation platform that allows users to create powerful workflows by connecting various services and applications. This document will guide you through the contribution process and help you become an effective contributor to our project."}),"\n",(0,t.jsx)(n.h3,{id:"what-is-area",children:"What is AREA?"}),"\n",(0,t.jsx)(n.p,{children:"AREA is a modern automation platform built with Spring Boot that enables users to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create automated workflows between different services (GitHub, Gmail, Weather, etc.)"}),"\n",(0,t.jsx)(n.li,{children:"Define custom actions and reactions"}),"\n",(0,t.jsx)(n.li,{children:"Manage complex automation scenarios"}),"\n",(0,t.jsx)(n.li,{children:"Integrate with OAuth2 providers for secure authentication"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"ways-to-contribute",children:"Ways to Contribute"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bug Reports"}),": Help us identify and fix issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Feature Requests"}),": Suggest new features and improvements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code Contributions"}),": Implement new features, fix bugs, or improve performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Improve or translate documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing"}),": Help with manual testing or write automated tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code Review"}),": Review pull requests from other contributors"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before you start contributing, make sure you have:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Java 21 or higher"})," installed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Docker and Docker Compose"})," for local development"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Git"})," for version control"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"An IDE"})," (IntelliJ IDEA, VS Code, or Eclipse recommended)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Basic knowledge"})," of Spring Boot, REST APIs, and Java"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"first-time-setup",children:"First Time Setup"}),"\n",(0,t.jsx)(n.h4,{id:"1-fork-and-clone-the-repository",children:"1. Fork and Clone the Repository"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Fork the repository on GitHub\n# Then clone your fork\ngit clone https://github.com/YOUR_USERNAME/AREA_Back.git\ncd AREA_Back\n\n# Add the original repository as upstream\ngit remote add upstream https://github.com/ORIGINAL_OWNER/AREA_Back.git\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-install-dependencies",children:"2. Install Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Make gradlew executable\nchmod +x gradlew\n\n# Download dependencies\n./gradlew dependencies\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-set-up-environment",children:"3. Set Up Environment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Copy environment template\ncp .env.template .env\n\n# Edit .env with your configuration\n# Minimum required variables:\nDATABASE_URL=jdbc:postgresql://localhost:5432/area_dev\nDATABASE_USERNAME=area_user\nDATABASE_PASSWORD=dev_password\nREDIS_HOST=localhost\nREDIS_PORT=6379\nJWT_ACCESS_SECRET=your_jwt_access_secret_32_characters\nJWT_REFRESH_SECRET=your_jwt_refresh_secret_32_characters\n"})}),"\n",(0,t.jsx)(n.h4,{id:"4-start-development-environment",children:"4. Start Development Environment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Start PostgreSQL and Redis with Docker\ndocker-compose -f Docker/docker-compose.dev.yml up -d postgres redis\n\n# Or start all services including the application\ndocker-compose -f Docker/docker-compose.dev.yml up -d\n"})}),"\n",(0,t.jsx)(n.h4,{id:"5-verify-setup",children:"5. Verify Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Build the project\n./gradlew build\n\n# Run tests\n./gradlew test\n\n# Start the application (if not using Docker)\n./gradlew bootRun\n"})}),"\n",(0,t.jsx)(n.p,{children:"The application should be accessible at:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"API"}),": ",(0,t.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Swagger UI"}),": ",(0,t.jsx)(n.a,{href:"http://localhost:8080/swagger-ui.html",children:"http://localhost:8080/swagger-ui.html"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Health Check"}),": ",(0,t.jsx)(n.a,{href:"http://localhost:8080/actuator/health",children:"http://localhost:8080/actuator/health"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"development-environment-setup",children:"Development Environment Setup"}),"\n",(0,t.jsx)(n.h3,{id:"ide-configuration",children:"IDE Configuration"}),"\n",(0,t.jsx)(n.h4,{id:"intellij-idea-setup",children:"IntelliJ IDEA Setup"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Import Project"}),": Open IntelliJ and import the project as a Gradle project"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Java Version"}),": Set Project SDK to Java 21"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code Style"}),": Import the code style configuration from ",(0,t.jsx)(n.code,{children:"config/intellij-code-style.xml"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Plugins"}),": Install recommended plugins:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Spring Boot"}),"\n",(0,t.jsx)(n.li,{children:"Docker"}),"\n",(0,t.jsx)(n.li,{children:"CheckStyle-IDEA"}),"\n",(0,t.jsx)(n.li,{children:"SonarLint"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"vs-code-setup",children:"VS Code Setup"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Extensions"}),": Install recommended extensions:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Extension Pack for Java"}),"\n",(0,t.jsx)(n.li,{children:"Spring Boot Extension Pack"}),"\n",(0,t.jsx)(n.li,{children:"Docker"}),"\n",(0,t.jsx)(n.li,{children:"REST Client"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Settings"}),": Configure workspace settings in ",(0,t.jsx)(n.code,{children:".vscode/settings.json"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"database-setup",children:"Database Setup"}),"\n",(0,t.jsx)(n.h4,{id:"local-postgresql",children:"Local PostgreSQL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create development database\ncreatedb area_dev\n\n# Run migrations\n./gradlew flywayMigrate\n\n# Check migration status\n./gradlew flywayInfo\n"})}),"\n",(0,t.jsx)(n.h4,{id:"test-database",children:"Test Database"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create test database\ncreatedb area_test\n\n# Set test environment\nexport SPRING_PROFILES_ACTIVE=test\n\n# Run tests with database\n./gradlew test\n"})}),"\n",(0,t.jsx)(n.h3,{id:"redis-setup",children:"Redis Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Start Redis locally\nredis-server\n\n# Or use Docker\ndocker run -d -p 6379:6379 redis:7-alpine\n"})}),"\n",(0,t.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,t.jsx)(n.p,{children:"Understanding the project structure will help you navigate and contribute effectively:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"AREA_Back/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/com/area/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 AreaBackApplication.java          # Main application class\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 config/                           # Configuration classes\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 SecurityConfig.java          # Security configuration\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 RedisConfig.java             # Redis configuration\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 SwaggerConfig.java           # API documentation config\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 controller/                      # REST API controllers\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 AreaController.java          # Area management endpoints\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 AuthController.java          # Authentication endpoints\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 ServiceController.java       # Service integration endpoints\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 service/                         # Business logic layer\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 AreaService.java             # Area business logic\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 AuthService.java             # Authentication logic\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 JwtService.java              # JWT token management\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 entity/                          # JPA entities\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 User.java                    # User entity\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Area.java                    # Area entity\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 Service.java                 # Service entity\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 repository/                      # Data access layer\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 UserRepository.java          # User data access\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 AreaRepository.java          # Area data access\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 ServiceRepository.java       # Service data access\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 dto/                             # Data Transfer Objects\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 exception/                       # Custom exceptions\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 security/                        # Security components\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 worker/                          # Background workers\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u251c\u2500\u2500 application.properties           # Application configuration\n\u2502   \u2502       \u251c\u2500\u2500 db/migration/                    # Flyway migrations\n\u2502   \u2502       \u2514\u2500\u2500 static/                          # Static resources\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/com/area/                       # Test classes\n\u251c\u2500\u2500 docs/                                        # Documentation\n\u2502   \u251c\u2500\u2500 technical/                               # Technical documentation\n\u2502   \u2514\u2500\u2500 api/                                     # API documentation\n\u251c\u2500\u2500 config/                                      # Configuration files\n\u251c\u2500\u2500 Docker/                                      # Docker configurations\n\u2514\u2500\u2500 gradle/                                      # Gradle wrapper\n"})}),"\n",(0,t.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,t.jsxs)(n.h4,{id:"controllers-controller",children:["Controllers (",(0,t.jsx)(n.code,{children:"controller/"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle HTTP requests and responses"}),"\n",(0,t.jsx)(n.li,{children:"Validate input parameters"}),"\n",(0,t.jsx)(n.li,{children:"Delegate business logic to services"}),"\n",(0,t.jsx)(n.li,{children:"Return appropriate HTTP status codes"}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"services-service",children:["Services (",(0,t.jsx)(n.code,{children:"service/"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implement business logic"}),"\n",(0,t.jsx)(n.li,{children:"Handle transactions"}),"\n",(0,t.jsx)(n.li,{children:"Interact with repositories"}),"\n",(0,t.jsx)(n.li,{children:"Coordinate between different components"}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"entities-entity",children:["Entities (",(0,t.jsx)(n.code,{children:"entity/"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Represent database tables"}),"\n",(0,t.jsx)(n.li,{children:"Define relationships between entities"}),"\n",(0,t.jsx)(n.li,{children:"Include validation annotations"}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"repositories-repository",children:["Repositories (",(0,t.jsx)(n.code,{children:"repository/"}),")"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Provide data access abstraction"}),"\n",(0,t.jsx)(n.li,{children:"Extend Spring Data JPA repositories"}),"\n",(0,t.jsx)(n.li,{children:"Include custom query methods"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"contribution-workflow",children:"Contribution Workflow"}),"\n",(0,t.jsx)(n.h3,{id:"branch-strategy",children:"Branch Strategy"}),"\n",(0,t.jsxs)(n.p,{children:["We use ",(0,t.jsx)(n.strong,{children:"Git Flow"})," for branch management:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"main"}),": Production-ready code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"develop"}),": Integration branch for features"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"feature/*"}),": New features or enhancements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"bugfix/*"}),": Bug fixes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"hotfix/*"}),": Critical production fixes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"release/*"}),": Release preparation"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"workflow-steps",children:"Workflow Steps"}),"\n",(0,t.jsx)(n.h4,{id:"1-create-a-feature-branch",children:"1. Create a Feature Branch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Sync with upstream\ngit fetch upstream\ngit checkout develop\ngit merge upstream/develop\n\n# Create feature branch\ngit checkout -b feature/your-feature-name\n\n# Or for bug fixes\ngit checkout -b bugfix/issue-number-description\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-make-your-changes",children:"2. Make Your Changes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Make your changes\n# Add tests for new functionality\n# Update documentation if needed\n\n# Check your changes\n./gradlew clean build\n./gradlew test\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-commit-your-changes",children:"3. Commit Your Changes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Stage your changes\ngit add .\n\n# Commit with descriptive message\ngit commit -m "feat: add user profile management functionality\n\n- Add ProfileController with CRUD operations\n- Implement ProfileService with validation\n- Add ProfileDto for data transfer\n- Include comprehensive unit tests\n- Update API documentation\n\nCloses #123"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"4-push-and-create-pull-request",children:"4. Push and Create Pull Request"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Push to your fork\ngit push origin feature/your-feature-name\n\n# Create pull request on GitHub\n# Fill out the pull request template\n# Request review from maintainers\n"})}),"\n",(0,t.jsx)(n.h3,{id:"commit-message-format",children:"Commit Message Format"}),"\n",(0,t.jsxs)(n.p,{children:["We follow the ",(0,t.jsx)(n.strong,{children:"Conventional Commits"})," specification:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Types:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"feat"}),": New feature"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fix"}),": Bug fix"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"docs"}),": Documentation changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"style"}),": Code style changes (formatting, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"refactor"}),": Code refactoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test"}),": Adding or updating tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chore"}),": Maintenance tasks"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"feat(auth): add OAuth2 Google integration\n\nAdd Google OAuth2 provider support for user authentication.\nIncludes login/callback endpoints and token management.\n\nCloses #45\n\nfix(area): resolve null pointer exception in area execution\n\nThe area execution was failing when action parameters were null.\nAdded null checks and appropriate error handling.\n\nFixes #67\n\ndocs(api): update authentication endpoint documentation\n\nAdd examples for OAuth2 flows and improve error response descriptions.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"coding-standards",children:"Coding Standards"}),"\n",(0,t.jsx)(n.h3,{id:"java-code-style",children:"Java Code Style"}),"\n",(0,t.jsx)(n.h4,{id:"general-principles",children:"General Principles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Follow ",(0,t.jsx)(n.strong,{children:"Java naming conventions"})]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"meaningful variable and method names"})]}),"\n",(0,t.jsxs)(n.li,{children:["Keep methods ",(0,t.jsx)(n.strong,{children:"small and focused"})," (max 20-30 lines)"]}),"\n",(0,t.jsxs)(n.li,{children:["Minimize ",(0,t.jsx)(n.strong,{children:"cyclomatic complexity"})]}),"\n",(0,t.jsxs)(n.li,{children:["Follow ",(0,t.jsx)(n.strong,{children:"SOLID principles"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"code-formatting",children:"Code Formatting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Class naming: PascalCase\npublic class UserService {\n    \n    // Constants: UPPER_SNAKE_CASE\n    private static final String DEFAULT_ROLE = "USER";\n    \n    // Fields: camelCase, private with getters/setters\n    private final UserRepository userRepository;\n    private final PasswordEncoder passwordEncoder;\n    \n    // Constructor injection preferred\n    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {\n        this.userRepository = userRepository;\n        this.passwordEncoder = passwordEncoder;\n    }\n    \n    // Method naming: camelCase, descriptive\n    public UserDto createNewUser(CreateUserRequest request) {\n        // Validate input\n        validateCreateUserRequest(request);\n        \n        // Business logic\n        User user = User.builder()\n            .email(request.getEmail())\n            .password(passwordEncoder.encode(request.getPassword()))\n            .role(DEFAULT_ROLE)\n            .build();\n        \n        // Save and return\n        User savedUser = userRepository.save(user);\n        return UserMapper.toDto(savedUser);\n    }\n    \n    // Private helper methods\n    private void validateCreateUserRequest(CreateUserRequest request) {\n        if (request.getEmail() == null || request.getEmail().trim().isEmpty()) {\n            throw new IllegalArgumentException("Email is required");\n        }\n        // More validation...\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"/**\n * Service class for managing user operations including creation, authentication,\n * and profile management.\n * \n * @author Your Name\n * @since 1.0.0\n */\n@Service\n@Transactional\npublic class UserService {\n    \n    /**\n     * Creates a new user account with the provided details.\n     * \n     * @param request the user creation request containing email, password, and optional profile data\n     * @return UserDto containing the created user information\n     * @throws UserAlreadyExistsException if a user with the email already exists\n     * @throws ValidationException if the request data is invalid\n     */\n    public UserDto createNewUser(CreateUserRequest request) {\n        // Implementation...\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"spring-boot-best-practices",children:"Spring Boot Best Practices"}),"\n",(0,t.jsx)(n.h4,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Preferred: Constructor injection\n@Service\npublic class AreaService {\n    private final AreaRepository areaRepository;\n    private final UserService userService;\n    \n    public AreaService(AreaRepository areaRepository, UserService userService) {\n        this.areaRepository = areaRepository;\n        this.userService = userService;\n    }\n}\n\n// Avoid: Field injection\n@Service\npublic class AreaService {\n    @Autowired // Avoid this\n    private AreaRepository areaRepository;\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Global exception handler\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n    \n    @ExceptionHandler(ValidationException.class)\n    public ResponseEntity<ErrorResponse> handleValidationException(ValidationException ex) {\n        ErrorResponse error = ErrorResponse.builder()\n            .code("VALIDATION_ERROR")\n            .message(ex.getMessage())\n            .timestamp(LocalDateTime.now())\n            .build();\n        return ResponseEntity.badRequest().body(error);\n    }\n}\n\n// Custom exceptions\npublic class UserNotFoundException extends RuntimeException {\n    public UserNotFoundException(String email) {\n        super("User not found with email: " + email);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Configuration classes\n@Configuration\n@EnableConfigurationProperties(JwtProperties.class)\npublic class SecurityConfig {\n    \n    @Bean\n    @ConditionalOnMissingBean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder(12);\n    }\n}\n\n// Configuration properties\n@ConfigurationProperties(prefix = "app.jwt")\n@Data\npublic class JwtProperties {\n    private String accessSecret;\n    private String refreshSecret;\n    private Duration accessTokenExpiry = Duration.ofMinutes(15);\n    private Duration refreshTokenExpiry = Duration.ofDays(30);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"database-guidelines",children:"Database Guidelines"}),"\n",(0,t.jsx)(n.h4,{id:"entity-design",children:"Entity Design"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "users")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class User {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    @Column(name = "user_id")\n    private UUID id;\n    \n    @Column(name = "email", nullable = false, unique = true)\n    @Email\n    private String email;\n    \n    @Column(name = "password_hash", nullable = false)\n    private String passwordHash;\n    \n    @CreationTimestamp\n    @Column(name = "created_at", nullable = false)\n    private LocalDateTime createdAt;\n    \n    @UpdateTimestamp\n    @Column(name = "updated_at", nullable = false)\n    private LocalDateTime updatedAt;\n    \n    // Relationships\n    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<Area> areas = new ArrayList<>();\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"repository-design",children:"Repository Design"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Repository\npublic interface UserRepository extends JpaRepository<User, UUID> {\n    \n    Optional<User> findByEmail(String email);\n    \n    @Query("SELECT u FROM User u WHERE u.createdAt >= :since")\n    List<User> findUsersCreatedSince(@Param("since") LocalDateTime since);\n    \n    @Modifying\n    @Query("UPDATE User u SET u.lastLoginAt = :loginTime WHERE u.id = :userId")\n    void updateLastLoginTime(@Param("userId") UUID userId, @Param("loginTime") LocalDateTime loginTime);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"api-design-guidelines",children:"API Design Guidelines"}),"\n",(0,t.jsx)(n.h4,{id:"rest-controller-design",children:"REST Controller Design"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/v1/users")\n@Tag(name = "User Management", description = "Operations for managing user accounts")\n@Validated\npublic class UserController {\n    \n    private final UserService userService;\n    \n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n    \n    @PostMapping\n    @Operation(summary = "Create new user", description = "Creates a new user account")\n    @ApiResponses({\n        @ApiResponse(responseCode = "201", description = "User created successfully"),\n        @ApiResponse(responseCode = "400", description = "Invalid input data"),\n        @ApiResponse(responseCode = "409", description = "User already exists")\n    })\n    public ResponseEntity<UserDto> createUser(\n            @Valid @RequestBody CreateUserRequest request) {\n        UserDto user = userService.createUser(request);\n        return ResponseEntity.status(HttpStatus.CREATED).body(user);\n    }\n    \n    @GetMapping("/{userId}")\n    @Operation(summary = "Get user by ID", description = "Retrieves user information by user ID")\n    public ResponseEntity<UserDto> getUser(\n            @PathVariable @Parameter(description = "User ID") UUID userId) {\n        UserDto user = userService.getUserById(userId);\n        return ResponseEntity.ok(user);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"dto-design",children:"DTO Design"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class CreateUserRequest {\n    \n    @NotBlank(message = "Email is required")\n    @Email(message = "Email must be valid")\n    private String email;\n    \n    @NotBlank(message = "Password is required")\n    @Size(min = 8, max = 100, message = "Password must be between 8 and 100 characters")\n    @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]",\n             message = "Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character")\n    private String password;\n    \n    @Size(max = 50, message = "First name must not exceed 50 characters")\n    private String firstName;\n    \n    @Size(max = 50, message = "Last name must not exceed 50 characters")\n    private String lastName;\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"testing-guidelines",children:"Testing Guidelines"}),"\n",(0,t.jsx)(n.h3,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,t.jsxs)(n.p,{children:["We follow the ",(0,t.jsx)(n.strong,{children:"Testing Pyramid"})," approach:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unit Tests"})," (70%): Fast, isolated tests for individual components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Integration Tests"})," (20%): Test component interactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"End-to-End Tests"})," (10%): Full application workflow tests"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,t.jsx)(n.h4,{id:"service-layer-tests",children:"Service Layer Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n    \n    @Mock\n    private UserRepository userRepository;\n    \n    @Mock\n    private PasswordEncoder passwordEncoder;\n    \n    @InjectMocks\n    private UserService userService;\n    \n    @Test\n    @DisplayName("Should create user successfully with valid data")\n    void shouldCreateUserSuccessfully() {\n        // Given\n        CreateUserRequest request = CreateUserRequest.builder()\n            .email("test@example.com")\n            .password("Password123!")\n            .firstName("John")\n            .lastName("Doe")\n            .build();\n        \n        User savedUser = User.builder()\n            .id(UUID.randomUUID())\n            .email(request.getEmail())\n            .passwordHash("hashed_password")\n            .firstName(request.getFirstName())\n            .lastName(request.getLastName())\n            .build();\n        \n        when(passwordEncoder.encode(request.getPassword())).thenReturn("hashed_password");\n        when(userRepository.save(any(User.class))).thenReturn(savedUser);\n        \n        // When\n        UserDto result = userService.createUser(request);\n        \n        // Then\n        assertThat(result).isNotNull();\n        assertThat(result.getEmail()).isEqualTo(request.getEmail());\n        assertThat(result.getFirstName()).isEqualTo(request.getFirstName());\n        assertThat(result.getLastName()).isEqualTo(request.getLastName());\n        \n        verify(userRepository).save(any(User.class));\n        verify(passwordEncoder).encode(request.getPassword());\n    }\n    \n    @Test\n    @DisplayName("Should throw exception when user already exists")\n    void shouldThrowExceptionWhenUserAlreadyExists() {\n        // Given\n        CreateUserRequest request = CreateUserRequest.builder()\n            .email("existing@example.com")\n            .password("Password123!")\n            .build();\n        \n        when(userRepository.findByEmail(request.getEmail()))\n            .thenReturn(Optional.of(new User()));\n        \n        // When & Then\n        assertThatThrownBy(() -> userService.createUser(request))\n            .isInstanceOf(UserAlreadyExistsException.class)\n            .hasMessageContaining("existing@example.com");\n        \n        verify(userRepository, never()).save(any(User.class));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"repository-tests",children:"Repository Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@DataJpaTest\n@TestPropertySource(properties = {\n    "spring.jpa.hibernate.ddl-auto=create-drop",\n    "spring.datasource.url=jdbc:h2:mem:testdb"\n})\nclass UserRepositoryTest {\n    \n    @Autowired\n    private TestEntityManager entityManager;\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    @Test\n    @DisplayName("Should find user by email")\n    void shouldFindUserByEmail() {\n        // Given\n        User user = User.builder()\n            .email("test@example.com")\n            .passwordHash("hashed_password")\n            .build();\n        entityManager.persistAndFlush(user);\n        \n        // When\n        Optional<User> found = userRepository.findByEmail("test@example.com");\n        \n        // Then\n        assertThat(found).isPresent();\n        assertThat(found.get().getEmail()).isEqualTo("test@example.com");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,t.jsx)(n.h4,{id:"controller-integration-tests",children:"Controller Integration Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\n@Testcontainers\nclass UserControllerIntegrationTest {\n    \n    @Container\n    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15-alpine")\n            .withDatabaseName("testdb")\n            .withUsername("test")\n            .withPassword("test");\n    \n    @Autowired\n    private TestRestTemplate restTemplate;\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    @DynamicPropertySource\n    static void configureProperties(DynamicPropertyRegistry registry) {\n        registry.add("spring.datasource.url", postgres::getJdbcUrl);\n        registry.add("spring.datasource.username", postgres::getUsername);\n        registry.add("spring.datasource.password", postgres::getPassword);\n    }\n    \n    @Test\n    @DisplayName("Should create user via REST API")\n    void shouldCreateUserViaRestApi() {\n        // Given\n        CreateUserRequest request = CreateUserRequest.builder()\n            .email("integration@example.com")\n            .password("Password123!")\n            .firstName("Integration")\n            .lastName("Test")\n            .build();\n        \n        // When\n        ResponseEntity<UserDto> response = restTemplate.postForEntity(\n            "/api/v1/users", request, UserDto.class);\n        \n        // Then\n        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n        assertThat(response.getBody()).isNotNull();\n        assertThat(response.getBody().getEmail()).isEqualTo(request.getEmail());\n        \n        // Verify in database\n        Optional<User> savedUser = userRepository.findByEmail(request.getEmail());\n        assertThat(savedUser).isPresent();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"test-utilities",children:"Test Utilities"}),"\n",(0,t.jsx)(n.h4,{id:"test-data-builders",children:"Test Data Builders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class TestDataBuilder {\n    \n    public static User.UserBuilder defaultUser() {\n        return User.builder()\n            .id(UUID.randomUUID())\n            .email("test@example.com")\n            .passwordHash("hashed_password")\n            .firstName("John")\n            .lastName("Doe")\n            .createdAt(LocalDateTime.now())\n            .updatedAt(LocalDateTime.now());\n    }\n    \n    public static Area.AreaBuilder defaultArea() {\n        return Area.builder()\n            .id(UUID.randomUUID())\n            .name("Test Area")\n            .description("Test area description")\n            .isActive(true)\n            .createdAt(LocalDateTime.now())\n            .updatedAt(LocalDateTime.now());\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"custom-test-annotations",children:"Custom Test Annotations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@SpringBootTest\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\n@Testcontainers\npublic @interface IntegrationTest {\n}\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Test\n@DisplayName\npublic @interface UnitTest {\n    String value();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"test-coverage",children:"Test Coverage"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Maintain ",(0,t.jsx)(n.strong,{children:"minimum 80% code coverage"})]}),"\n",(0,t.jsxs)(n.li,{children:["Focus on ",(0,t.jsx)(n.strong,{children:"branch coverage"}),", not just line coverage"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"JaCoCo"})," for coverage reporting"]}),"\n",(0,t.jsx)(n.li,{children:"Exclude DTOs, entities, and configuration classes from coverage requirements"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run tests with coverage\n./gradlew test jacocoTestReport\n\n# View coverage report\nopen build/reports/jacoco/test/html/index.html\n"})}),"\n",(0,t.jsx)(n.h2,{id:"documentation-guidelines",children:"Documentation Guidelines"}),"\n",(0,t.jsx)(n.h3,{id:"code-documentation",children:"Code Documentation"}),"\n",(0,t.jsx)(n.h4,{id:"javadoc-standards",children:"JavaDoc Standards"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"/**\n * Service responsible for managing user authentication and authorization.\n * <p>\n * This service handles user login, logout, token generation and validation,\n * and integration with OAuth2 providers.\n * </p>\n * \n * @author Your Name\n * @version 1.0.0\n * @since 2024-01-01\n */\n@Service\npublic class AuthService {\n    \n    /**\n     * Authenticates a user with email and password.\n     * <p>\n     * This method validates the provided credentials against the database\n     * and generates JWT tokens if authentication is successful.\n     * </p>\n     * \n     * @param email the user's email address (must not be null or empty)\n     * @param password the user's plaintext password (must not be null or empty)\n     * @return AuthResponse containing access and refresh tokens\n     * @throws AuthenticationException if credentials are invalid\n     * @throws UserNotFoundException if user doesn't exist\n     * @throws AccountLockedException if user account is locked\n     * \n     * @see #generateTokens(User)\n     * @see #validateCredentials(String, String)\n     */\n    public AuthResponse authenticate(String email, String password) {\n        // Implementation...\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"api-documentation",children:"API Documentation"}),"\n",(0,t.jsx)(n.h4,{id:"openapi-annotations",children:"OpenAPI Annotations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/v1/auth")\n@Tag(name = "Authentication", description = "User authentication and authorization endpoints")\npublic class AuthController {\n    \n    @PostMapping("/login")\n    @Operation(\n        summary = "Authenticate user",\n        description = "Authenticates a user with email and password, returning JWT tokens",\n        responses = {\n            @ApiResponse(\n                responseCode = "200",\n                description = "Authentication successful",\n                content = @Content(\n                    mediaType = "application/json",\n                    schema = @Schema(implementation = AuthResponse.class),\n                    examples = @ExampleObject(\n                        name = "Successful authentication",\n                        value = """\n                        {\n                          "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",\n                          "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",\n                          "user": {\n                            "id": "123e4567-e89b-12d3-a456-426614174000",\n                            "email": "user@example.com",\n                            "firstName": "John",\n                            "lastName": "Doe"\n                          }\n                        }\n                        """\n                    )\n                )\n            ),\n            @ApiResponse(\n                responseCode = "401",\n                description = "Invalid credentials",\n                content = @Content(\n                    mediaType = "application/json",\n                    schema = @Schema(implementation = ErrorResponse.class)\n                )\n            )\n        }\n    )\n    public ResponseEntity<AuthResponse> login(\n            @Parameter(description = "User login credentials", required = true)\n            @Valid @RequestBody LoginRequest request) {\n        // Implementation...\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"readme-updates",children:"README Updates"}),"\n",(0,t.jsx)(n.p,{children:"When adding new features, update relevant README sections:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Features"}),": Add new functionality descriptions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"API Endpoints"}),": Document new endpoints"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configuration"}),": Add new environment variables"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dependencies"}),": Update if new dependencies are added"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"technical-documentation",children:"Technical Documentation"}),"\n",(0,t.jsx)(n.p,{children:"For significant changes, create or update technical documentation:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Architecture decisions"}),": Document in ",(0,t.jsx)(n.code,{children:"docs/technical/"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"API changes"}),": Update API documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Database changes"}),": Document schema changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security changes"}),": Update security documentation"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"pull-request-process",children:"Pull Request Process"}),"\n",(0,t.jsx)(n.h3,{id:"pull-request-template",children:"Pull Request Template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"## Description\nBrief description of the changes and the problem they solve.\n\n## Type of Change\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n\n## How Has This Been Tested?\n- [ ] Unit tests\n- [ ] Integration tests\n- [ ] Manual testing\n\n## Checklist\n- [ ] My code follows the project's coding standards\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n- [ ] Any dependent changes have been merged and published\n\n## Screenshots (if applicable)\nAdd screenshots for UI changes.\n\n## Additional Notes\nAny additional information that reviewers should know.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"review-process",children:"Review Process"}),"\n",(0,t.jsx)(n.h4,{id:"before-submitting",children:"Before Submitting"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Self-review"}),": Review your own changes thoroughly"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test locally"}),": Ensure all tests pass"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check formatting"}),": Run code formatting and linting"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update documentation"}),": Update relevant documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rebase"}),": Rebase your branch on the latest develop"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Pre-submission checklist\n./gradlew clean build\n./gradlew test\n./gradlew checkstyleMain\n./gradlew checkstyleTest\n\n# Rebase on develop\ngit fetch upstream\ngit rebase upstream/develop\n"})}),"\n",(0,t.jsx)(n.h4,{id:"review-criteria",children:"Review Criteria"}),"\n",(0,t.jsx)(n.p,{children:"Reviewers will check for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code quality"}),": Follows coding standards and best practices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Functionality"}),": Changes work as intended"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tests"}),": Adequate test coverage for new code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Proper documentation for new features"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security"}),": No security vulnerabilities introduced"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": No significant performance degradation"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"addressing-review-comments",children:"Addressing Review Comments"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Read carefully"}),": Understand all review comments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ask questions"}),": If comments are unclear, ask for clarification"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Make changes"}),": Address all valid concerns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Respond"}),": Reply to comments explaining your changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Re-request review"}),": Request review after making changes"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"merge-requirements",children:"Merge Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u2705 At least ",(0,t.jsx)(n.strong,{children:"2 approving reviews"})," from maintainers"]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 All ",(0,t.jsx)(n.strong,{children:"CI checks passing"})]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Conflicts resolved"})]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Branch up to date"})," with target branch"]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 All ",(0,t.jsx)(n.strong,{children:"review comments addressed"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"issue-guidelines",children:"Issue Guidelines"}),"\n",(0,t.jsx)(n.h3,{id:"reporting-bugs",children:"Reporting Bugs"}),"\n",(0,t.jsx)(n.h4,{id:"bug-report-template",children:"Bug Report Template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"## Bug Description\nA clear and concise description of what the bug is.\n\n## Steps to Reproduce\n1. Go to '...'\n2. Click on '....'\n3. Scroll down to '....'\n4. See error\n\n## Expected Behavior\nA clear and concise description of what you expected to happen.\n\n## Actual Behavior\nA clear and concise description of what actually happened.\n\n## Screenshots\nIf applicable, add screenshots to help explain your problem.\n\n## Environment\n- OS: [e.g. Ubuntu 20.04]\n- Java Version: [e.g. 21.0.1]\n- Application Version: [e.g. 1.2.3]\n- Browser: [e.g. Chrome 120.0]\n\n## Additional Context\nAdd any other context about the problem here.\n\n## Logs\n"})}),"\n",(0,t.jsx)(n.p,{children:"Include relevant log snippets here"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\n### Feature Requests\n\n#### Feature Request Template\n```markdown\n## Feature Description\nA clear and concise description of the feature you'd like to see.\n\n## Problem Statement\nDescribe the problem this feature would solve.\n\n## Proposed Solution\nDescribe how you envision this feature working.\n\n## Alternatives Considered\nDescribe any alternative solutions you've considered.\n\n## Additional Context\nAdd any other context, mockups, or examples about the feature request.\n\n## Implementation Notes\nIf you have ideas about implementation, share them here.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"issue-labels",children:"Issue Labels"}),"\n",(0,t.jsx)(n.p,{children:"We use the following labels to categorize issues:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"bug"}),": Something isn't working"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"enhancement"}),": New feature or request"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"documentation"}),": Improvements or additions to documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"good first issue"}),": Good for newcomers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"help wanted"}),": Extra attention is needed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"question"}),": Further information is requested"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"wontfix"}),": This will not be worked on"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"duplicate"}),": This issue or pull request already exists"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"priority: high/medium/low"}),": Issue priority"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"size: S/M/L/XL"}),": Estimated effort required"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"security-guidelines",children:"Security Guidelines"}),"\n",(0,t.jsx)(n.h3,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,t.jsx)(n.h4,{id:"authentication--authorization",children:"Authentication & Authorization"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Never log sensitive data"})," (passwords, tokens, personal data)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use parameterized queries"})," to prevent SQL injection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validate all inputs"})," on both client and server side"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement proper CORS"})," configuration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use HTTPS"})," for all communications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Follow JWT best practices"})," for token handling"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"secure-coding",children:"Secure Coding"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Good: Parameterized query\n@Query("SELECT u FROM User u WHERE u.email = :email")\nOptional<User> findByEmail(@Param("email") String email);\n\n// Bad: String concatenation (SQL injection risk)\n// @Query("SELECT u FROM User u WHERE u.email = \'" + email + "\'")\n\n// Good: Input validation\n@Valid @RequestBody CreateUserRequest request\n\n// Good: Password hashing\nString hashedPassword = passwordEncoder.encode(rawPassword);\n\n// Bad: Plaintext password storage\n// user.setPassword(rawPassword);\n'})}),"\n",(0,t.jsx)(n.h4,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Never commit secrets"})," to version control"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use environment variables"})," for sensitive configuration"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Rotate secrets regularly"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Use strong, random passwords"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"reporting-security-issues",children:"Reporting Security Issues"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Do not"})," create public GitHub issues for security vulnerabilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Email security issues"})," to ",(0,t.jsx)(n.a,{href:"mailto:security@yourproject.com",children:"security@yourproject.com"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Include detailed steps"})," to reproduce the vulnerability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Wait for confirmation"})," before public disclosure"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"security-testing",children:"Security Testing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Run security scans"})," with tools like OWASP ZAP"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keep dependencies updated"})," to avoid known vulnerabilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test authentication and authorization"})," thoroughly"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Validate input sanitization"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"community-guidelines",children:"Community Guidelines"}),"\n",(0,t.jsx)(n.h3,{id:"code-of-conduct",children:"Code of Conduct"}),"\n",(0,t.jsxs)(n.p,{children:["We are committed to providing a welcoming and inspiring community for all. Please read our full ",(0,t.jsx)(n.a,{href:"CODE_OF_CONDUCT.md",children:"Code of Conduct"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"our-standards",children:"Our Standards"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Be respectful"})," and inclusive"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Use welcoming language"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Be collaborative"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Focus on what's best"})," for the community"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Show empathy"})," towards other community members"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"unacceptable-behavior",children:"Unacceptable Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Harassment"})," of any kind"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Discriminatory language"})," or actions"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Personal attacks"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Publishing private information"})," without permission"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Other conduct"})," that could reasonably be considered inappropriate"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"communication-channels",children:"Communication Channels"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub Issues"}),": Bug reports and feature requests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub Discussions"}),": General questions and discussions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Discord/Slack"}),": Real-time chat (if applicable)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Email"}),": Security issues and private matters"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check existing issues"}),": Your question might already be answered"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Read documentation"}),": Check our comprehensive docs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ask in discussions"}),": For general questions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Be specific"}),": Provide context and details when asking for help"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"recognition",children:"Recognition"}),"\n",(0,t.jsx)(n.p,{children:"We recognize contributors in various ways:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Contributors list"}),": Listed in README.md"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Release notes"}),": Major contributions mentioned"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub badges"}),": Achievement recognition"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Community highlights"}),": Featured in newsletters/blogs"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"maintainer-responsibilities",children:"Maintainer Responsibilities"}),"\n",(0,t.jsx)(n.p,{children:"Maintainers are responsible for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reviewing pull requests"})," in a timely manner"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintaining code quality"})," standards"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Helping contributors"})," with questions and issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keeping the project"})," moving forward"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Enforcing the code of conduct"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"Thank you for contributing to the AREA Backend project! Your contributions help make this automation platform better for everyone. Whether you're fixing bugs, adding features, improving documentation, or helping other contributors, every contribution is valuable."}),"\n",(0,t.jsx)(n.h3,{id:"quick-start-checklist",children:"Quick Start Checklist"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Fork and clone the repository"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Set up development environment"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Read and understand the codebase structure"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",'Find an issue to work on (check "good first issue" labels)']}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Create a feature branch"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Make your changes with tests"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Submit a pull request"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Respond to review feedback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Technical Documentation"}),": ",(0,t.jsx)(n.code,{children:"/docs/technical/"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"API Documentation"}),": ",(0,t.jsx)(n.a,{href:"http://localhost:8080/swagger-ui.html",children:"http://localhost:8080/swagger-ui.html"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Project Wiki"}),": GitHub Wiki"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Community Chat"}),": Discord/Slack (if applicable)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"questions",children:"Questions?"}),"\n",(0,t.jsx)(n.p,{children:"If you have any questions about contributing, please:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check the documentation first"}),"\n",(0,t.jsx)(n.li,{children:"Search existing GitHub issues and discussions"}),"\n",(0,t.jsx)(n.li,{children:"Create a new discussion for general questions"}),"\n",(0,t.jsx)(n.li,{children:"Create an issue for bugs or specific problems"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Happy coding! \ud83d\ude80"})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);