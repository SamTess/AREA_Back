"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[1552],{7694:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"technical/area-management","title":"Area Management System","description":"Table of Contents","source":"@site/docs/technical/03-area-management.md","sourceDirName":"technical","slug":"/technical/area-management","permalink":"/docs/technical/area-management","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/technical/03-area-management.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Doxygen & Docusaurus Integration","permalink":"/docs/technical/doxygen-integration"},"next":{"title":"Service Integration Architecture","permalink":"/docs/technical/service-integration"}}');var t=i(4848),r=i(8453);const c={},s="Area Management System",o={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Area (Automation)",id:"area-automation",level:3},{value:"Action vs Reaction",id:"action-vs-reaction",level:3},{value:"Entity Model",id:"entity-model",level:2},{value:"Area Entity",id:"area-entity",level:3},{value:"Action Definition Entity",id:"action-definition-entity",level:3},{value:"Action Instance Entity",id:"action-instance-entity",level:3},{value:"Area Creation Flow",id:"area-creation-flow",level:2},{value:"1. Basic Area Creation",id:"1-basic-area-creation",level:3},{value:"2. Advanced Area Creation with Actions",id:"2-advanced-area-creation-with-actions",level:3},{value:"3. Area Creation with Links",id:"3-area-creation-with-links",level:3},{value:"JSON Schema Validation",id:"json-schema-validation",level:2},{value:"Schema Validation Service",id:"schema-validation-service",level:3},{value:"Example Action Definition Schema",id:"example-action-definition-schema",level:3},{value:"Validation Flow",id:"validation-flow",level:3},{value:"Action &amp; Reaction System",id:"action--reaction-system",level:2},{value:"Action Definitions Registry",id:"action-definitions-registry",level:3},{value:"Dynamic Action Loading",id:"dynamic-action-loading",level:3},{value:"Execution Engine",id:"execution-engine",level:2},{value:"Execution Flow",id:"execution-flow",level:3},{value:"Execution Entity",id:"execution-entity",level:3},{value:"Execution Service",id:"execution-service",level:3},{value:"Background Workers",id:"background-workers",level:2},{value:"Area Reaction Worker",id:"area-reaction-worker",level:3},{value:"Reaction Executor",id:"reaction-executor",level:3},{value:"Retry Management",id:"retry-management",level:3},{value:"Data Mapping &amp; Links",id:"data-mapping--links",level:2},{value:"Action Links",id:"action-links",level:3},{value:"Data Mapping Service",id:"data-mapping-service",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Area Management Endpoints",id:"area-management-endpoints",level:3},{value:"Create Basic Area",id:"create-basic-area",level:4},{value:"Create Area with Actions",id:"create-area-with-actions",level:4},{value:"Get User Areas",id:"get-user-areas",level:4},{value:"Get Area Details",id:"get-area-details",level:4},{value:"Update Area",id:"update-area",level:4},{value:"Delete Area",id:"delete-area",level:4},{value:"Action Instance Management",id:"action-instance-management",level:3},{value:"Create Action Instance",id:"create-action-instance",level:4},{value:"Get Action Instances",id:"get-action-instances",level:4},{value:"Execution Management",id:"execution-management",level:3},{value:"Get Area Executions",id:"get-area-executions",level:4},{value:"Get Execution Details",id:"get-execution-details",level:4},{value:"Error Handling",id:"error-handling",level:2},{value:"Validation Errors",id:"validation-errors",level:3},{value:"Execution Errors",id:"execution-errors",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Database Optimization",id:"database-optimization",level:3},{value:"Caching Strategy",id:"caching-strategy",level:3},{value:"Scalability",id:"scalability",level:3},{value:"Monitoring &amp; Observability",id:"monitoring--observability",level:2},{value:"Metrics Collection",id:"metrics-collection",level:3},{value:"Health Checks",id:"health-checks",level:3},{value:"Logging",id:"logging",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"area-management-system",children:"Area Management System"})}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#core-concepts",children:"Core Concepts"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#entity-model",children:"Entity Model"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#area-creation-flow",children:"Area Creation Flow"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#json-schema-validation",children:"JSON Schema Validation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#action--reaction-system",children:"Action & Reaction System"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#execution-engine",children:"Execution Engine"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#background-workers",children:"Background Workers"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#api-reference",children:"API Reference"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:'The Area Management System is the core component of the AREA platform that allows users to create, configure, and manage automation workflows. Each "Area" represents an automation that connects triggers (actions) with responses (reactions).'}),"\n",(0,t.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,t.jsx)(n.h3,{id:"area-automation",children:"Area (Automation)"}),"\n",(0,t.jsx)(n.p,{children:"An Area is a user-defined automation workflow consisting of:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Actions"}),": Triggers that initiate the automation (webhooks, polling, schedules)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reactions"}),": Responses executed when actions are triggered"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Links"}),": Data mapping between actions and reactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Activation Mode"}),": How the automation is triggered (cron, webhook, polling)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"action-vs-reaction",children:"Action vs Reaction"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Action"}),": Event-capable components that can trigger automations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reaction"}),": Executable components that perform operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Action Definition"}),": Template defining available actions/reactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Action Instance"}),": Configured instance of an action definition"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"entity-model",children:"Entity Model"}),"\n",(0,t.jsx)(n.h3,{id:"area-entity",children:"Area Entity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "a_areas", schema = "area")\npublic class Area {\n    @Id\n    private UUID id;\n    \n    @ManyToOne\n    private User user;                    // Owner of the area\n    \n    private String name;                  // User-defined name\n    private String description;           // Optional description\n    private Boolean enabled;              // Active/inactive state\n    \n    @JdbcTypeCode(SqlTypes.JSON)\n    private List<Map<String, Object>> actions;    // JSONB actions config\n    \n    @JdbcTypeCode(SqlTypes.JSON)\n    private List<Map<String, Object>> reactions;  // JSONB reactions config\n    \n    private LocalDateTime createdAt;\n    private LocalDateTime updatedAt;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"action-definition-entity",children:"Action Definition Entity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "a_action_definitions", schema = "area")\npublic class ActionDefinition {\n    @Id\n    private UUID id;\n    \n    private String key;                   // Unique identifier\n    private String name;                  // Display name\n    private String description;           // Description\n    private String serviceKey;            // Associated service\n    \n    private Boolean isEventCapable;       // Can be used as trigger\n    private Boolean isExecutable;         // Can be used as reaction\n    \n    @JdbcTypeCode(SqlTypes.JSON)\n    private Map<String, Object> inputSchema;     // JSON schema for parameters\n    \n    @JdbcTypeCode(SqlTypes.JSON)\n    private Map<String, Object> outputSchema;    // JSON schema for output data\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"action-instance-entity",children:"Action Instance Entity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "a_action_instances", schema = "area")\npublic class ActionInstance {\n    @Id\n    private UUID id;\n    \n    @ManyToOne\n    private Area area;                    // Parent area\n    \n    @ManyToOne\n    private ActionDefinition actionDefinition;  // Template\n    \n    @ManyToOne\n    private ServiceAccount serviceAccount;       // Authentication\n    \n    @JdbcTypeCode(SqlTypes.JSON)\n    private Map<String, Object> parameters;     // Instance configuration\n    \n    @Enumerated(EnumType.STRING)\n    private ActivationModeType activationMode;  // CRON, WEBHOOK, POLL\n    \n    private String cronExpression;        // For scheduled actions\n    private Boolean enabled;\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"area-creation-flow",children:"Area Creation Flow"}),"\n",(0,t.jsx)(n.h3,{id:"1-basic-area-creation",children:"1. Basic Area Creation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Simple area creation (backward compatibility)\nPOST /api/areas\n{\n    "name": "My Simple Area",\n    "description": "Basic area",\n    "userId": "user-uuid"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-advanced-area-creation-with-actions",children:"2. Advanced Area Creation with Actions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Area with complete action/reaction configuration\nPOST /api/areas/with-actions\n{\n    "name": "GitHub to Slack Integration",\n    "description": "Send Slack notification when GitHub issue is created",\n    "userId": "user-uuid",\n    "actions": [\n        {\n            "actionDefinitionId": "github-issue-created-uuid",\n            "serviceAccountId": "github-account-uuid",\n            "parameters": {\n                "repository": "owner/repo",\n                "event_types": ["opened", "reopened"]\n            }\n        }\n    ],\n    "reactions": [\n        {\n            "actionDefinitionId": "slack-send-message-uuid", \n            "serviceAccountId": "slack-account-uuid",\n            "parameters": {\n                "channel": "#notifications",\n                "template": "New issue: {{issue.title}}"\n            }\n        }\n    ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-area-creation-with-links",children:"3. Area Creation with Links"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Area with data mapping between actions and reactions\nPOST /api/areas/with-actions-and-links\n{\n    "name": "Complex GitHub Integration",\n    "userId": "user-uuid",\n    "actions": [...],\n    "reactions": [...],\n    "links": [\n        {\n            "sourceActionIndex": 0,\n            "targetReactionIndex": 0,\n            "dataMapping": {\n                "issue.title": "message.title",\n                "issue.url": "message.url",\n                "issue.author": "message.author"\n            }\n        }\n    ]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"json-schema-validation",children:"JSON Schema Validation"}),"\n",(0,t.jsx)(n.h3,{id:"schema-validation-service",children:"Schema Validation Service"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Service\npublic class JsonSchemaValidationService {\n    \n    /**\n     * Validates parameters against action definition schema\n     */\n    public void validateParameters(Map<String, Object> schema, \n                                 Map<String, Object> parameters) {\n        // 1. Parse JSON schema\n        // 2. Validate parameter structure\n        // 3. Check required fields\n        // 4. Validate data types\n        // 5. Throw detailed validation errors\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-action-definition-schema",children:"Example Action Definition Schema"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "type": "object",\n    "properties": {\n        "repository": {\n            "type": "string",\n            "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",\n            "description": "GitHub repository in format owner/repo"\n        },\n        "event_types": {\n            "type": "array",\n            "items": {\n                "type": "string",\n                "enum": ["opened", "closed", "reopened", "edited"]\n            },\n            "minItems": 1,\n            "description": "Issue events to monitor"\n        }\n    },\n    "required": ["repository"],\n    "additionalProperties": false\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"validation-flow",children:"Validation Flow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Service\npublic class AreaService {\n    \n    private void validateActionsAndReactions(List<AreaActionRequest> actions, \n                                           List<AreaReactionRequest> reactions) {\n        for (AreaActionRequest action : actions) {\n            ActionDefinition actionDef = actionDefinitionRepository\n                .findById(action.getActionDefinitionId())\n                .orElseThrow(() -> new IllegalArgumentException("Action definition not found"));\n            \n            // Validate action is event-capable (can be trigger)\n            if (!actionDef.getIsEventCapable()) {\n                throw new IllegalArgumentException("Action must be event capable");\n            }\n            \n            // Validate parameters against schema\n            jsonSchemaValidationService.validateParameters(\n                actionDef.getInputSchema(), \n                action.getParameters()\n            );\n        }\n        \n        // Similar validation for reactions\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"action--reaction-system",children:"Action & Reaction System"}),"\n",(0,t.jsx)(n.h3,{id:"action-definitions-registry",children:"Action Definitions Registry"}),"\n",(0,t.jsx)(n.p,{children:"The system maintains a registry of available actions and reactions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// GitHub Service Actions\ngithub-issue-created      (Event Capable)\ngithub-pull-request-opened (Event Capable)\ngithub-repository-starred  (Event Capable)\n\n// GitHub Service Reactions  \ngithub-create-issue       (Executable)\ngithub-comment-issue      (Executable)\ngithub-close-issue        (Executable)\n\n// Slack Service Reactions\nslack-send-message        (Executable)\nslack-create-channel      (Executable)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dynamic-action-loading",children:"Dynamic Action Loading"}),"\n",(0,t.jsx)(n.p,{children:"Actions are loaded from the database and can be added dynamically:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"INSERT INTO area.a_action_definitions (\n    key, name, description, service_key,\n    is_event_capable, is_executable,\n    input_schema, output_schema\n) VALUES (\n    'github-issue-created',\n    'GitHub Issue Created',\n    'Triggered when a new issue is created',\n    'github',\n    true, false,\n    '{\"type\": \"object\", \"properties\": {...}}',\n    '{\"type\": \"object\", \"properties\": {...}}'\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"execution-engine",children:"Execution Engine"}),"\n",(0,t.jsx)(n.h3,{id:"execution-flow",children:"Execution Flow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[External Event] --\x3e B[Webhook/Polling]\n    B --\x3e C[Event Validation]\n    C --\x3e D[Find Matching Areas]\n    D --\x3e E[Create Execution]\n    E --\x3e F[Queue in Redis]\n    F --\x3e G[Worker Processing]\n    G --\x3e H[Execute Reactions]\n    H --\x3e I[Update Status]\n    I --\x3e J[Audit Log]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"execution-entity",children:"Execution Entity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "a_executions", schema = "area")\npublic class Execution {\n    @Id\n    private UUID id;\n    \n    @ManyToOne\n    private Area area;                    // Associated area\n    \n    @ManyToOne\n    private ActionInstance triggerAction; // Triggering action\n    \n    @JdbcTypeCode(SqlTypes.JSON)\n    private Map<String, Object> inputData;       // Trigger data\n    \n    @JdbcTypeCode(SqlTypes.JSON)\n    private Map<String, Object> outputData;      // Execution results\n    \n    @Enumerated(EnumType.STRING)\n    private ExecutionStatus status;       // QUEUED, RUNNING, OK, FAILED\n    \n    private LocalDateTime triggeredAt;\n    private LocalDateTime completedAt;\n    private String errorMessage;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"execution-service",children:"Execution Service"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Service\npublic class ExecutionService {\n    \n    /**\n     * Creates a new execution for an area\n     */\n    public Execution createExecution(Area area, \n                                   ActionInstance triggerAction,\n                                   Map<String, Object> inputData) {\n        Execution execution = new Execution();\n        execution.setArea(area);\n        execution.setTriggerAction(triggerAction);\n        execution.setInputData(inputData);\n        execution.setStatus(ExecutionStatus.QUEUED);\n        execution.setTriggeredAt(LocalDateTime.now());\n        \n        return executionRepository.save(execution);\n    }\n    \n    /**\n     * Updates execution status and results\n     */\n    public void updateExecution(UUID executionId, \n                              ExecutionStatus status,\n                              Map<String, Object> outputData,\n                              String errorMessage) {\n        // Update execution with results\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"background-workers",children:"Background Workers"}),"\n",(0,t.jsx)(n.h3,{id:"area-reaction-worker",children:"Area Reaction Worker"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\npublic class AreaReactionWorker {\n    \n    /**\n     * Processes events from Redis stream\n     */\n    @Scheduled(fixedDelay = 1000)\n    @Async("areaWorkerExecutor")\n    public void processAreaEvents() {\n        // 1. Read from Redis stream\n        // 2. Process event records\n        // 3. Create executions\n        // 4. Queue reactions\n    }\n    \n    /**\n     * Processes queued executions\n     */\n    @Scheduled(fixedDelay = 5000)\n    @Async("areaWorkerExecutor")\n    public void processQueuedExecutions() {\n        List<Execution> queued = executionService.getQueuedExecutions();\n        for (Execution execution : queued) {\n            processExecution(execution);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"reaction-executor",children:"Reaction Executor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Component\npublic class ReactionExecutor {\n    \n    /**\n     * Executes a single reaction with retry logic\n     */\n    public ExecutionResult executeReaction(ActionInstance reactionInstance,\n                                         Map<String, Object> inputData) {\n        try {\n            // 1. Validate reaction parameters\n            // 2. Prepare service authentication\n            // 3. Execute reaction logic\n            // 4. Return execution result\n        } catch (Exception e) {\n            // Handle errors and retry logic\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"retry-management",children:"Retry Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Component\npublic class RetryManager {\n    \n    private static final int MAX_RETRIES = 3;\n    private static final int RETRY_DELAY_SECONDS = 60;\n    \n    /**\n     * Handles execution retries with exponential backoff\n     */\n    public void handleRetry(Execution execution, Exception error) {\n        if (execution.getRetryCount() < MAX_RETRIES) {\n            // Schedule retry with delay\n            scheduleRetry(execution, calculateRetryDelay(execution.getRetryCount()));\n        } else {\n            // Mark as permanently failed\n            execution.setStatus(ExecutionStatus.FAILED);\n            execution.setErrorMessage(error.getMessage());\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"data-mapping--links",children:"Data Mapping & Links"}),"\n",(0,t.jsx)(n.h3,{id:"action-links",children:"Action Links"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "a_action_links", schema = "area")\npublic class ActionLink {\n    @Id\n    private UUID id;\n    \n    @ManyToOne\n    private Area area;\n    \n    @ManyToOne  \n    private ActionInstance sourceAction;   // Data source\n    \n    @ManyToOne\n    private ActionInstance targetReaction; // Data destination\n    \n    @JdbcTypeCode(SqlTypes.JSON)\n    private Map<String, String> dataMapping;  // Field mapping rules\n    \n    @Enumerated(EnumType.STRING)\n    private LinkType linkType;            // DIRECT, CONDITIONAL\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"data-mapping-service",children:"Data Mapping Service"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Service\npublic class DataMappingService {\n    \n    /**\n     * Maps data from action output to reaction input\n     */\n    public Map<String, Object> mapActionDataToReaction(\n            Map<String, Object> sourceData,\n            Map<String, String> mappingRules) {\n        \n        Map<String, Object> mappedData = new HashMap<>();\n        \n        for (Map.Entry<String, String> mapping : mappingRules.entrySet()) {\n            String sourcePath = mapping.getKey();     // "issue.title"\n            String targetPath = mapping.getValue();   // "message.title"\n            \n            Object value = extractValueByPath(sourceData, sourcePath);\n            setValueByPath(mappedData, targetPath, value);\n        }\n        \n        return mappedData;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsx)(n.h3,{id:"area-management-endpoints",children:"Area Management Endpoints"}),"\n",(0,t.jsx)(n.h4,{id:"create-basic-area",children:"Create Basic Area"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:'POST /api/areas\nContent-Type: application/json\n\n{\n    "name": "My Area",\n    "description": "Area description",\n    "userId": "user-uuid"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"create-area-with-actions",children:"Create Area with Actions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:'POST /api/areas/with-actions\nContent-Type: application/json\n\n{\n    "name": "GitHub Integration",\n    "description": "GitHub to Slack integration",\n    "userId": "user-uuid",\n    "actions": [\n        {\n            "actionDefinitionId": "action-def-uuid",\n            "serviceAccountId": "service-account-uuid",\n            "parameters": {\n                "repository": "owner/repo"\n            }\n        }\n    ],\n    "reactions": [\n        {\n            "actionDefinitionId": "reaction-def-uuid",\n            "serviceAccountId": "service-account-uuid", \n            "parameters": {\n                "channel": "#notifications"\n            }\n        }\n    ]\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"get-user-areas",children:"Get User Areas"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:"GET /api/areas/user/{userId}?page=0&size=20&sortBy=createdAt&sortDir=desc\n"})}),"\n",(0,t.jsx)(n.h4,{id:"get-area-details",children:"Get Area Details"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:"GET /api/areas/{areaId}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"update-area",children:"Update Area"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:'PUT /api/areas/{areaId}\nContent-Type: application/json\n\n{\n    "name": "Updated Area Name",\n    "description": "Updated description",\n    "enabled": true\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"delete-area",children:"Delete Area"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:"DELETE /api/areas/{areaId}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"action-instance-management",children:"Action Instance Management"}),"\n",(0,t.jsx)(n.h4,{id:"create-action-instance",children:"Create Action Instance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:'POST /api/action-instances\nContent-Type: application/json\n\n{\n    "areaId": "area-uuid",\n    "actionDefinitionId": "action-def-uuid",\n    "serviceAccountId": "service-account-uuid",\n    "parameters": {\n        "repository": "owner/repo"\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"get-action-instances",children:"Get Action Instances"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:"GET /api/action-instances/area/{areaId}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"execution-management",children:"Execution Management"}),"\n",(0,t.jsx)(n.h4,{id:"get-area-executions",children:"Get Area Executions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:"GET /api/executions/area/{areaId}?status=OK&limit=50\n"})}),"\n",(0,t.jsx)(n.h4,{id:"get-execution-details",children:"Get Execution Details"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:"GET /api/executions/{executionId}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.h3,{id:"validation-errors",children:"Validation Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "VALIDATION_ERROR",\n    "message": "Invalid action parameters",\n    "details": {\n        "field": "repository",\n        "message": "Repository format must be owner/repo",\n        "rejectedValue": "invalid-repo"\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"execution-errors",children:"Execution Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "EXECUTION_ERROR", \n    "message": "Failed to execute reaction",\n    "details": {\n        "reactionId": "reaction-uuid",\n        "errorCode": "SERVICE_UNAVAILABLE",\n        "retryable": true\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"database-optimization",children:"Database Optimization"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"JSONB columns with GIN indexes for efficient querying"}),"\n",(0,t.jsx)(n.li,{children:"Pagination for large result sets"}),"\n",(0,t.jsx)(n.li,{children:"Connection pooling with HikariCP"}),"\n",(0,t.jsx)(n.li,{children:"Query optimization with JPA criteria"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Action definitions cached in Redis"}),"\n",(0,t.jsx)(n.li,{children:"Service configurations cached"}),"\n",(0,t.jsx)(n.li,{children:"User permissions cached"}),"\n",(0,t.jsx)(n.li,{children:"Execution results cached (limited time)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"scalability",children:"Scalability"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Async processing with Redis streams"}),"\n",(0,t.jsx)(n.li,{children:"Horizontal scaling of worker processes"}),"\n",(0,t.jsx)(n.li,{children:"Database read replicas for queries"}),"\n",(0,t.jsx)(n.li,{children:"Rate limiting for API endpoints"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"monitoring--observability",children:"Monitoring & Observability"}),"\n",(0,t.jsx)(n.h3,{id:"metrics-collection",children:"Metrics Collection"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Area creation/execution rates"}),"\n",(0,t.jsx)(n.li,{children:"Success/failure ratios"}),"\n",(0,t.jsx)(n.li,{children:"Response times"}),"\n",(0,t.jsx)(n.li,{children:"Worker queue sizes"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Database connectivity"}),"\n",(0,t.jsx)(n.li,{children:"Redis connectivity"}),"\n",(0,t.jsx)(n.li,{children:"External service availability"}),"\n",(0,t.jsx)(n.li,{children:"Worker process health"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Structured logging with correlation IDs"}),"\n",(0,t.jsx)(n.li,{children:"Execution audit trails"}),"\n",(0,t.jsx)(n.li,{children:"Error tracking and alerting"}),"\n",(0,t.jsx)(n.li,{children:"Performance monitoring"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>s});var a=i(6540);const t={},r=a.createContext(t);function c(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);