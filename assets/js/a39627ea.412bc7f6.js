"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[3389],{8234:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guides/data-migration-guide","title":"Data Migration Guide","description":"This guide explains how to perform database migrations in the AREA Backend project using Flyway.","source":"@site/docs/guides/data-migration-guide.md","sourceDirName":"guides","slug":"/guides/data-migration-guide","permalink":"/AREA_Back/docs/guides/data-migration-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/guides/data-migration-guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Checkstyle Guide","permalink":"/AREA_Back/docs/guides/checkstyle-guide"},"next":{"title":"Database Migrations Guide","permalink":"/AREA_Back/docs/guides/database-migrations-guide"}}');var r=i(4848),a=i(8453);const l={},t="Data Migration Guide",o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Migration System",id:"migration-system",level:2},{value:"Flyway Configuration",id:"flyway-configuration",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"Migration Location",id:"migration-location",level:3},{value:"Migration File Structure",id:"migration-file-structure",level:2},{value:"Naming Convention",id:"naming-convention",level:3},{value:"Version Numbers",id:"version-numbers",level:3},{value:"File Format",id:"file-format",level:3},{value:"Creating Migrations",id:"creating-migrations",level:2},{value:"Step 1: Analyze Requirements",id:"step-1-analyze-requirements",level:3},{value:"Step 2: Create Migration File",id:"step-2-create-migration-file",level:3},{value:"Step 3: Write Migration SQL",id:"step-3-write-migration-sql",level:3},{value:"Migration Best Practices",id:"migration-best-practices",level:2},{value:"1. Atomic Changes",id:"1-atomic-changes",level:3},{value:"2. Backwards Compatibility",id:"2-backwards-compatibility",level:3},{value:"3. Data Safety",id:"3-data-safety",level:3},{value:"4. Performance Considerations",id:"4-performance-considerations",level:3},{value:"5. Error Handling",id:"5-error-handling",level:3},{value:"Advanced Migration Techniques",id:"advanced-migration-techniques",level:2},{value:"1. Data Transformation",id:"1-data-transformation",level:3},{value:"2. Complex Schema Changes",id:"2-complex-schema-changes",level:3},{value:"3. Conditional Migrations",id:"3-conditional-migrations",level:3},{value:"Testing Migrations",id:"testing-migrations",level:2},{value:"1. Local Testing",id:"1-local-testing",level:3},{value:"2. Migration Testing Framework",id:"2-migration-testing-framework",level:3},{value:"3. Data Migration Testing",id:"3-data-migration-testing",level:3},{value:"Rollback Strategies",id:"rollback-strategies",level:2},{value:"1. Preventive Measures",id:"1-preventive-measures",level:3},{value:"2. Compensating Migrations",id:"2-compensating-migrations",level:3},{value:"3. Feature Flags for Rollback",id:"3-feature-flags-for-rollback",level:3},{value:"Production Deployment",id:"production-deployment",level:2},{value:"1. Pre-deployment Checklist",id:"1-pre-deployment-checklist",level:3},{value:"2. Deployment Process",id:"2-deployment-process",level:3},{value:"3. Zero-Downtime Migrations",id:"3-zero-downtime-migrations",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Best Practices for Troubleshooting",id:"best-practices-for-troubleshooting",level:3},{value:"Recovery Procedures",id:"recovery-procedures",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"data-migration-guide",children:"Data Migration Guide"})}),"\n",(0,r.jsx)(n.p,{children:"This guide explains how to perform database migrations in the AREA Backend project using Flyway."}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#migration-system",children:"Migration System"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#migration-file-structure",children:"Migration File Structure"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#creating-migrations",children:"Creating Migrations"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#migration-best-practices",children:"Migration Best Practices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#advanced-migration-techniques",children:"Advanced Migration Techniques"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#testing-migrations",children:"Testing Migrations"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#rollback-strategies",children:"Rollback Strategies"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#production-deployment",children:"Production Deployment"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The AREA Backend project uses Flyway for database schema versioning and migration management. Flyway automatically applies database changes in a controlled, versioned manner."}),"\n",(0,r.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Version Control"}),": Database schema changes are versioned and tracked"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automatic Execution"}),": Migrations run automatically on application startup"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistency"}),": Ensures all environments have the same database structure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Safety"}),": Prevents accidental overwrites and maintains migration history"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"migration-system",children:"Migration System"}),"\n",(0,r.jsx)(n.h3,{id:"flyway-configuration",children:"Flyway Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Flyway is configured in the Spring Boot application with these settings:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# application.yml\nspring:\n  flyway:\n    enabled: true\n    locations: classpath:db/migration\n    baseline-on-migrate: true\n    validate-on-migrate: true\n    out-of-order: false\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gradle",children:"implementation 'org.flywaydb:flyway-core'\nimplementation 'org.flywaydb:flyway-database-postgresql'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"migration-location",children:"Migration Location"}),"\n",(0,r.jsx)(n.p,{children:"All migration files are stored in:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"src/main/resources/db/migration/\n"})}),"\n",(0,r.jsx)(n.h2,{id:"migration-file-structure",children:"Migration File Structure"}),"\n",(0,r.jsx)(n.h3,{id:"naming-convention",children:"Naming Convention"}),"\n",(0,r.jsx)(n.p,{children:"Migration files must follow this pattern:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"V{version}__{description}.sql\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"V1__Initial_schema.sql"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"V2__Add_user_email_index.sql"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"V3__Create_area_table.sql"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"V4__Add_service_auth_fields.sql"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"version-numbers",children:"Version Numbers"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Major versions"}),": ",(0,r.jsx)(n.code,{children:"V1"}),", ",(0,r.jsx)(n.code,{children:"V2"}),", ",(0,r.jsx)(n.code,{children:"V3"})," for significant changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Minor versions"}),": ",(0,r.jsx)(n.code,{children:"V1.1"}),", ",(0,r.jsx)(n.code,{children:"V1.2"})," for small updates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Patch versions"}),": ",(0,r.jsx)(n.code,{children:"V1.1.1"}),", ",(0,r.jsx)(n.code,{children:"V1.1.2"})," for hotfixes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"file-format",children:"File Format"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- ============================================\n-- Migration: V2__Add_user_email_index\n-- Description: Add index on user email for performance\n-- Author: Developer Name\n-- Date: 2025-01-15\n-- ============================================\n\n-- Add index for faster email lookups\nCREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_email \nON users(email);\n\n-- Add constraint for email uniqueness\nALTER TABLE users \nADD CONSTRAINT uk_users_email \nUNIQUE (email);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-migrations",children:"Creating Migrations"}),"\n",(0,r.jsx)(n.h3,{id:"step-1-analyze-requirements",children:"Step 1: Analyze Requirements"}),"\n",(0,r.jsx)(n.p,{children:"Before creating a migration, consider:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"What database changes are needed?"}),"\n",(0,r.jsx)(n.li,{children:"Will this affect existing data?"}),"\n",(0,r.jsx)(n.li,{children:"Are there dependencies on other changes?"}),"\n",(0,r.jsx)(n.li,{children:"How will this affect application code?"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"step-2-create-migration-file",children:"Step 2: Create Migration File"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Determine version number:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check existing migrations\nls src/main/resources/db/migration/\n# V1__Initial_schema.sql\n# V2__Fix_action_definition_description_column.sql\n\n# Next version would be V3\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create new migration file:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"touch src/main/resources/db/migration/V3__Add_user_preferences_table.sql\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"step-3-write-migration-sql",children:"Step 3: Write Migration SQL"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- ============================================\n-- Migration: V3__Add_user_preferences_table\n-- Description: Add user preferences table for customizable settings\n-- ============================================\n\n-- Create user_preferences table\nCREATE TABLE user_preferences (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID NOT NULL,\n    preference_key VARCHAR(100) NOT NULL,\n    preference_value TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \n    -- Foreign key constraint\n    CONSTRAINT fk_user_preferences_user_id \n        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    \n    -- Unique constraint for user-preference combination\n    CONSTRAINT uk_user_preferences_user_key \n        UNIQUE (user_id, preference_key)\n);\n\n-- Create indexes for performance\nCREATE INDEX idx_user_preferences_user_id ON user_preferences(user_id);\nCREATE INDEX idx_user_preferences_key ON user_preferences(preference_key);\n\n-- Insert default preferences for existing users\nINSERT INTO user_preferences (user_id, preference_key, preference_value)\nSELECT id, 'theme', 'light'\nFROM users\nWHERE id NOT IN (\n    SELECT DISTINCT user_id \n    FROM user_preferences \n    WHERE preference_key = 'theme'\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"migration-best-practices",children:"Migration Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-atomic-changes",children:"1. Atomic Changes"}),"\n",(0,r.jsx)(n.p,{children:"Each migration should contain related changes only:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- GOOD - Single focused change\n-- V4__Add_service_authentication.sql\nALTER TABLE services ADD COLUMN auth_type VARCHAR(50);\nALTER TABLE services ADD COLUMN auth_config JSONB;\nCREATE INDEX idx_services_auth_type ON services(auth_type);\n\n-- BAD - Multiple unrelated changes\n-- V4__Various_changes.sql\nALTER TABLE services ADD COLUMN auth_type VARCHAR(50);\nCREATE TABLE notifications (...);\nDROP INDEX old_unused_index;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-backwards-compatibility",children:"2. Backwards Compatibility"}),"\n",(0,r.jsx)(n.p,{children:"Avoid breaking changes when possible:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- GOOD - Additive change\nALTER TABLE users ADD COLUMN phone_number VARCHAR(20);\n\n-- RISKY - Removing column (can break application)\nALTER TABLE users DROP COLUMN old_field;\n\n-- BETTER - Deprecate first, remove later\n-- V5__Deprecate_old_field.sql\nALTER TABLE users ADD COLUMN old_field_deprecated BOOLEAN DEFAULT TRUE;\n\n-- V6__Remove_deprecated_field.sql (in future release)\nALTER TABLE users DROP COLUMN old_field;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-data-safety",children:"3. Data Safety"}),"\n",(0,r.jsx)(n.p,{children:"Always backup and handle data carefully:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create backup before major changes\nCREATE TABLE users_backup AS SELECT * FROM users;\n\n-- Modify data safely\nUPDATE users \nSET email = LOWER(email) \nWHERE email != LOWER(email);\n\n-- Verify changes\nDO $$\nBEGIN\n    IF (SELECT COUNT(*) FROM users WHERE email ~ '[A-Z]') > 0 THEN\n        RAISE EXCEPTION 'Migration failed: uppercase emails still exist';\n    END IF;\nEND $$;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-performance-considerations",children:"4. Performance Considerations"}),"\n",(0,r.jsx)(n.p,{children:"Use non-blocking operations when possible:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- GOOD - Non-blocking index creation\nCREATE INDEX CONCURRENTLY idx_users_created_at ON users(created_at);\n\n-- RISKY - Blocking operation on large table\nCREATE INDEX idx_users_created_at ON users(created_at);\n\n-- Add columns with defaults efficiently\nALTER TABLE users ADD COLUMN status VARCHAR(20) DEFAULT 'active';\n-- For large tables, consider:\n-- 1. Add column without default\n-- 2. Update in batches\n-- 3. Set default for new rows\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-error-handling",children:"5. Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"Include validation and error handling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Validate preconditions\nDO $$\nBEGIN\n    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'users') THEN\n        RAISE EXCEPTION 'Users table does not exist';\n    END IF;\nEND $$;\n\n-- Perform migration with error handling\nDO $$\nBEGIN\n    -- Migration logic here\n    \nEXCEPTION\n    WHEN OTHERS THEN\n        RAISE NOTICE 'Migration failed: %', SQLERRM;\n        RAISE;\nEND $$;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-migration-techniques",children:"Advanced Migration Techniques"}),"\n",(0,r.jsx)(n.h3,{id:"1-data-transformation",children:"1. Data Transformation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- V7__Normalize_user_data.sql\n\n-- Create normalized tables\nCREATE TABLE user_addresses (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID NOT NULL,\n    address_line1 VARCHAR(255),\n    address_line2 VARCHAR(255),\n    city VARCHAR(100),\n    postal_code VARCHAR(20),\n    country VARCHAR(100),\n    CONSTRAINT fk_user_addresses_user_id \n        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n\n-- Migrate existing address data\nINSERT INTO user_addresses (user_id, address_line1, city, postal_code, country)\nSELECT \n    id,\n    address,\n    city,\n    postal_code,\n    country\nFROM users \nWHERE address IS NOT NULL;\n\n-- Remove old columns (in separate migration)\n-- ALTER TABLE users DROP COLUMN address;\n-- ALTER TABLE users DROP COLUMN city;\n-- ALTER TABLE users DROP COLUMN postal_code;\n-- ALTER TABLE users DROP COLUMN country;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-complex-schema-changes",children:"2. Complex Schema Changes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- V8__Refactor_service_areas_relationship.sql\n\n-- Create junction table for many-to-many relationship\nCREATE TABLE service_area_mappings (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    service_id UUID NOT NULL,\n    area_id UUID NOT NULL,\n    mapping_type VARCHAR(50) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \n    CONSTRAINT fk_service_area_mappings_service_id \n        FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE,\n    CONSTRAINT fk_service_area_mappings_area_id \n        FOREIGN KEY (area_id) REFERENCES areas(id) ON DELETE CASCADE,\n    CONSTRAINT uk_service_area_mappings \n        UNIQUE (service_id, area_id, mapping_type)\n);\n\n-- Migrate existing relationships\nINSERT INTO service_area_mappings (service_id, area_id, mapping_type)\nSELECT \n    s.id,\n    a.id,\n    'trigger'\nFROM services s\nJOIN areas a ON a.trigger_service_id = s.id;\n\nINSERT INTO service_area_mappings (service_id, area_id, mapping_type)\nSELECT \n    s.id,\n    a.id,\n    'action'\nFROM services s\nJOIN areas a ON a.action_service_id = s.id;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-conditional-migrations",children:"3. Conditional Migrations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- V9__Add_feature_flags_if_not_exists.sql\n\n-- Check if feature already exists\nDO $$\nBEGIN\n    IF NOT EXISTS (\n        SELECT 1 FROM information_schema.columns \n        WHERE table_name = 'users' AND column_name = 'feature_flags'\n    ) THEN\n        ALTER TABLE users ADD COLUMN feature_flags JSONB DEFAULT '{}';\n        CREATE INDEX idx_users_feature_flags ON users USING gin(feature_flags);\n    END IF;\nEND $$;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-migrations",children:"Testing Migrations"}),"\n",(0,r.jsx)(n.h3,{id:"1-local-testing",children:"1. Local Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Reset database to clean state\ndocker-compose down\ndocker-compose up -d postgres\n\n# Run application to apply migrations\n./gradlew bootRun\n\n# Verify migration status\n# Check application logs for Flyway output\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-migration-testing-framework",children:"2. Migration Testing Framework"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Test class for migration verification\n@SpringBootTest\n@Testcontainers\nclass MigrationTest {\n\n    @Container\n    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>(\"postgres:15\");\n\n    @Test\n    void shouldApplyAllMigrationsSuccessfully() {\n        // Migration is applied automatically by Spring Boot\n        // Verify database state\n        \n        // Check table exists\n        assertThat(jdbcTemplate.queryForObject(\n            \"SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'users'\", \n            Integer.class)).isEqualTo(1);\n            \n        // Check specific columns exist\n        assertThat(jdbcTemplate.queryForObject(\n            \"SELECT COUNT(*) FROM information_schema.columns WHERE table_name = 'users' AND column_name = 'email'\", \n            Integer.class)).isEqualTo(1);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-data-migration-testing",children:"3. Data Migration Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Test data for migration verification\n-- test-data.sql\n\nINSERT INTO users (id, email, username, password_hash) VALUES\n    ('550e8400-e29b-41d4-a716-446655440001', 'test1@example.com', 'user1', 'hash1'),\n    ('550e8400-e29b-41d4-a716-446655440002', 'test2@example.com', 'user2', 'hash2');\n\n-- Verify migration results\nSELECT * FROM user_preferences WHERE user_id = '550e8400-e29b-41d4-a716-446655440001';\n"})}),"\n",(0,r.jsx)(n.h2,{id:"rollback-strategies",children:"Rollback Strategies"}),"\n",(0,r.jsx)(n.h3,{id:"1-preventive-measures",children:"1. Preventive Measures"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Always create backups before destructive operations\nCREATE TABLE users_backup_v3 AS SELECT * FROM users;\n\n-- Document rollback procedures in migration comments\n-- ROLLBACK PROCEDURE:\n-- 1. Stop application\n-- 2. RESTORE FROM users_backup_v3\n-- 3. DELETE FROM flyway_schema_history WHERE version = '3'\n-- 4. Restart application with previous version\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-compensating-migrations",children:"2. Compensating Migrations"}),"\n",(0,r.jsx)(n.p,{children:"Since Flyway doesn't support automatic rollbacks, create compensating migrations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- V10__Remove_user_preferences_table.sql (rollback for V3)\n\n-- Remove foreign key constraints first\nALTER TABLE user_preferences DROP CONSTRAINT fk_user_preferences_user_id;\n\n-- Drop indexes\nDROP INDEX IF EXISTS idx_user_preferences_user_id;\nDROP INDEX IF EXISTS idx_user_preferences_key;\n\n-- Drop table\nDROP TABLE IF EXISTS user_preferences;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-feature-flags-for-rollback",children:"3. Feature Flags for Rollback"}),"\n",(0,r.jsx)(n.p,{children:"Use feature flags to safely rollback functionality:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- V11__Add_feature_toggle_support.sql\n\nALTER TABLE users ADD COLUMN feature_flags JSONB DEFAULT '{\"new_preferences_ui\": false}';\n\n-- Application can check feature flags before using new functionality\n-- SELECT feature_flags->>'new_preferences_ui' FROM users WHERE id = ?;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"production-deployment",children:"Production Deployment"}),"\n",(0,r.jsx)(n.h3,{id:"1-pre-deployment-checklist",children:"1. Pre-deployment Checklist"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test migration on production-like data volume"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Verify migration is idempotent"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Create database backup"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Estimate migration execution time"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Plan rollback strategy"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Notify stakeholders of potential downtime"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-deployment-process",children:"2. Deployment Process"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 1. Create backup\npg_dump -h localhost -U area_user area_db > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# 2. Deploy application (migrations run automatically)\n# Monitor logs for migration progress\n\n# 3. Verify deployment\ncurl -f http://localhost:8080/actuator/health\n\n# 4. Check migration status in database\nSELECT * FROM flyway_schema_history ORDER BY installed_rank DESC LIMIT 5;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-zero-downtime-migrations",children:"3. Zero-Downtime Migrations"}),"\n",(0,r.jsx)(n.p,{children:"For large tables, consider multi-step migrations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Step 1: V12__Add_new_column_nullable.sql\nALTER TABLE users ADD COLUMN new_field VARCHAR(100);\n\n-- Step 2: Deploy application code that can handle both old and new schema\n\n-- Step 3: V13__Populate_new_column.sql\nUPDATE users SET new_field = old_field WHERE new_field IS NULL;\n\n-- Step 4: V14__Make_new_column_required.sql\nALTER TABLE users ALTER COLUMN new_field SET NOT NULL;\n\n-- Step 5: Deploy application code that only uses new column\n\n-- Step 6: V15__Remove_old_column.sql\nALTER TABLE users DROP COLUMN old_field;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Migration Checksum Mismatch"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ERROR: Migration checksum mismatch for migration version 2\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Fix checksum in flyway_schema_history\nUPDATE flyway_schema_history \nSET checksum = <new_checksum> \nWHERE version = '2';\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Failed Migration"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ERROR: Migration V3__Add_user_preferences_table.sql failed\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Check failed migration status\nSELECT * FROM flyway_schema_history WHERE success = false;\n\n-- Clean up partial changes\n-- (Run cleanup SQL specific to your migration)\n\n-- Remove failed migration record\nDELETE FROM flyway_schema_history WHERE version = '3';\n\n-- Fix migration file and retry\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Out of Order Migration"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ERROR: Detected applied migration not resolved locally\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Allow out-of-order migrations (use carefully)\nspring:\n  flyway:\n    out-of-order: true\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"best-practices-for-troubleshooting",children:"Best Practices for Troubleshooting"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Monitor Migration Logs"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Watch application logs during startup\ntail -f logs/application.log | grep -i flyway\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Database State Verification"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Check current schema version\nSELECT version, description, installed_on, success \nFROM flyway_schema_history \nORDER BY installed_rank DESC;\n\n-- Verify table structure\n\\d+ table_name  -- PostgreSQL\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Backup Strategy"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Automated backup before migration\n#!/bin/bash\nbackup_name="backup_$(date +%Y%m%d_%H%M%S).sql"\npg_dump -h $DB_HOST -U $DB_USER $DB_NAME > $backup_name\necho "Backup created: $backup_name"\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"recovery-procedures",children:"Recovery Procedures"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Partial Migration Failure"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Stop application"}),"\n",(0,r.jsx)(n.li,{children:"Assess database state"}),"\n",(0,r.jsx)(n.li,{children:"Clean up partial changes"}),"\n",(0,r.jsx)(n.li,{children:"Fix migration script"}),"\n",(0,r.jsx)(n.li,{children:"Remove failed migration from history"}),"\n",(0,r.jsx)(n.li,{children:"Restart application"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Complete System Failure"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Restore from backup"}),"\n",(0,r.jsx)(n.li,{children:"Update flyway_schema_history to previous state"}),"\n",(0,r.jsx)(n.li,{children:"Deploy previous application version"}),"\n",(0,r.jsx)(n.li,{children:"Investigate and fix migration issues"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This comprehensive guide should help you effectively manage database migrations in the AREA Backend project using Flyway."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var s=i(6540);const r={},a=s.createContext(r);function l(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);