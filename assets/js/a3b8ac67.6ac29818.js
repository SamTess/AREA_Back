"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[5568],{8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const c={},r=t.createContext(c);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},9269:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"technical/diagrams/service-integration-class-diagram","title":"Service Integration Architecture Class Diagram","description":"This diagram shows how external services are integrated and how actions/reactions are executed.","source":"@site/docs/technical/diagrams/03-service-integration-class-diagram.md","sourceDirName":"technical/diagrams","slug":"/technical/diagrams/service-integration-class-diagram","permalink":"/AREA_Back/docs/technical/diagrams/service-integration-class-diagram","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/technical/diagrams/03-service-integration-class-diagram.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Authentication System Class Diagram","permalink":"/AREA_Back/docs/technical/diagrams/authentication-class-diagram"},"next":{"title":"OAuth Authentication Flow - Sequence Diagram","permalink":"/AREA_Back/docs/technical/diagrams/oauth-flow-sequence"}}');var c=i(4848),r=i(8453);const o={},a="Service Integration Architecture Class Diagram",s={},l=[{value:"Component Descriptions",id:"component-descriptions",level:2},{value:"Service Integration Layer",id:"service-integration-layer",level:3},{value:"ActionExecutor (Interface)",id:"actionexecutor-interface",level:4},{value:"Service-Specific Executors",id:"service-specific-executors",level:4},{value:"ActionExecutorRegistry",id:"actionexecutorregistry",level:4},{value:"ServiceClient (Interface)",id:"serviceclient-interface",level:4},{value:"Execution Orchestration",id:"execution-orchestration",level:3},{value:"AreaExecutionService",id:"areaexecutionservice",level:4},{value:"WebhookHandler",id:"webhookhandler",level:4},{value:"CronScheduler",id:"cronscheduler",level:4},{value:"PollingService",id:"pollingservice",level:4},{value:"Data Models",id:"data-models",level:3},{value:"Service",id:"service",level:4},{value:"ActionDefinition",id:"actiondefinition",level:4},{value:"ActionInstance",id:"actioninstance",level:4},{value:"ActivationMode",id:"activationmode",level:4},{value:"ServiceAccount",id:"serviceaccount",level:4},{value:"Execution Flow",id:"execution-flow",level:2},{value:"1. Webhook-Triggered Execution",id:"1-webhook-triggered-execution",level:3},{value:"2. Cron-Scheduled Execution",id:"2-cron-scheduled-execution",level:3},{value:"3. Polling-Based Execution",id:"3-polling-based-execution",level:3},{value:"4. Manual Execution",id:"4-manual-execution",level:3},{value:"Key Features",id:"key-features",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"service-integration-architecture-class-diagram",children:"Service Integration Architecture Class Diagram"})}),"\n",(0,c.jsx)(n.p,{children:"This diagram shows how external services are integrated and how actions/reactions are executed."}),"\n",(0,c.jsx)(n.mermaid,{value:'classDiagram\n    class Service {\n        -UUID id\n        -String key\n        -String name\n        -AuthType auth\n        -String docsUrl\n        -Boolean isActive\n    }\n\n    class ActionDefinition {\n        -UUID id\n        -String key\n        -String name\n        -String description\n        -Map~String,Object~ inputSchema\n        -Map~String,Object~ outputSchema\n        -Boolean isEventCapable\n        -Boolean isExecutable\n        -String version\n        -Service service\n    }\n\n    class ActionInstance {\n        -UUID id\n        -String name\n        -Map~String,Object~ parameters\n        -Map~String,Object~ mapping\n        -Map~String,Object~ condition\n        -Boolean enabled\n        -ActionDefinition actionDefinition\n        -ServiceAccount serviceAccount\n    }\n\n    class ServiceAccount {\n        -UUID id\n        -String accountIdentifier\n        -String accessToken\n        -String refreshToken\n        -LocalDateTime tokenExpiresAt\n        -Boolean isActive\n        -Service service\n    }\n\n    class ActivationMode {\n        -UUID id\n        -ActivationModeType type\n        -Map~String,Object~ config\n        -Boolean enabled\n        -DedupStrategy dedup\n        -ActionInstance actionInstance\n    }\n\n    class ActionExecutor {\n        <<interface>>\n        +ExecutionResult execute(ActionInstance instance, Map context)\n        +Boolean supports(String serviceKey)\n    }\n\n    class GitHubActionExecutor {\n        <<service>>\n        +ExecutionResult execute(ActionInstance instance, Map context)\n        +Boolean supports(String serviceKey)\n        -GitHubClient client\n    }\n\n    class GmailActionExecutor {\n        <<service>>\n        +ExecutionResult execute(ActionInstance instance, Map context)\n        +Boolean supports(String serviceKey)\n        -GmailClient client\n    }\n\n    class SlackActionExecutor {\n        <<service>>\n        +ExecutionResult execute(ActionInstance instance, Map context)\n        +Boolean supports(String serviceKey)\n        -SlackClient client\n    }\n\n    class ActionExecutorRegistry {\n        <<service>>\n        -Map~String,ActionExecutor~ executors\n        +ActionExecutor getExecutor(String serviceKey)\n        +void registerExecutor(String serviceKey, ActionExecutor executor)\n    }\n\n    class WebhookHandler {\n        <<service>>\n        +void handleWebhook(String serviceKey, String eventType, Map payload)\n        -void processEvent(ActionInstance instance, Map payload)\n        -void triggerReactions(UUID areaId, Map context)\n    }\n\n    class CronScheduler {\n        <<service>>\n        +void scheduleAction(ActionInstance instance, String cronExpression)\n        +void unscheduleAction(UUID instanceId)\n        -void executeScheduledAction(UUID instanceId)\n    }\n\n    class PollingService {\n        <<service>>\n        +void startPolling(ActionInstance instance, Integer interval)\n        +void stopPolling(UUID instanceId)\n        -void pollAndExecute(UUID instanceId)\n    }\n\n    class AreaExecutionService {\n        <<service>>\n        +void executeArea(UUID areaId, Map triggerContext)\n        +void executeAction(UUID actionInstanceId, Map context)\n        -Map applyMapping(Map input, Map mapping)\n        -Boolean evaluateCondition(Map data, Map condition)\n    }\n\n    class ServiceClient {\n        <<interface>>\n        +T makeRequest(String endpoint, Map params, String accessToken)\n        +void refreshToken(ServiceAccount account)\n    }\n\n    %% Relationships\n    Service "1" --\x3e "*" ActionDefinition : provides\n    ActionDefinition "1" --\x3e "*" ActionInstance : templates\n    ActionInstance "1" --\x3e "0..1" ServiceAccount : authenticates_with\n    ActionInstance "1" --\x3e "*" ActivationMode : configured_by\n    ServiceAccount "*" --\x3e "1" Service : connects_to\n\n    ActionExecutor <|.. GitHubActionExecutor : implements\n    ActionExecutor <|.. GmailActionExecutor : implements\n    ActionExecutor <|.. SlackActionExecutor : implements\n    \n    ActionExecutorRegistry --\x3e ActionExecutor : manages\n    ActionExecutorRegistry --\x3e GitHubActionExecutor : registers\n    ActionExecutorRegistry --\x3e GmailActionExecutor : registers\n    ActionExecutorRegistry --\x3e SlackActionExecutor : registers\n\n    AreaExecutionService --\x3e ActionExecutorRegistry : uses\n    AreaExecutionService --\x3e ActionInstance : executes\n    \n    WebhookHandler --\x3e AreaExecutionService : triggers\n    CronScheduler --\x3e AreaExecutionService : triggers\n    PollingService --\x3e AreaExecutionService : triggers\n\n    GitHubActionExecutor --\x3e ServiceClient : uses\n    GmailActionExecutor --\x3e ServiceClient : uses\n    SlackActionExecutor --\x3e ServiceClient : uses\n\n    %% Enumerations\n    class ActivationModeType {\n        <<enumeration>>\n        WEBHOOK\n        CRON\n        POLL\n        MANUAL\n    }\n\n    class AuthType {\n        <<enumeration>>\n        OAUTH2\n        APIKEY\n        NONE\n    }\n\n    class DedupStrategy {\n        <<enumeration>>\n        NONE\n        SIMPLE\n        ADVANCED\n    }\n\n    ActivationMode --\x3e ActivationModeType : uses\n    ActivationMode --\x3e DedupStrategy : uses\n    Service --\x3e AuthType : uses'}),"\n",(0,c.jsx)(n.h2,{id:"component-descriptions",children:"Component Descriptions"}),"\n",(0,c.jsx)(n.h3,{id:"service-integration-layer",children:"Service Integration Layer"}),"\n",(0,c.jsx)(n.h4,{id:"actionexecutor-interface",children:"ActionExecutor (Interface)"}),"\n",(0,c.jsx)(n.p,{children:"Defines the contract for executing actions on external services. Each service has its own implementation."}),"\n",(0,c.jsx)(n.h4,{id:"service-specific-executors",children:"Service-Specific Executors"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"GitHubActionExecutor"}),": Handles GitHub API calls (create issue, star repo, etc.)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"GmailActionExecutor"}),": Manages Gmail operations (send email, search emails)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"SlackActionExecutor"}),": Handles Slack integrations (post message, create channel)"]}),"\n"]}),"\n",(0,c.jsx)(n.h4,{id:"actionexecutorregistry",children:"ActionExecutorRegistry"}),"\n",(0,c.jsx)(n.p,{children:"Central registry that maps service keys to their corresponding executors. Enables dynamic executor discovery."}),"\n",(0,c.jsx)(n.h4,{id:"serviceclient-interface",children:"ServiceClient (Interface)"}),"\n",(0,c.jsx)(n.p,{children:"Abstraction for making HTTP requests to external APIs with OAuth token management."}),"\n",(0,c.jsx)(n.h3,{id:"execution-orchestration",children:"Execution Orchestration"}),"\n",(0,c.jsx)(n.h4,{id:"areaexecutionservice",children:"AreaExecutionService"}),"\n",(0,c.jsx)(n.p,{children:"Main orchestrator for AREA execution. Handles the flow from trigger to reactions, applies data mapping and conditions."}),"\n",(0,c.jsx)(n.h4,{id:"webhookhandler",children:"WebhookHandler"}),"\n",(0,c.jsx)(n.p,{children:"Receives and processes webhook events from external services, triggering appropriate AREAs."}),"\n",(0,c.jsx)(n.h4,{id:"cronscheduler",children:"CronScheduler"}),"\n",(0,c.jsx)(n.p,{children:'Manages scheduled action execution based on cron expressions (e.g., "every day at 9 AM").'}),"\n",(0,c.jsx)(n.h4,{id:"pollingservice",children:"PollingService"}),"\n",(0,c.jsx)(n.p,{children:"Periodically polls external services for changes when webhooks aren't available."}),"\n",(0,c.jsx)(n.h3,{id:"data-models",children:"Data Models"}),"\n",(0,c.jsx)(n.h4,{id:"service",children:"Service"}),"\n",(0,c.jsx)(n.p,{children:"Represents a third-party integration with authentication configuration."}),"\n",(0,c.jsx)(n.h4,{id:"actiondefinition",children:"ActionDefinition"}),"\n",(0,c.jsx)(n.p,{children:"Template defining what an action can do, its inputs, and outputs."}),"\n",(0,c.jsx)(n.h4,{id:"actioninstance",children:"ActionInstance"}),"\n",(0,c.jsx)(n.p,{children:"User-configured instance of an action with specific parameters."}),"\n",(0,c.jsx)(n.h4,{id:"activationmode",children:"ActivationMode"}),"\n",(0,c.jsx)(n.p,{children:"Defines how an action is triggered (webhook, cron, poll, manual)."}),"\n",(0,c.jsx)(n.h4,{id:"serviceaccount",children:"ServiceAccount"}),"\n",(0,c.jsx)(n.p,{children:"OAuth credentials for accessing external service APIs."}),"\n",(0,c.jsx)(n.h2,{id:"execution-flow",children:"Execution Flow"}),"\n",(0,c.jsx)(n.h3,{id:"1-webhook-triggered-execution",children:"1. Webhook-Triggered Execution"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"External Service \u2192 Webhook \u2192 WebhookHandler \u2192 AreaExecutionService \u2192 ActionExecutor\n"})}),"\n",(0,c.jsx)(n.h3,{id:"2-cron-scheduled-execution",children:"2. Cron-Scheduled Execution"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"CronScheduler \u2192 AreaExecutionService \u2192 ActionExecutor\n"})}),"\n",(0,c.jsx)(n.h3,{id:"3-polling-based-execution",children:"3. Polling-Based Execution"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"PollingService \u2192 AreaExecutionService \u2192 ActionExecutor\n"})}),"\n",(0,c.jsx)(n.h3,{id:"4-manual-execution",children:"4. Manual Execution"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"User Request \u2192 AreaExecutionService \u2192 ActionExecutor\n"})}),"\n",(0,c.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Pluggable Architecture"}),": New services can be added by implementing ActionExecutor"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Multiple Activation Modes"}),": Supports webhooks, cron, polling, and manual triggers"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Data Mapping"}),": Transform trigger output to match reaction input schema"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Conditional Execution"}),": Evaluate conditions before executing reactions"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Token Management"}),": Automatic OAuth token refresh"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Deduplication"}),": Prevent duplicate executions of the same event"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}}}]);