"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[5320],{1165:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"technical/api-documentation","title":"API Documentation Guide","description":"Table of Contents","source":"@site/docs/technical/06-api-documentation.md","sourceDirName":"technical","slug":"/technical/api-documentation","permalink":"/docs/technical/api-documentation","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/technical/06-api-documentation.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Database Schema Documentation","permalink":"/docs/technical/database-schema"},"next":{"title":"Security Architecture Guide","permalink":"/docs/technical/security-guide"}}');var a=i(4848),t=i(8453);const r={},o="API Documentation Guide",c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"OpenAPI Configuration",id:"openapi-configuration",level:2},{value:"Configuration Class",id:"configuration-class",level:3},{value:"Documentation Annotations",id:"documentation-annotations",level:3},{value:"Authentication Endpoints",id:"authentication-endpoints",level:2},{value:"Register User",id:"register-user",level:3},{value:"Login User",id:"login-user",level:3},{value:"Refresh Token",id:"refresh-token",level:3},{value:"Logout User",id:"logout-user",level:3},{value:"Get Current User",id:"get-current-user",level:3},{value:"Verify Email",id:"verify-email",level:3},{value:"Forgot Password",id:"forgot-password",level:3},{value:"Reset Password",id:"reset-password",level:3},{value:"Area Management Endpoints",id:"area-management-endpoints",level:2},{value:"Create Basic Area",id:"create-basic-area",level:3},{value:"Create Area with Actions and Reactions",id:"create-area-with-actions-and-reactions",level:3},{value:"Get User Areas",id:"get-user-areas",level:3},{value:"Get Area by ID",id:"get-area-by-id",level:3},{value:"Update Area",id:"update-area",level:3},{value:"Delete Area",id:"delete-area",level:3},{value:"Get All Areas (Paginated)",id:"get-all-areas-paginated",level:3},{value:"Service Management Endpoints",id:"service-management-endpoints",level:2},{value:"Get All Services",id:"get-all-services",level:3},{value:"Get Enabled Services",id:"get-enabled-services",level:3},{value:"Get Service by ID",id:"get-service-by-id",level:3},{value:"Get Action Definitions",id:"get-action-definitions",level:3},{value:"OAuth Integration Endpoints",id:"oauth-integration-endpoints",level:2},{value:"Get OAuth Providers",id:"get-oauth-providers",level:3},{value:"OAuth Authorization",id:"oauth-authorization",level:3},{value:"OAuth Token Exchange",id:"oauth-token-exchange",level:3},{value:"Webhook Endpoints",id:"webhook-endpoints",level:2},{value:"GitHub Webhook",id:"github-webhook",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Standard Error Response Format",id:"standard-error-response-format",level:3},{value:"Common Error Codes",id:"common-error-codes",level:3},{value:"400 Bad Request",id:"400-bad-request",level:4},{value:"401 Unauthorized",id:"401-unauthorized",level:4},{value:"403 Forbidden",id:"403-forbidden",level:4},{value:"404 Not Found",id:"404-not-found",level:4},{value:"409 Conflict",id:"409-conflict",level:4},{value:"422 Unprocessable Entity",id:"422-unprocessable-entity",level:4},{value:"500 Internal Server Error",id:"500-internal-server-error",level:4},{value:"Request/Response Examples",id:"requestresponse-examples",level:2},{value:"Complete Area Creation Example",id:"complete-area-creation-example",level:3},{value:"Service Discovery Example",id:"service-discovery-example",level:3},{value:"API Testing",id:"api-testing",level:2},{value:"Using curl",id:"using-curl",level:3},{value:"Using JavaScript/Fetch",id:"using-javascriptfetch",level:3},{value:"Rate Limiting (Planned)",id:"rate-limiting-planned",level:2},{value:"API Versioning",id:"api-versioning",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"api-documentation-guide",children:"API Documentation Guide"})}),"\n",(0,a.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#openapi-configuration",children:"OpenAPI Configuration"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#authentication-endpoints",children:"Authentication Endpoints"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#area-management-endpoints",children:"Area Management Endpoints"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#service-management-endpoints",children:"Service Management Endpoints"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#oauth-integration-endpoints",children:"OAuth Integration Endpoints"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#webhook-endpoints",children:"Webhook Endpoints"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#error-handling",children:"Error Handling"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#requestresponse-examples",children:"Request/Response Examples"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"The AREA backend provides a comprehensive REST API documented with OpenAPI 3.0 (Swagger). The API follows RESTful principles with consistent patterns for resource management, error handling, and authentication."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Base URL"}),": ",(0,a.jsx)(n.code,{children:"http://localhost:8080/api"}),(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.strong,{children:"Documentation URL"}),": ",(0,a.jsx)(n.code,{children:"http://localhost:8080/swagger-ui.html"}),(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.strong,{children:"OpenAPI Spec"}),": ",(0,a.jsx)(n.code,{children:"http://localhost:8080/v3/api-docs"})]}),"\n",(0,a.jsx)(n.h2,{id:"openapi-configuration",children:"OpenAPI Configuration"}),"\n",(0,a.jsx)(n.h3,{id:"configuration-class",children:"Configuration Class"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class OpenApiConfig {\n    \n    @Bean\n    public OpenAPI customOpenAPI() {\n        return new OpenAPI()\n            .info(new Info()\n                .title("AREA Backend API")\n                .description("API for managing users, services, and areas in the AREA application")\n                .version("1.0.0")\n                .contact(new Contact()\n                    .name("AREA Team")\n                    .email("support@area.com"))\n                .license(new License()\n                    .name("MIT License")\n                    .url("https://opensource.org/licenses/MIT")))\n            .addSecurityItem(new SecurityRequirement().addList("cookieAuth"))\n            .components(new Components()\n                .addSecuritySchemes("cookieAuth", \n                    new SecurityScheme()\n                        .type(SecurityScheme.Type.APIKEY)\n                        .in(SecurityScheme.In.COOKIE)\n                        .name("authToken")));\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"documentation-annotations",children:"Documentation Annotations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/areas")\n@Tag(name = "Areas", description = "API for managing areas (automations)")\n@Slf4j\npublic class AreaController {\n    \n    @PostMapping("/with-actions")\n    @Operation(summary = "Create a new AREA automation with actions and reactions",\n               description = "Creates a new AREA with specified actions (triggers) and reactions. "\n                           + "Validates JSON schemas and creates necessary action instances.")\n    @ApiResponses(value = {\n        @ApiResponse(responseCode = "201", description = "AREA created successfully"),\n        @ApiResponse(responseCode = "400", description = "Invalid request data or validation failure"),\n        @ApiResponse(responseCode = "404", description = "User, action definition, or service account not found"),\n        @ApiResponse(responseCode = "401", description = "Unauthorized")\n    })\n    public ResponseEntity<AreaResponse> createAreaWithActions(\n            @Valid @RequestBody CreateAreaWithActionsRequest request,\n            HttpServletRequest httpRequest) {\n        // Implementation\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"authentication-endpoints",children:"Authentication Endpoints"}),"\n",(0,a.jsx)(n.h3,{id:"register-user",children:"Register User"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'POST /api/auth/register\nContent-Type: application/json\n\n{\n    "email": "user@example.com",\n    "password": "securePassword123"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (201 Created):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "accessToken": "jwt-access-token",\n    "refreshToken": "jwt-refresh-token",\n    "user": {\n        "id": "123e4567-e89b-12d3-a456-426614174000",\n        "email": "user@example.com",\n        "isActive": true,\n        "isAdmin": false,\n        "createdAt": "2024-01-01T10:00:00Z"\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"login-user",children:"Login User"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'POST /api/auth/login\nContent-Type: application/json\n\n{\n    "email": "user@example.com", \n    "password": "securePassword123"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "accessToken": "jwt-access-token",\n    "refreshToken": "jwt-refresh-token",\n    "user": {\n        "id": "123e4567-e89b-12d3-a456-426614174000",\n        "email": "user@example.com",\n        "isActive": true,\n        "isAdmin": false,\n        "lastLoginAt": "2024-01-01T10:30:00Z"\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"refresh-token",children:"Refresh Token"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'POST /api/auth/refresh\nContent-Type: application/json\n\n{\n    "refreshToken": "jwt-refresh-token"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"logout-user",children:"Logout User"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"POST /api/auth/logout\nCookie: authToken=jwt-access-token; refreshToken=jwt-refresh-token\n"})}),"\n",(0,a.jsx)(n.h3,{id:"get-current-user",children:"Get Current User"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/auth/me\nCookie: authToken=jwt-access-token\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "id": "123e4567-e89b-12d3-a456-426614174000",\n    "email": "user@example.com",\n    "isActive": true,\n    "isAdmin": false,\n    "avatarUrl": "https://example.com/avatar.jpg",\n    "createdAt": "2024-01-01T10:00:00Z",\n    "lastLoginAt": "2024-01-01T10:30:00Z"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"verify-email",children:"Verify Email"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/auth/verify?token=verification_token_here\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "message": "Email verified successfully",\n    "user": {\n        "id": "123e4567-e89b-12d3-a456-426614174000",\n        "email": "user@example.com",\n        "isActive": true,\n        "isAdmin": false\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (400 Bad Request - Invalid/Expired Token):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "message": "Invalid or expired verification token"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"forgot-password",children:"Forgot Password"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'POST /api/auth/forgot-password\nContent-Type: application/json\n\n{\n    "email": "user@example.com"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "message": "If an account with this email exists, a password reset link has been sent"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"reset-password",children:"Reset Password"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'POST /api/auth/reset-password\nContent-Type: application/json\n\n{\n    "token": "reset_token_here",\n    "newPassword": "newSecurePassword123"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "message": "Password reset successfully"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (400 Bad Request - Invalid/Expired Token):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "message": "Invalid or expired reset token"\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"area-management-endpoints",children:"Area Management Endpoints"}),"\n",(0,a.jsx)(n.h3,{id:"create-basic-area",children:"Create Basic Area"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'POST /api/areas\nContent-Type: application/json\nCookie: authToken=jwt-access-token\n\n{\n    "name": "My First Area",\n    "description": "Basic automation area",\n    "userId": "123e4567-e89b-12d3-a456-426614174000"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (201 Created):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "id": "456e7890-e89b-12d3-a456-426614174001",\n    "name": "My First Area",\n    "description": "Basic automation area",\n    "enabled": true,\n    "user": {\n        "id": "123e4567-e89b-12d3-a456-426614174000",\n        "email": "user@example.com"\n    },\n    "actions": [],\n    "reactions": [],\n    "createdAt": "2024-01-01T11:00:00Z",\n    "updatedAt": "2024-01-01T11:00:00Z"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-area-with-actions-and-reactions",children:"Create Area with Actions and Reactions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'POST /api/areas/with-actions\nContent-Type: application/json\nCookie: authToken=jwt-access-token\n\n{\n    "name": "GitHub to Slack Integration",\n    "description": "Send Slack notification when GitHub issue is created",\n    "userId": "123e4567-e89b-12d3-a456-426614174000",\n    "actions": [\n        {\n            "actionDefinitionId": "789e0123-e89b-12d3-a456-426614174002",\n            "serviceAccountId": "abc12345-e89b-12d3-a456-426614174003",\n            "parameters": {\n                "repository": "owner/repo",\n                "event_types": ["opened", "reopened"]\n            }\n        }\n    ],\n    "reactions": [\n        {\n            "actionDefinitionId": "def45678-e89b-12d3-a456-426614174004",\n            "serviceAccountId": "ghi90123-e89b-12d3-a456-426614174005",\n            "parameters": {\n                "channel": "#notifications",\n                "template": "New issue: {{issue.title}} - {{issue.url}}"\n            }\n        }\n    ]\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"get-user-areas",children:"Get User Areas"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/areas/user/123e4567-e89b-12d3-a456-426614174000?page=0&size=20&sortBy=createdAt&sortDir=desc\nCookie: authToken=jwt-access-token\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "id": "456e7890-e89b-12d3-a456-426614174001",\n        "name": "GitHub to Slack Integration",\n        "description": "Send Slack notification when GitHub issue is created",\n        "enabled": true,\n        "actions": [\n            {\n                "actionDefinitionId": "789e0123-e89b-12d3-a456-426614174002",\n                "actionDefinitionName": "GitHub Issue Created",\n                "serviceKey": "github",\n                "parameters": {\n                    "repository": "owner/repo",\n                    "event_types": ["opened", "reopened"]\n                }\n            }\n        ],\n        "reactions": [\n            {\n                "actionDefinitionId": "def45678-e89b-12d3-a456-426614174004",\n                "actionDefinitionName": "Slack Send Message",\n                "serviceKey": "slack",\n                "parameters": {\n                    "channel": "#notifications",\n                    "template": "New issue: {{issue.title}} - {{issue.url}}"\n                }\n            }\n        ],\n        "createdAt": "2024-01-01T11:00:00Z",\n        "updatedAt": "2024-01-01T11:00:00Z"\n    }\n]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"get-area-by-id",children:"Get Area by ID"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/areas/456e7890-e89b-12d3-a456-426614174001\nCookie: authToken=jwt-access-token\n"})}),"\n",(0,a.jsx)(n.h3,{id:"update-area",children:"Update Area"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'PUT /api/areas/456e7890-e89b-12d3-a456-426614174001\nContent-Type: application/json\nCookie: authToken=jwt-access-token\n\n{\n    "name": "Updated Area Name",\n    "description": "Updated description",\n    "enabled": true\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"delete-area",children:"Delete Area"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"DELETE /api/areas/456e7890-e89b-12d3-a456-426614174001\nCookie: authToken=jwt-access-token\n"})}),"\n",(0,a.jsx)(n.h3,{id:"get-all-areas-paginated",children:"Get All Areas (Paginated)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/areas?page=0&size=20&sortBy=createdAt&sortDir=desc\nCookie: authToken=jwt-access-token\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "content": [\n        {\n            "id": "456e7890-e89b-12d3-a456-426614174001",\n            "name": "GitHub to Slack Integration",\n            "enabled": true,\n            "user": {\n                "id": "123e4567-e89b-12d3-a456-426614174000",\n                "email": "user@example.com"\n            },\n            "createdAt": "2024-01-01T11:00:00Z"\n        }\n    ],\n    "pageable": {\n        "pageNumber": 0,\n        "pageSize": 20,\n        "sort": {\n            "sorted": true,\n            "direction": "DESC",\n            "properties": ["createdAt"]\n        }\n    },\n    "totalElements": 1,\n    "totalPages": 1,\n    "first": true,\n    "last": true,\n    "numberOfElements": 1\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"service-management-endpoints",children:"Service Management Endpoints"}),"\n",(0,a.jsx)(n.h3,{id:"get-all-services",children:"Get All Services"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/services?page=0&size=20&sortBy=name&sortDir=asc\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "content": [\n        {\n            "id": "service-123e-4567-e89b-12d3a456",\n            "key": "github",\n            "name": "GitHub",\n            "auth": "OAUTH2",\n            "docsUrl": "https://docs.github.com/en/rest",\n            "iconLightUrl": "https://github.com/favicon.ico",\n            "iconDarkUrl": "https://github.com/favicon-dark.ico",\n            "isActive": true,\n            "createdAt": "2024-01-01T00:00:00Z"\n        },\n        {\n            "id": "service-456e-7890-e89b-12d3a456",\n            "key": "slack",\n            "name": "Slack",\n            "auth": "OAUTH2",\n            "docsUrl": "https://api.slack.com/web",\n            "iconLightUrl": "https://slack.com/favicon.ico",\n            "iconDarkUrl": "https://slack.com/favicon-dark.ico",\n            "isActive": true,\n            "createdAt": "2024-01-01T00:00:00Z"\n        }\n    ],\n    "pageable": {\n        "pageNumber": 0,\n        "pageSize": 20\n    },\n    "totalElements": 2,\n    "totalPages": 1\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"get-enabled-services",children:"Get Enabled Services"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/services/catalog/enabled\n"})}),"\n",(0,a.jsx)(n.h3,{id:"get-service-by-id",children:"Get Service by ID"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/services/service-123e-4567-e89b-12d3a456\n"})}),"\n",(0,a.jsx)(n.h3,{id:"get-action-definitions",children:"Get Action Definitions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/action-definitions?page=0&size=50&serviceKey=github\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "content": [\n        {\n            "id": "789e0123-e89b-12d3-a456-426614174002",\n            "key": "github-issue-created",\n            "name": "GitHub Issue Created",\n            "description": "Triggered when a new issue is created in a repository",\n            "serviceKey": "github",\n            "isEventCapable": true,\n            "isExecutable": false,\n            "inputSchema": {\n                "type": "object",\n                "properties": {\n                    "repository": {\n                        "type": "string",\n                        "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",\n                        "description": "Repository in format owner/repo"\n                    },\n                    "event_types": {\n                        "type": "array",\n                        "items": {\n                            "type": "string",\n                            "enum": ["opened", "closed", "reopened", "edited"]\n                        },\n                        "description": "Issue events to monitor"\n                    }\n                },\n                "required": ["repository"]\n            },\n            "outputSchema": {\n                "type": "object",\n                "properties": {\n                    "issue": {\n                        "type": "object",\n                        "properties": {\n                            "id": {"type": "number"},\n                            "title": {"type": "string"},\n                            "body": {"type": "string"},\n                            "url": {"type": "string"},\n                            "state": {"type": "string"},\n                            "author": {"type": "string"}\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"oauth-integration-endpoints",children:"OAuth Integration Endpoints"}),"\n",(0,a.jsx)(n.h3,{id:"get-oauth-providers",children:"Get OAuth Providers"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/oauth/providers\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "key": "github",\n        "label": "GitHub",\n        "logoUrl": "https://github.com/favicon.ico",\n        "authorizeUrl": "/api/oauth/github/authorize"\n    },\n    {\n        "key": "google",\n        "label": "Google",\n        "logoUrl": "https://google.com/favicon.ico",\n        "authorizeUrl": "/api/oauth/google/authorize"\n    }\n]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"oauth-authorization",children:"OAuth Authorization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/oauth/github/authorize\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (302 Found):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Location: https://github.com/login/oauth/authorize?client_id=xxx&scope=repo&state=random-state\n"})}),"\n",(0,a.jsx)(n.h3,{id:"oauth-token-exchange",children:"OAuth Token Exchange"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'POST /api/oauth/github/exchange\nContent-Type: application/json\n\n{\n    "code": "authorization_code_from_github"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "accessToken": "jwt-access-token",\n    "refreshToken": "jwt-refresh-token", \n    "user": {\n        "id": "123e4567-e89b-12d3-a456-426614174000",\n        "email": "user@example.com",\n        "avatarUrl": "https://avatars.githubusercontent.com/u/12345"\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"webhook-endpoints",children:"Webhook Endpoints"}),"\n",(0,a.jsx)(n.h3,{id:"github-webhook",children:"GitHub Webhook"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'POST /api/webhooks/github\nX-GitHub-Event: issues\nX-GitHub-Delivery: 12345678-1234-1234-1234-123456789abc\nX-Hub-Signature-256: sha256=signature_hash\nContent-Type: application/json\n\n{\n    "action": "opened",\n    "issue": {\n        "id": 123,\n        "number": 1,\n        "title": "Bug found in login system",\n        "body": "When users try to login with special characters...",\n        "state": "open",\n        "html_url": "https://github.com/owner/repo/issues/1",\n        "user": {\n            "login": "username",\n            "avatar_url": "https://avatars.githubusercontent.com/u/12345"\n        }\n    },\n    "repository": {\n        "id": 456,\n        "name": "repo",\n        "full_name": "owner/repo",\n        "html_url": "https://github.com/owner/repo"\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "message": "Webhook processed successfully",\n    "deliveryId": "12345678-1234-1234-1234-123456789abc",\n    "processedAt": "2024-01-01T12:00:00Z"\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.h3,{id:"standard-error-response-format",children:"Standard Error Response Format"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "error": "ERROR_CODE",\n    "message": "Human-readable error message",\n    "details": {\n        "field": "specific_field",\n        "rejectedValue": "invalid_value",\n        "additionalInfo": "Extra context"\n    },\n    "timestamp": "2024-01-01T12:00:00Z",\n    "path": "/api/areas"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"common-error-codes",children:"Common Error Codes"}),"\n",(0,a.jsx)(n.h4,{id:"400-bad-request",children:"400 Bad Request"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "error": "VALIDATION_ERROR",\n    "message": "Invalid request data",\n    "details": {\n        "field": "email",\n        "rejectedValue": "invalid-email",\n        "message": "Email should be valid"\n    },\n    "timestamp": "2024-01-01T12:00:00Z",\n    "path": "/api/auth/register"\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"401-unauthorized",children:"401 Unauthorized"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "error": "AUTHENTICATION_REQUIRED",\n    "message": "Authentication token is required",\n    "timestamp": "2024-01-01T12:00:00Z",\n    "path": "/api/areas"\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"403-forbidden",children:"403 Forbidden"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "error": "ACCESS_DENIED",\n    "message": "Insufficient permissions to access this resource",\n    "details": {\n        "requiredRole": "ADMIN",\n        "currentRole": "USER"\n    },\n    "timestamp": "2024-01-01T12:00:00Z",\n    "path": "/api/admin/users"\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"404-not-found",children:"404 Not Found"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "error": "RESOURCE_NOT_FOUND",\n    "message": "Area not found",\n    "details": {\n        "resourceType": "Area",\n        "resourceId": "456e7890-e89b-12d3-a456-426614174001"\n    },\n    "timestamp": "2024-01-01T12:00:00Z",\n    "path": "/api/areas/456e7890-e89b-12d3-a456-426614174001"\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"409-conflict",children:"409 Conflict"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "error": "RESOURCE_CONFLICT",\n    "message": "Email already registered",\n    "details": {\n        "field": "email",\n        "conflictingValue": "user@example.com"\n    },\n    "timestamp": "2024-01-01T12:00:00Z",\n    "path": "/api/auth/register"\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"422-unprocessable-entity",children:"422 Unprocessable Entity"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "error": "JSON_SCHEMA_VALIDATION_ERROR",\n    "message": "Action parameters validation failed",\n    "details": {\n        "actionDefinitionId": "789e0123-e89b-12d3-a456-426614174002",\n        "validationErrors": [\n            {\n                "field": "repository",\n                "message": "Repository format must be owner/repo",\n                "rejectedValue": "invalid-repo-name"\n            }\n        ]\n    },\n    "timestamp": "2024-01-01T12:00:00Z",\n    "path": "/api/areas/with-actions"\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"500-internal-server-error",children:"500 Internal Server Error"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "error": "INTERNAL_SERVER_ERROR",\n    "message": "An unexpected error occurred",\n    "details": {\n        "errorId": "err-123e4567-e89b-12d3-a456",\n        "supportContact": "support@area.com"\n    },\n    "timestamp": "2024-01-01T12:00:00Z",\n    "path": "/api/areas"\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"requestresponse-examples",children:"Request/Response Examples"}),"\n",(0,a.jsx)(n.h3,{id:"complete-area-creation-example",children:"Complete Area Creation Example"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Request:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'POST /api/areas/with-actions\nContent-Type: application/json\nCookie: authToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n\n{\n    "name": "GitHub Issue to Slack Notification",\n    "description": "Automatically send Slack notifications when issues are created or updated in GitHub repositories",\n    "userId": "123e4567-e89b-12d3-a456-426614174000",\n    "actions": [\n        {\n            "actionDefinitionId": "github-issue-created-uuid",\n            "serviceAccountId": "github-service-account-uuid",\n            "parameters": {\n                "repository": "myorg/myrepo",\n                "event_types": ["opened", "reopened", "closed"]\n            }\n        }\n    ],\n    "reactions": [\n        {\n            "actionDefinitionId": "slack-send-message-uuid",\n            "serviceAccountId": "slack-service-account-uuid",\n            "parameters": {\n                "channel": "#development",\n                "template": "\ud83d\udea8 GitHub Issue {{action}}: **{{issue.title}}**\\n\\n{{issue.body}}\\n\\n\ud83d\udd17 [View Issue]({{issue.url}})\\n\ud83d\udc64 Reporter: {{issue.user.login}}"\n            }\n        }\n    ]\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (201 Created):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "id": "area-456e7890-e89b-12d3-a456-426614174001",\n    "name": "GitHub Issue to Slack Notification",\n    "description": "Automatically send Slack notifications when issues are created or updated in GitHub repositories",\n    "enabled": true,\n    "user": {\n        "id": "123e4567-e89b-12d3-a456-426614174000",\n        "email": "developer@example.com"\n    },\n    "actions": [\n        {\n            "id": "action-instance-789e0123-e89b-12d3",\n            "actionDefinitionId": "github-issue-created-uuid",\n            "actionDefinitionName": "GitHub Issue Created",\n            "serviceKey": "github",\n            "serviceAccountId": "github-service-account-uuid",\n            "parameters": {\n                "repository": "myorg/myrepo",\n                "event_types": ["opened", "reopened", "closed"]\n            },\n            "activationMode": "WEBHOOK",\n            "enabled": true\n        }\n    ],\n    "reactions": [\n        {\n            "id": "reaction-instance-def45678-e89b-12d3",\n            "actionDefinitionId": "slack-send-message-uuid",\n            "actionDefinitionName": "Slack Send Message",\n            "serviceKey": "slack",\n            "serviceAccountId": "slack-service-account-uuid",\n            "parameters": {\n                "channel": "#development",\n                "template": "\ud83d\udea8 GitHub Issue {{action}}: **{{issue.title}}**\\n\\n{{issue.body}}\\n\\n\ud83d\udd17 [View Issue]({{issue.url}})\\n\ud83d\udc64 Reporter: {{issue.user.login}}"\n            },\n            "enabled": true\n        }\n    ],\n    "createdAt": "2024-01-01T12:00:00Z",\n    "updatedAt": "2024-01-01T12:00:00Z"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"service-discovery-example",children:"Service Discovery Example"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Request:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /about.json\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response (200 OK):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "client": {\n        "host": "localhost:8080"\n    },\n    "server": {\n        "current_time": "2024-01-01T12:00:00Z"\n    },\n    "services": [\n        {\n            "name": "GitHub",\n            "key": "github",\n            "actions": [\n                {\n                    "name": "Issue Created",\n                    "key": "github-issue-created",\n                    "description": "Triggered when a new issue is created"\n                },\n                {\n                    "name": "Pull Request Opened",\n                    "key": "github-pr-opened", \n                    "description": "Triggered when a pull request is opened"\n                }\n            ],\n            "reactions": [\n                {\n                    "name": "Create Issue",\n                    "key": "github-create-issue",\n                    "description": "Creates a new issue in a repository"\n                },\n                {\n                    "name": "Add Comment",\n                    "key": "github-add-comment",\n                    "description": "Adds a comment to an issue or pull request"\n                }\n            ]\n        },\n        {\n            "name": "Slack",\n            "key": "slack",\n            "actions": [],\n            "reactions": [\n                {\n                    "name": "Send Message",\n                    "key": "slack-send-message",\n                    "description": "Sends a message to a Slack channel"\n                },\n                {\n                    "name": "Create Channel",\n                    "key": "slack-create-channel",\n                    "description": "Creates a new Slack channel"\n                }\n            ]\n        }\n    ]\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"api-testing",children:"API Testing"}),"\n",(0,a.jsx)(n.h3,{id:"using-curl",children:"Using curl"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Register a new user\ncurl -X POST http://localhost:8080/api/auth/register \\\n  -H "Content-Type: application/json" \\\n  -d \'{"email": "test@example.com", "password": "password123"}\' \\\n  -c cookies.txt\n\n# Create an area (using saved cookies)\ncurl -X POST http://localhost:8080/api/areas \\\n  -H "Content-Type: application/json" \\\n  -b cookies.txt \\\n  -d \'{\n    "name": "Test Area",\n    "description": "My test area",\n    "userId": "user-uuid-here"\n  }\'\n'})}),"\n",(0,a.jsx)(n.h3,{id:"using-javascriptfetch",children:"Using JavaScript/Fetch"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Register user\nconst registerResponse = await fetch('/api/auth/register', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    credentials: 'include', // Include cookies\n    body: JSON.stringify({\n        email: 'test@example.com',\n        password: 'password123'\n    })\n});\n\nconst authData = await registerResponse.json();\n\n// Create area\nconst areaResponse = await fetch('/api/areas/with-actions', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    credentials: 'include', // Include cookies for authentication\n    body: JSON.stringify({\n        name: 'GitHub to Slack Integration',\n        description: 'Integration description',\n        userId: authData.user.id,\n        actions: [\n            {\n                actionDefinitionId: 'github-action-uuid',\n                serviceAccountId: 'github-account-uuid',\n                parameters: {\n                    repository: 'owner/repo'\n                }\n            }\n        ],\n        reactions: [\n            {\n                actionDefinitionId: 'slack-reaction-uuid',\n                serviceAccountId: 'slack-account-uuid',\n                parameters: {\n                    channel: '#notifications'\n                }\n            }\n        ]\n    })\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"rate-limiting-planned",children:"Rate Limiting (Planned)"}),"\n",(0,a.jsx)(n.p,{children:"Future API versions will include rate limiting:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'HTTP/1.1 429 Too Many Requests\nX-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1640995200\nRetry-After: 60\n\n{\n    "error": "RATE_LIMIT_EXCEEDED",\n    "message": "Too many requests. Please try again later.",\n    "retryAfter": 60\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"api-versioning",children:"API Versioning"}),"\n",(0,a.jsx)(n.p,{children:"The API uses URL versioning for future compatibility:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Current: ",(0,a.jsx)(n.code,{children:"/api/..."})," (v1 implicit)"]}),"\n",(0,a.jsxs)(n.li,{children:["Future: ",(0,a.jsx)(n.code,{children:"/api/v2/..."})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Version headers will be supported:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"Accept: application/vnd.area.v2+json\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(6540);const a={},t=s.createContext(a);function r(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);