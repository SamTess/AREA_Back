"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[8248],{5664:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"technical/diagrams/authentication-class-diagram","title":"Authentication System Class Diagram","description":"This diagram focuses on the authentication and authorization components of the system.","source":"@site/docs/technical/diagrams/02-authentication-class-diagram.md","sourceDirName":"technical/diagrams","slug":"/technical/diagrams/authentication-class-diagram","permalink":"/AREA_Back/docs/technical/diagrams/authentication-class-diagram","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/technical/diagrams/02-authentication-class-diagram.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Core Entities Class Diagram","permalink":"/AREA_Back/docs/technical/diagrams/core-entities-class-diagram"},"next":{"title":"Service Integration Architecture Class Diagram","permalink":"/AREA_Back/docs/technical/diagrams/service-integration-class-diagram"}}');var r=t(4848),s=t(8453);const c={},a="Authentication System Class Diagram",o={},l=[{value:"Component Descriptions",id:"component-descriptions",level:2},{value:"Authentication Services",id:"authentication-services",level:3},{value:"AuthService",id:"authservice",level:4},{value:"OAuthService",id:"oauthservice",level:4},{value:"ServiceAccountService",id:"serviceaccountservice",level:4},{value:"JwtService",id:"jwtservice",level:4},{value:"Security Components",id:"security-components",level:3},{value:"SecurityConfig",id:"securityconfig",level:4},{value:"JwtAuthFilter",id:"jwtauthfilter",level:4},{value:"Data Models",id:"data-models",level:3},{value:"UserOAuthIdentity",id:"useroauthidentity",level:4},{value:"ServiceAccount",id:"serviceaccount",level:4},{value:"Authentication Flow",id:"authentication-flow",level:2},{value:"Security Features",id:"security-features",level:2}];function u(e){const n={h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"authentication-system-class-diagram",children:"Authentication System Class Diagram"})}),"\n",(0,r.jsx)(n.p,{children:"This diagram focuses on the authentication and authorization components of the system."}),"\n",(0,r.jsx)(n.mermaid,{value:'classDiagram\n    class User {\n        -UUID id\n        -String email\n        -String username\n        -Boolean isActive\n        -Boolean isAdmin\n        -Boolean isVerified\n        -LocalDateTime lastLoginAt\n        -List~UserOAuthIdentity~ oauthIdentities\n        -List~ServiceAccount~ serviceAccounts\n    }\n\n    class UserOAuthIdentity {\n        -UUID id\n        -String provider\n        -String providerUserId\n        -String email\n        -Map~String,Object~ profile\n        -LocalDateTime createdAt\n        -User user\n    }\n\n    class ServiceAccount {\n        -UUID id\n        -String accountIdentifier\n        -String accessToken\n        -String refreshToken\n        -LocalDateTime tokenExpiresAt\n        -Map~String,Object~ metadata\n        -Boolean isActive\n        -User user\n        -Service service\n    }\n\n    class Service {\n        -UUID id\n        -String key\n        -String name\n        -AuthType auth\n        -String docsUrl\n        -Boolean isActive\n    }\n\n    class JwtService {\n        <<service>>\n        +String generateToken(User user)\n        +Claims validateToken(String token)\n        +UUID extractUserId(String token)\n        +Boolean isTokenExpired(String token)\n    }\n\n    class AuthService {\n        <<service>>\n        +UserResponse login(LoginRequest request)\n        +UserResponse register(RegisterRequest request)\n        +void logout(UUID userId)\n        +UserResponse refreshToken(String refreshToken)\n    }\n\n    class OAuthService {\n        <<service>>\n        +String initiateOAuthFlow(String provider)\n        +UserResponse handleOAuthCallback(String provider, String code)\n        +UserOAuthIdentity linkOAuthIdentity(UUID userId, String provider, String code)\n    }\n\n    class ServiceAccountService {\n        <<service>>\n        +ServiceAccount createServiceAccount(UUID userId, UUID serviceId, OAuthTokens tokens)\n        +ServiceAccount refreshServiceAccount(UUID accountId)\n        +void revokeServiceAccount(UUID accountId)\n        +String getValidAccessToken(UUID accountId)\n    }\n\n    class SecurityConfig {\n        <<configuration>>\n        +SecurityFilterChain filterChain()\n        +PasswordEncoder passwordEncoder()\n        +AuthenticationManager authManager()\n    }\n\n    class JwtAuthFilter {\n        <<filter>>\n        +void doFilterInternal(HttpServletRequest request, HttpServletResponse response)\n        -String extractToken(HttpServletRequest request)\n        -void setAuthenticationContext(String token)\n    }\n\n    %% Relationships\n    User "1" --\x3e "*" UserOAuthIdentity : has\n    User "1" --\x3e "*" ServiceAccount : owns\n    ServiceAccount "*" --\x3e "1" Service : connects_to\n\n    AuthService --\x3e User : manages\n    AuthService --\x3e JwtService : uses\n    \n    OAuthService --\x3e UserOAuthIdentity : creates\n    OAuthService --\x3e User : authenticates\n    \n    ServiceAccountService --\x3e ServiceAccount : manages\n    ServiceAccountService --\x3e Service : integrates\n    \n    JwtAuthFilter --\x3e JwtService : validates_with\n    SecurityConfig --\x3e JwtAuthFilter : configures\n\n    %% Enumerations\n    class AuthType {\n        <<enumeration>>\n        OAUTH2\n        APIKEY\n        NONE\n    }\n\n    Service --\x3e AuthType : authenticates_via'}),"\n",(0,r.jsx)(n.h2,{id:"component-descriptions",children:"Component Descriptions"}),"\n",(0,r.jsx)(n.h3,{id:"authentication-services",children:"Authentication Services"}),"\n",(0,r.jsx)(n.h4,{id:"authservice",children:"AuthService"}),"\n",(0,r.jsx)(n.p,{children:"Handles user authentication (login/register) and JWT token generation. Manages user sessions and token refresh."}),"\n",(0,r.jsx)(n.h4,{id:"oauthservice",children:"OAuthService"}),"\n",(0,r.jsx)(n.p,{children:"Manages OAuth 2.0 flows for user authentication via external providers (Google, GitHub). Creates and links OAuth identities to users."}),"\n",(0,r.jsx)(n.h4,{id:"serviceaccountservice",children:"ServiceAccountService"}),"\n",(0,r.jsx)(n.p,{children:"Manages service-level OAuth credentials for accessing third-party APIs. Handles token refresh and revocation."}),"\n",(0,r.jsx)(n.h4,{id:"jwtservice",children:"JwtService"}),"\n",(0,r.jsx)(n.p,{children:"Generates and validates JWT tokens for securing API endpoints. Extracts user claims and checks token expiration."}),"\n",(0,r.jsx)(n.h3,{id:"security-components",children:"Security Components"}),"\n",(0,r.jsx)(n.h4,{id:"securityconfig",children:"SecurityConfig"}),"\n",(0,r.jsx)(n.p,{children:"Spring Security configuration defining authentication rules, password encoding, and security filter chains."}),"\n",(0,r.jsx)(n.h4,{id:"jwtauthfilter",children:"JwtAuthFilter"}),"\n",(0,r.jsx)(n.p,{children:"Request filter that intercepts HTTP requests, extracts JWT tokens, validates them, and sets the security context."}),"\n",(0,r.jsx)(n.h3,{id:"data-models",children:"Data Models"}),"\n",(0,r.jsx)(n.h4,{id:"useroauthidentity",children:"UserOAuthIdentity"}),"\n",(0,r.jsx)(n.p,{children:"Stores OAuth credentials from external providers used for user login (Google, GitHub, etc.)."}),"\n",(0,r.jsx)(n.h4,{id:"serviceaccount",children:"ServiceAccount"}),"\n",(0,r.jsx)(n.p,{children:"Stores OAuth credentials for third-party service integrations, allowing the system to act on behalf of users."}),"\n",(0,r.jsx)(n.h2,{id:"authentication-flow",children:"Authentication Flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Login"}),": User provides credentials \u2192 AuthService validates \u2192 JwtService generates token"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OAuth Login"}),": User redirects to provider \u2192 OAuthService handles callback \u2192 Creates/links UserOAuthIdentity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API Request"}),": JwtAuthFilter intercepts \u2192 JwtService validates token \u2192 Sets authentication context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service Integration"}),": User authorizes service \u2192 ServiceAccountService creates ServiceAccount \u2192 Stores tokens"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Token Refresh"}),": ServiceAccountService checks expiration \u2192 Refreshes tokens automatically"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"security-features",children:"Security Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"JWT-based stateless authentication"}),"\n",(0,r.jsx)(n.li,{children:"OAuth 2.0 integration for user login"}),"\n",(0,r.jsx)(n.li,{children:"Separate service accounts for API integrations"}),"\n",(0,r.jsx)(n.li,{children:"Token refresh mechanism"}),"\n",(0,r.jsx)(n.li,{children:"Role-based access control (isAdmin flag)"}),"\n",(0,r.jsx)(n.li,{children:"Account verification system (isVerified flag)"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function c(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);