"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[2060],{4970:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"technical/diagrams/area-execution-sequence","title":"AREA Execution Flow - Sequence Diagram","description":"This diagram shows how an AREA is triggered and executed, from event detection to reaction completion.","source":"@site/docs/technical/diagrams/06-area-execution-sequence.md","sourceDirName":"technical/diagrams","slug":"/technical/diagrams/area-execution-sequence","permalink":"/AREA_Back/docs/technical/diagrams/area-execution-sequence","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/technical/diagrams/06-area-execution-sequence.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AREA Creation Flow - Sequence Diagram","permalink":"/AREA_Back/docs/technical/diagrams/area-creation-sequence"},"next":{"title":"Webhook System - Sequence Diagram","permalink":"/AREA_Back/docs/technical/diagrams/webhook-system-sequence"}}');var r=t(4848),i=t(8453);const o={},c="AREA Execution Flow - Sequence Diagram",u={},s=[{value:"Webhook-Triggered Execution",id:"webhook-triggered-execution",level:2},{value:"Cron-Scheduled Execution",id:"cron-scheduled-execution",level:2},{value:"Manual Execution",id:"manual-execution",level:2},{value:"Key Execution Features",id:"key-execution-features",level:2},{value:"1. Deduplication",id:"1-deduplication",level:3},{value:"2. Data Mapping",id:"2-data-mapping",level:3},{value:"3. Conditional Execution",id:"3-conditional-execution",level:3},{value:"4. Error Handling",id:"4-error-handling",level:3},{value:"5. Execution Context",id:"5-execution-context",level:3},{value:"6. Execution Order",id:"6-execution-order",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"area-execution-flow---sequence-diagram",children:"AREA Execution Flow - Sequence Diagram"})}),"\n",(0,r.jsx)(n.p,{children:"This diagram shows how an AREA is triggered and executed, from event detection to reaction completion."}),"\n",(0,r.jsx)(n.h2,{id:"webhook-triggered-execution",children:"Webhook-Triggered Execution"}),"\n",(0,r.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant External as External Service<br/>(GitHub)\n    participant WebhookController\n    participant WebhookHandler\n    participant AreaExecutionService\n    participant ActionExecutor\n    participant Database\n    participant TargetAPI as Target Service<br/>(Slack)\n\n    External->>WebhookController: POST /webhooks/github<br/>{event: "issue.created", payload: {...}}\n    activate WebhookController\n    WebhookController->>WebhookController: Verify webhook signature\n    WebhookController->>WebhookHandler: handleWebhook(serviceKey, eventType, payload)\n    activate WebhookHandler\n\n    %% Find matching action instances\n    WebhookHandler->>Database: Find ActionInstances<br/>WHERE service="github"<br/>AND activationMode.type=WEBHOOK<br/>AND enabled=true\n    Database--\x3e>WebhookHandler: List of matching ActionInstances\n\n    loop For each matching ActionInstance\n        WebhookHandler->>WebhookHandler: Check event type matches config\n        alt Event matches\n            WebhookHandler->>WebhookHandler: Apply deduplication check\n            alt Not duplicate\n                WebhookHandler->>AreaExecutionService: executeArea(areaId, triggerContext)\n                activate AreaExecutionService\n\n                %% Get Area details\n                AreaExecutionService->>Database: Get Area by ID\n                Database--\x3e>AreaExecutionService: Area with actions/reactions\n\n                AreaExecutionService->>Database: Get all ActionInstances for Area\n                Database--\x3e>AreaExecutionService: List of ActionInstances\n\n                AreaExecutionService->>Database: Get ActionLinks for Area\n                Database--\x3e>AreaExecutionService: Execution graph (links)\n\n                %% Build execution context\n                AreaExecutionService->>AreaExecutionService: Initialize execution context\n                Note over AreaExecutionService: context = {<br/>  trigger: webhookPayload,<br/>  area: {...},<br/>  variables: {}<br/>}\n\n                %% Execute reactions in order\n                AreaExecutionService->>AreaExecutionService: Get reactions ordered by \'order\' field\n                \n                loop For each Reaction (in order)\n                    AreaExecutionService->>AreaExecutionService: Apply data mapping\n                    Note over AreaExecutionService: Transform trigger data<br/>using mapping rules\n\n                    AreaExecutionService->>AreaExecutionService: Evaluate conditions\n                    Note over AreaExecutionService: Check if condition<br/>expression is true\n\n                    alt Condition met\n                        AreaExecutionService->>AreaExecutionService: Get ActionExecutor for service\n                        AreaExecutionService->>ActionExecutor: execute(actionInstance, context)\n\n                        %% Get and validate token\n                        ActionExecutor->>Database: Get ServiceAccount\n                        Database--\x3e>ActionExecutor: ServiceAccount with tokens\n\n                        ActionExecutor->>ActionExecutor: Check token expiration\n                        alt Token expired\n                            ActionExecutor->>External: POST /oauth/token (refresh)\n                            External--\x3e>ActionExecutor: New access token\n                            ActionExecutor->>Database: Update tokens\n                        end\n\n                        %% Execute action\n                        ActionExecutor->>TargetAPI: API Call (e.g., POST /chat.postMessage)\n                        Note over ActionExecutor,TargetAPI: Headers: Authorization: Bearer {token}<br/>Body: mapped parameters\n\n                        alt API call successful\n                            TargetAPI--\x3e>ActionExecutor: 200 OK + response data\n                            ActionExecutor->>ActionExecutor: Build execution result\n                            ActionExecutor->>Database: Log execution (success)\n                            ActionExecutor--\x3e>AreaExecutionService: ExecutionResult (success, data)\n\n                            AreaExecutionService->>AreaExecutionService: Store result in context\n                            Note over AreaExecutionService: context.variables[reactionId] = result\n                        else API call failed\n                            TargetAPI--\x3e>ActionExecutor: 4xx/5xx Error\n                            ActionExecutor->>Database: Log execution (failure)\n                            ActionExecutor--\x3e>AreaExecutionService: ExecutionResult (failure, error)\n                            \n                            alt Critical reaction\n                                AreaExecutionService->>AreaExecutionService: Abort execution\n                                AreaExecutionService->>Database: Log area execution (failed)\n                                AreaExecutionService--\x3e>WebhookHandler: Execution failed\n                            else Non-critical\n                                AreaExecutionService->>AreaExecutionService: Continue to next reaction\n                            end\n                        end\n                    else Condition not met\n                        AreaExecutionService->>AreaExecutionService: Skip reaction\n                        AreaExecutionService->>Database: Log skipped execution\n                    end\n                end\n\n                %% Complete execution\n                AreaExecutionService->>Database: Log area execution (success)\n                AreaExecutionService->>Database: Update Area.lastRun timestamp\n                AreaExecutionService--\x3e>WebhookHandler: Execution completed\n                deactivate AreaExecutionService\n            else Duplicate event\n                WebhookHandler->>WebhookHandler: Skip execution (dedup)\n                WebhookHandler->>Database: Log duplicate event\n            end\n        end\n    end\n\n    WebhookHandler--\x3e>WebhookController: Webhook processed\n    deactivate WebhookHandler\n    WebhookController--\x3e>External: 200 OK\n    deactivate WebhookController'}),"\n",(0,r.jsx)(n.h2,{id:"cron-scheduled-execution",children:"Cron-Scheduled Execution"}),"\n",(0,r.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant Scheduler as Cron Scheduler\n    participant AreaExecutionService\n    participant ActionExecutor\n    participant Database\n    participant ExternalAPI as External Service\n\n    Scheduler->>Scheduler: Cron trigger fires<br/>(e.g., "0 9 * * *")\n    Scheduler->>Database: Get ActionInstance by scheduled job ID\n    Database--\x3e>Scheduler: ActionInstance details\n\n    Scheduler->>Scheduler: Check if enabled\n    alt ActionInstance enabled\n        Scheduler->>AreaExecutionService: executeAction(actionInstanceId, {})\n        activate AreaExecutionService\n\n        AreaExecutionService->>Database: Get ActionInstance\n        Database--\x3e>AreaExecutionService: ActionInstance\n\n        AreaExecutionService->>Database: Get Area\n        Database--\x3e>AreaExecutionService: Area\n\n        alt Is trigger action\n            AreaExecutionService->>ActionExecutor: execute(actionInstance, {})\n            activate ActionExecutor\n            \n            ActionExecutor->>ExternalAPI: Fetch data (e.g., GET /issues)\n            ExternalAPI--\x3e>ActionExecutor: Response data\n            \n            ActionExecutor--\x3e>AreaExecutionService: ExecutionResult with data\n            deactivate ActionExecutor\n\n            AreaExecutionService->>AreaExecutionService: Store in context\n            Note over AreaExecutionService: context.trigger = result.data\n\n            %% Execute reactions\n            AreaExecutionService->>AreaExecutionService: Get and execute reactions\n            Note over AreaExecutionService: Same reaction execution<br/>flow as webhook\n            \n            AreaExecutionService->>Database: Log execution\n            AreaExecutionService--\x3e>Scheduler: Execution complete\n        else Is standalone reaction\n            AreaExecutionService->>ActionExecutor: execute(actionInstance, {})\n            ActionExecutor->>ExternalAPI: Execute action\n            ExternalAPI--\x3e>ActionExecutor: Response\n            ActionExecutor--\x3e>AreaExecutionService: Result\n            AreaExecutionService->>Database: Log execution\n            AreaExecutionService--\x3e>Scheduler: Complete\n        end\n        deactivate AreaExecutionService\n    else ActionInstance disabled\n        Scheduler->>Scheduler: Skip execution\n    end'}),"\n",(0,r.jsx)(n.h2,{id:"manual-execution",children:"Manual Execution"}),"\n",(0,r.jsx)(n.mermaid,{value:'sequenceDiagram\n    actor User\n    participant Frontend\n    participant AreaController\n    participant AreaExecutionService\n    participant Database\n\n    User->>Frontend: Click "Run AREA Now"\n    Frontend->>AreaController: POST /areas/{id}/execute\n    activate AreaController\n    \n    AreaController->>AreaController: Verify JWT & permissions\n    AreaController->>AreaExecutionService: executeArea(areaId, manualContext)\n    activate AreaExecutionService\n    \n    Note over AreaExecutionService: Same execution flow<br/>as webhook trigger\n\n    AreaExecutionService->>Database: Execute Area\n    AreaExecutionService--\x3e>AreaController: Execution result\n    deactivate AreaExecutionService\n    \n    AreaController--\x3e>Frontend: 200 OK + execution summary\n    deactivate AreaController\n    Frontend--\x3e>User: Show "AREA executed" + results'}),"\n",(0,r.jsx)(n.h2,{id:"key-execution-features",children:"Key Execution Features"}),"\n",(0,r.jsx)(n.h3,{id:"1-deduplication",children:"1. Deduplication"}),"\n",(0,r.jsx)(n.p,{children:"Prevents duplicate execution of the same event:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SIMPLE"}),": Hash-based dedup using event payload"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ADVANCED"}),": Custom dedup logic per service"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"NONE"}),": No deduplication"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-data-mapping",children:"2. Data Mapping"}),"\n",(0,r.jsx)(n.p,{children:"Transform trigger output to reaction input:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Template mapping\n"message": "Issue #{{trigger.issue.number}}: {{trigger.issue.title}}"\n\n// Result\n"message": "Issue #123: Fix login bug"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-conditional-execution",children:"3. Conditional Execution"}),"\n",(0,r.jsx)(n.p,{children:"Reactions only run if conditions are met:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "operator": "AND",\n  "rules": [\n    {"field": "{{trigger.priority}}", "operator": ">=", "value": 5},\n    {"field": "{{trigger.status}}", "operator": "equals", "value": "open"}\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-error-handling",children:"4. Error Handling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Failed reactions can halt or continue execution"}),"\n",(0,r.jsx)(n.li,{children:"Detailed error logging for debugging"}),"\n",(0,r.jsx)(n.li,{children:"Automatic token refresh on authentication errors"}),"\n",(0,r.jsx)(n.li,{children:"Retry logic for transient failures"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"5-execution-context",children:"5. Execution Context"}),"\n",(0,r.jsx)(n.p,{children:"Maintains state throughout execution:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "trigger": { /* webhook payload or cron result */ },\n  "area": { /* area configuration */ },\n  "variables": {\n    "reaction-1-id": { /* first reaction output */ },\n    "reaction-2-id": { /* second reaction output */ }\n  },\n  "metadata": {\n    "executionId": "uuid",\n    "startTime": "timestamp",\n    "triggeredBy": "webhook|cron|manual"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"6-execution-order",children:"6. Execution Order"}),"\n",(0,r.jsxs)(n.p,{children:["Reactions execute sequentially based on ",(0,r.jsx)(n.code,{children:"order"})," field, allowing:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Multi-step workflows"}),"\n",(0,r.jsx)(n.li,{children:"Data passing between reactions"}),"\n",(0,r.jsx)(n.li,{children:"Dependent actions"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var a=t(6540);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);