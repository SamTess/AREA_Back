"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[2349],{6242:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"technical/security-guide","title":"Security Architecture Guide","description":"Table of Contents","source":"@site/docs/technical/07-security-guide.md","sourceDirName":"technical","slug":"/technical/security-guide","permalink":"/docs/technical/security-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/SamTess/AREA_Back/tree/main/docusaurus/docs/technical/07-security-guide.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"API Documentation Guide","permalink":"/docs/technical/api-documentation"},"next":{"title":"Redis Implementation and Security - Technical Documentation","permalink":"/docs/technical/redis-implementation"}}');var r=i(4848),s=i(8453);const a={},c="Security Architecture Guide",o={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Security Overview",id:"security-overview",level:2},{value:"Security Principles",id:"security-principles",level:3},{value:"Authentication Security",id:"authentication-security",level:2},{value:"JWT Token Security",id:"jwt-token-security",level:3},{value:"Token Structure and Claims",id:"token-structure-and-claims",level:4},{value:"Token Security Features",id:"token-security-features",level:4},{value:"Token Storage Security",id:"token-storage-security",level:4},{value:"Password Security",id:"password-security",level:3},{value:"Password Hashing",id:"password-hashing",level:4},{value:"OAuth2 Security",id:"oauth2-security",level:3},{value:"Secure OAuth Flow",id:"secure-oauth-flow",level:4},{value:"Authorization Framework",id:"authorization-framework",level:2},{value:"Role-Based Access Control (RBAC)",id:"role-based-access-control-rbac",level:3},{value:"Resource-Level Authorization",id:"resource-level-authorization",level:3},{value:"Method-Level Security",id:"method-level-security",level:3},{value:"Data Protection",id:"data-protection",level:2},{value:"Encryption at Rest",id:"encryption-at-rest",level:3},{value:"Sensitive Data Encryption",id:"sensitive-data-encryption",level:4},{value:"Database Column Encryption",id:"database-column-encryption",level:4},{value:"Data Validation and Sanitization",id:"data-validation-and-sanitization",level:3},{value:"Input Validation",id:"input-validation",level:4},{value:"SQL Injection Prevention",id:"sql-injection-prevention",level:4},{value:"API Security",id:"api-security",level:2},{value:"CORS Configuration",id:"cors-configuration",level:3},{value:"Request Rate Limiting (Future Enhancement)",id:"request-rate-limiting-future-enhancement",level:3},{value:"Content Security Policy",id:"content-security-policy",level:3},{value:"Infrastructure Security",id:"infrastructure-security",level:2},{value:"Database Security",id:"database-security",level:3},{value:"Connection Security",id:"connection-security",level:4},{value:"Database User Privileges",id:"database-user-privileges",level:4},{value:"Redis Security",id:"redis-security",level:3},{value:"Redis Authentication and SSL",id:"redis-authentication-and-ssl",level:4},{value:"Redis Command Restrictions",id:"redis-command-restrictions",level:4},{value:"Security Configuration",id:"security-configuration",level:2},{value:"Environment-Specific Configuration",id:"environment-specific-configuration",level:3},{value:"Development Environment",id:"development-environment",level:4},{value:"Production Environment",id:"production-environment",level:4},{value:"Secrets Management",id:"secrets-management",level:3},{value:"Environment Variables",id:"environment-variables",level:4},{value:"Docker Secrets (Production)",id:"docker-secrets-production",level:4},{value:"Threat Model",id:"threat-model",level:2},{value:"Identified Threats and Mitigations",id:"identified-threats-and-mitigations",level:3},{value:"1. Authentication Bypass",id:"1-authentication-bypass",level:4},{value:"2. Cross-Site Scripting (XSS)",id:"2-cross-site-scripting-xss",level:4},{value:"3. Cross-Site Request Forgery (CSRF)",id:"3-cross-site-request-forgery-csrf",level:4},{value:"4. SQL Injection",id:"4-sql-injection",level:4},{value:"5. Sensitive Data Exposure",id:"5-sensitive-data-exposure",level:4},{value:"6. Broken Access Control",id:"6-broken-access-control",level:4},{value:"7. Security Misconfiguration",id:"7-security-misconfiguration",level:4},{value:"8. Vulnerable Dependencies",id:"8-vulnerable-dependencies",level:4},{value:"9. Email Verification Attacks",id:"9-email-verification-attacks",level:4},{value:"10. Password Reset Attacks",id:"10-password-reset-attacks",level:4},{value:"Security Best Practices",id:"security-best-practices",level:2},{value:"Development Security Practices",id:"development-security-practices",level:3},{value:"Secure Coding Guidelines",id:"secure-coding-guidelines",level:4},{value:"Code Review Security Checklist",id:"code-review-security-checklist",level:4},{value:"Deployment Security Practices",id:"deployment-security-practices",level:3},{value:"Container Security",id:"container-security",level:4},{value:"Network Security",id:"network-security",level:4},{value:"Monitoring and Incident Response",id:"monitoring-and-incident-response",level:3},{value:"Security Monitoring",id:"security-monitoring",level:4},{value:"Incident Response Plan",id:"incident-response-plan",level:4},{value:"Security Testing",id:"security-testing",level:3},{value:"Automated Security Testing",id:"automated-security-testing",level:4},{value:"Penetration Testing Checklist",id:"penetration-testing-checklist",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"security-architecture-guide",children:"Security Architecture Guide"})}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#security-overview",children:"Security Overview"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#authentication-security",children:"Authentication Security"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#authorization-framework",children:"Authorization Framework"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#data-protection",children:"Data Protection"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#api-security",children:"API Security"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#infrastructure-security",children:"Infrastructure Security"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#security-configuration",children:"Security Configuration"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#threat-model",children:"Threat Model"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#security-best-practices",children:"Security Best Practices"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"security-overview",children:"Security Overview"}),"\n",(0,r.jsx)(n.p,{children:"The AREA backend implements a comprehensive security framework designed to protect user data, authenticate users securely, and provide robust protection against common web application vulnerabilities."}),"\n",(0,r.jsx)(n.h3,{id:"security-principles",children:"Security Principles"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Defense in Depth"}),": Multiple layers of security controls"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Principle of Least Privilege"}),": Minimal access rights"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Secure by Default"}),": Security-first configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Zero Trust"}),": Verify every request and user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Minimization"}),": Collect and store only necessary data"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"authentication-security",children:"Authentication Security"}),"\n",(0,r.jsx)(n.h3,{id:"jwt-token-security",children:"JWT Token Security"}),"\n",(0,r.jsx)(n.h4,{id:"token-structure-and-claims",children:"Token Structure and Claims"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Access Token Claims\n{\n    "sub": "user-uuid",           // Subject (user ID)\n    "iat": 1640995200,           // Issued at\n    "exp": 1640995800,           // Expiration (15 minutes)\n    "type": "access_token",      // Token type\n    "jti": "token-uuid"          // JWT ID for revocation\n}\n\n// Refresh Token Claims\n{\n    "sub": "user-uuid",\n    "iat": 1640995200,\n    "exp": 1641600000,           // Expiration (7 days)\n    "type": "refresh_token",\n    "jti": "refresh-token-uuid"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"token-security-features",children:"Token Security Features"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Service\npublic class JwtService {\n    \n    // Secure key generation\n    public static String generateSecureKey() {\n        SecureRandom secureRandom = new SecureRandom();\n        byte[] key = new byte[32]; // 256 bits\n        secureRandom.nextBytes(key);\n        return Base64.getEncoder().encodeToString(key);\n    }\n    \n    // Token generation with secure signing\n    private String generateToken(Map<String, Object> extraClaims, \n                                String subject,\n                                Date expiration, \n                                SecretKey signingKey) {\n        return Jwts.builder()\n            .setClaims(extraClaims)\n            .setSubject(subject)\n            .setIssuedAt(new Date(System.currentTimeMillis()))\n            .setExpiration(expiration)\n            .setId(UUID.randomUUID().toString()) // JWT ID for revocation\n            .signWith(signingKey, SignatureAlgorithm.HS256)\n            .compact();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"token-storage-security",children:"Token Storage Security"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// HTTP-Only Cookie Configuration\n@Component\n@ConfigurationProperties(prefix = "app.jwt.cookie")\npublic class JwtCookieProperties {\n    \n    private boolean secure = false;      // HTTPS only in production\n    private String sameSite = "Strict";  // CSRF protection\n    private String domain;               // Cookie domain restriction\n    private boolean httpOnly = true;     // Prevent XSS access\n    \n    // Cookie creation with security flags\n    private Cookie createSecureCookie(String name, String value, int maxAge) {\n        Cookie cookie = new Cookie(name, value);\n        cookie.setHttpOnly(true);              // Prevent JavaScript access\n        cookie.setSecure(secure);              // HTTPS only\n        cookie.setPath("/");                   // Application-wide\n        cookie.setMaxAge(maxAge);              // Expiration time\n        cookie.setAttribute("SameSite", sameSite); // CSRF protection\n        \n        if (domain != null && !domain.isEmpty()) {\n            cookie.setDomain(domain);          // Domain restriction\n        }\n        \n        return cookie;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"password-security",children:"Password Security"}),"\n",(0,r.jsx)(n.h4,{id:"password-hashing",children:"Password Hashing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class SecurityConfig {\n    \n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        // BCrypt with strength 12 (2^12 rounds)\n        return new BCryptPasswordEncoder(12);\n    }\n}\n\n@Service\npublic class AuthService {\n    \n    private final PasswordEncoder passwordEncoder;\n    \n    // Secure password validation\n    private boolean isValidPassword(String rawPassword, String encodedPassword) {\n        try {\n            return passwordEncoder.matches(rawPassword, encodedPassword);\n        } catch (Exception e) {\n            log.warn("Password validation failed: {}", e.getMessage());\n            return false;\n        }\n    }\n    \n    // Account lockout mechanism\n    private static final int MAX_FAILED_ATTEMPTS = 5;\n    private static final int ACCOUNT_LOCK_DURATION_MINUTES = 30;\n    \n    private void handleFailedLogin(UserLocalIdentity identity) {\n        identity.setFailedLoginAttempts(identity.getFailedLoginAttempts() + 1);\n        \n        if (identity.getFailedLoginAttempts() >= MAX_FAILED_ATTEMPTS) {\n            identity.setLockedUntil(LocalDateTime.now()\n                .plusMinutes(ACCOUNT_LOCK_DURATION_MINUTES));\n            log.warn("Account locked due to too many failed attempts: {}", \n                identity.getEmail());\n        }\n        \n        userLocalIdentityRepository.save(identity);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"oauth2-security",children:"OAuth2 Security"}),"\n",(0,r.jsx)(n.h4,{id:"secure-oauth-flow",children:"Secure OAuth Flow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class OAuthGithubService extends OAuthService {\n    \n    // Secure state parameter generation\n    private String generateSecureState() {\n        SecureRandom secureRandom = new SecureRandom();\n        byte[] stateBytes = new byte[32];\n        secureRandom.nextBytes(stateBytes);\n        return Base64.getUrlEncoder().withoutPadding().encodeToString(stateBytes);\n    }\n    \n    // Authorization URL with security parameters\n    public String getUserAuthUrl() {\n        return "https://github.com/login/oauth/authorize"\n            + "?client_id=" + clientId\n            + "&scope=" + URLEncoder.encode("user:email,repo", StandardCharsets.UTF_8)\n            + "&state=" + generateSecureState()\n            + "&redirect_uri=" + URLEncoder.encode(redirectUri, StandardCharsets.UTF_8);\n    }\n    \n    // Secure token exchange\n    @Override\n    public AuthResponse authenticate(OAuthLoginRequest request, HttpServletResponse response) {\n        // Validate state parameter\n        if (!validateState(request.getState())) {\n            throw new SecurityException("Invalid OAuth state parameter");\n        }\n        \n        // Exchange authorization code for access token\n        // Implement with proper error handling and validation\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"authorization-framework",children:"Authorization Framework"}),"\n",(0,r.jsx)(n.h3,{id:"role-based-access-control-rbac",children:"Role-Based Access Control (RBAC)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Entity\npublic class User {\n    \n    @Column(name = "is_admin", nullable = false)\n    private Boolean isAdmin = false;\n    \n    // Future: Role hierarchy\n    @Enumerated(EnumType.STRING)\n    private UserRole role = UserRole.USER;\n}\n\npublic enum UserRole {\n    USER,           // Regular user permissions\n    MODERATOR,      // Extended permissions (future)\n    ADMIN           // Full system access\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"resource-level-authorization",children:"Resource-Level Authorization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Service\npublic class AreaAuthorizationService {\n    \n    /**\n     * Checks if user can access area\n     */\n    public boolean canAccessArea(UUID userId, UUID areaId) {\n        Area area = areaRepository.findById(areaId)\n            .orElseThrow(() -> new AreaNotFoundException(areaId));\n        \n        // Users can only access their own areas\n        // Admins can access all areas\n        return area.getUser().getId().equals(userId) || \n               isUserAdmin(userId);\n    }\n    \n    /**\n     * Checks if user can modify area\n     */\n    public boolean canModifyArea(UUID userId, UUID areaId) {\n        // Same as access for now, could be different in future\n        return canAccessArea(userId, areaId);\n    }\n    \n    private boolean isUserAdmin(UUID userId) {\n        return userRepository.findById(userId)\n            .map(User::getIsAdmin)\n            .orElse(false);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"method-level-security",children:"Method-Level Security"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/areas")\npublic class AreaController {\n    \n    @GetMapping("/{id}")\n    @PreAuthorize("@areaAuthorizationService.canAccessArea(authentication.principal.userId, #id)")\n    public ResponseEntity<AreaResponse> getAreaById(@PathVariable UUID id) {\n        // Implementation\n    }\n    \n    @PutMapping("/{id}")\n    @PreAuthorize("@areaAuthorizationService.canModifyArea(authentication.principal.userId, #id)")\n    public ResponseEntity<AreaResponse> updateArea(@PathVariable UUID id, \n                                                  @RequestBody UpdateAreaRequest request) {\n        // Implementation\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"data-protection",children:"Data Protection"}),"\n",(0,r.jsx)(n.h3,{id:"encryption-at-rest",children:"Encryption at Rest"}),"\n",(0,r.jsx)(n.h4,{id:"sensitive-data-encryption",children:"Sensitive Data Encryption"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class TokenEncryptionService {\n    \n    private static final String ENCRYPTION_ALGORITHM = "AES/GCM/NoPadding";\n    private static final int GCM_IV_LENGTH = 12;\n    private static final int GCM_TAG_LENGTH = 16;\n    \n    @Value("${app.encryption.secret}")\n    private String encryptionSecret;\n    \n    /**\n     * Encrypts sensitive data using AES-GCM\n     */\n    public String encrypt(String plaintext) {\n        try {\n            SecretKeySpec secretKey = new SecretKeySpec(\n                deriveKey(encryptionSecret), "AES");\n            \n            Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n            \n            // Generate random IV\n            byte[] iv = new byte[GCM_IV_LENGTH];\n            SecureRandom.getInstanceStrong().nextBytes(iv);\n            \n            GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(\n                GCM_TAG_LENGTH * 8, iv);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, gcmParameterSpec);\n            \n            byte[] cipherText = cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));\n            \n            // Combine IV and ciphertext\n            byte[] encryptedWithIv = new byte[GCM_IV_LENGTH + cipherText.length];\n            System.arraycopy(iv, 0, encryptedWithIv, 0, GCM_IV_LENGTH);\n            System.arraycopy(cipherText, 0, encryptedWithIv, GCM_IV_LENGTH, cipherText.length);\n            \n            return Base64.getEncoder().encodeToString(encryptedWithIv);\n            \n        } catch (Exception e) {\n            throw new EncryptionException("Encryption failed", e);\n        }\n    }\n    \n    /**\n     * Derives encryption key using PBKDF2\n     */\n    private byte[] deriveKey(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {\n        byte[] salt = "AREA-SALT-2024".getBytes(StandardCharsets.UTF_8);\n        \n        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 100000, 256);\n        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");\n        \n        return factory.generateSecret(spec).getEncoded();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"database-column-encryption",children:"Database Column Encryption"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "a_service_accounts", schema = "area")\npublic class ServiceAccount {\n    \n    // Encrypted token storage\n    @Column(name = "access_token_enc")\n    private String accessTokenEnc;      // Encrypted access token\n    \n    @Column(name = "refresh_token_enc")\n    private String refreshTokenEnc;     // Encrypted refresh token\n    \n    // Encryption helper methods\n    @Transient\n    public void setAccessToken(String accessToken) {\n        this.accessTokenEnc = tokenEncryptionService.encrypt(accessToken);\n    }\n    \n    @Transient\n    public String getAccessToken() {\n        return tokenEncryptionService.decrypt(this.accessTokenEnc);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"data-validation-and-sanitization",children:"Data Validation and Sanitization"}),"\n",(0,r.jsx)(n.h4,{id:"input-validation",children:"Input Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Request DTO validation\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class CreateAreaRequest {\n    \n    @NotBlank(message = "Area name is required")\n    @Size(min = 1, max = 255, message = "Area name must be between 1 and 255 characters")\n    @Pattern(regexp = "^[a-zA-Z0-9\\\\s\\\\-_]+$", message = "Area name contains invalid characters")\n    private String name;\n    \n    @Size(max = 1000, message = "Description cannot exceed 1000 characters")\n    private String description;\n    \n    @NotNull(message = "User ID is required")\n    private UUID userId;\n}\n\n// Custom validation annotations\n@Target({ElementType.FIELD})\n@Retention(RetentionPolicy.RUNTIME)\n@Constraint(validatedBy = JsonSchemaValidator.class)\npublic @interface ValidJsonSchema {\n    String message() default "Invalid JSON schema";\n    Class<?>[] groups() default {};\n    Class<? extends Payload>[] payload() default {};\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"sql-injection-prevention",children:"SQL Injection Prevention"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Safe JPA queries\n@Repository\npublic interface AreaRepository extends JpaRepository<Area, UUID> {\n    \n    // Safe parameterized query\n    @Query("SELECT a FROM Area a WHERE a.user.id = :userId AND a.enabled = :enabled")\n    Page<Area> findByUserIdAndEnabled(@Param("userId") UUID userId, \n                                     @Param("enabled") Boolean enabled, \n                                     Pageable pageable);\n    \n    // Safe native query with parameters\n    @Query(value = "SELECT * FROM area.a_areas WHERE user_id = :userId " +\n                   "AND actions @> :actionFilter", nativeQuery = true)\n    List<Area> findByUserAndActionType(@Param("userId") UUID userId,\n                                      @Param("actionFilter") String actionFilter);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"api-security",children:"API Security"}),"\n",(0,r.jsx)(n.h3,{id:"cors-configuration",children:"CORS Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class SecurityConfig {\n    \n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n        \n        // Allowed origins (environment-specific)\n        configuration.setAllowedOriginPatterns(Arrays.asList(\n            "http://localhost:3000",      // Development\n            "https://*.yourdomain.com"    // Production\n        ));\n        \n        // Allowed methods\n        configuration.setAllowedMethods(Arrays.asList(\n            "GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"\n        ));\n        \n        // Allowed headers\n        configuration.setAllowedHeaders(Arrays.asList("*"));\n        \n        // Allow credentials (required for cookies)\n        configuration.setAllowCredentials(true);\n        \n        // Exposed headers\n        configuration.setExposedHeaders(Arrays.asList(\n            "Authorization", "Content-Type", "Content-Length"\n        ));\n        \n        // Preflight cache duration\n        configuration.setMaxAge(3600L);\n        \n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration("/**", configuration);\n        return source;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"request-rate-limiting-future-enhancement",children:"Request Rate Limiting (Future Enhancement)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class RateLimitingFilter implements Filter {\n    \n    private final RedisTemplate<String, String> redisTemplate;\n    \n    // Rate limiting configuration\n    private static final int REQUESTS_PER_MINUTE = 60;\n    private static final int REQUESTS_PER_HOUR = 1000;\n    \n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, \n                        FilterChain chain) throws IOException, ServletException {\n        \n        HttpServletRequest httpRequest = (HttpServletRequest) request;\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\n        \n        String clientIP = getClientIP(httpRequest);\n        String userAgent = httpRequest.getHeader("User-Agent");\n        \n        // Check rate limits\n        if (isRateLimited(clientIP, userAgent)) {\n            httpResponse.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n            httpResponse.setHeader("Retry-After", "60");\n            return;\n        }\n        \n        chain.doFilter(request, response);\n    }\n    \n    private boolean isRateLimited(String clientIP, String userAgent) {\n        // Implement sliding window rate limiting with Redis\n        return false; // Placeholder\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"content-security-policy",children:"Content Security Policy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class SecurityHeadersFilter implements Filter {\n    \n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, \n                        FilterChain chain) throws IOException, ServletException {\n        \n        HttpServletResponse httpResponse = (HttpServletResponse) response;\n        \n        // Content Security Policy\n        httpResponse.setHeader("Content-Security-Policy", \n            "default-src \'self\'; " +\n            "script-src \'self\' \'unsafe-inline\'; " +\n            "style-src \'self\' \'unsafe-inline\'; " +\n            "img-src \'self\' data: https:; " +\n            "font-src \'self\'; " +\n            "connect-src \'self\'; " +\n            "frame-ancestors \'none\'");\n        \n        // Other security headers\n        httpResponse.setHeader("X-Content-Type-Options", "nosniff");\n        httpResponse.setHeader("X-Frame-Options", "DENY");\n        httpResponse.setHeader("X-XSS-Protection", "1; mode=block");\n        httpResponse.setHeader("Referrer-Policy", "strict-origin-when-cross-origin");\n        httpResponse.setHeader("Permissions-Policy", \n            "camera=(), microphone=(), geolocation=()");\n        \n        chain.doFilter(request, response);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"infrastructure-security",children:"Infrastructure Security"}),"\n",(0,r.jsx)(n.h3,{id:"database-security",children:"Database Security"}),"\n",(0,r.jsx)(n.h4,{id:"connection-security",children:"Connection Security"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# SSL/TLS database connection\nspring.datasource.url=jdbc:postgresql://localhost:5432/area?sslmode=require&sslcert=client-cert.pem&sslkey=client-key.pem&sslrootcert=ca-cert.pem\n\n# Connection pool security\nspring.datasource.hikari.connection-test-query=SELECT 1\nspring.datasource.hikari.validation-timeout=3000\nspring.datasource.hikari.leak-detection-threshold=60000\n"})}),"\n",(0,r.jsx)(n.h4,{id:"database-user-privileges",children:"Database User Privileges"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Application database user with minimal privileges\nCREATE USER area_app WITH PASSWORD 'secure_generated_password';\n\n-- Grant only necessary permissions\nGRANT CONNECT ON DATABASE area TO area_app;\nGRANT USAGE ON SCHEMA area TO area_app;\nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA area TO area_app;\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA area TO area_app;\n\n-- Revoke unnecessary permissions\nREVOKE CREATE ON SCHEMA area FROM area_app;\nREVOKE ALL ON DATABASE area FROM PUBLIC;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"redis-security",children:"Redis Security"}),"\n",(0,r.jsx)(n.h4,{id:"redis-authentication-and-ssl",children:"Redis Authentication and SSL"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# Redis security configuration\nspring.data.redis.host=${REDIS_HOST}\nspring.data.redis.port=${REDIS_PORT}\nspring.data.redis.password=${REDIS_PASSWORD}\nspring.data.redis.ssl=true\nspring.data.redis.timeout=2000ms\n\n# Redis connection pool security\nspring.data.redis.lettuce.pool.max-active=8\nspring.data.redis.lettuce.pool.max-idle=8\nspring.data.redis.lettuce.pool.min-idle=0\nspring.data.redis.lettuce.pool.max-wait=-1ms\n"})}),"\n",(0,r.jsx)(n.h4,{id:"redis-command-restrictions",children:"Redis Command Restrictions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-redis",children:'# Redis configuration (redis.conf)\n# Disable dangerous commands\nrename-command FLUSHDB ""\nrename-command FLUSHALL ""\nrename-command EVAL ""\nrename-command DEBUG ""\nrename-command CONFIG ""\n\n# Enable protected mode\nprotected-mode yes\n\n# Bind to specific interfaces only\nbind 127.0.0.1 ::1\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-configuration",children:"Security Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"environment-specific-configuration",children:"Environment-Specific Configuration"}),"\n",(0,r.jsx)(n.h4,{id:"development-environment",children:"Development Environment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# Development security settings\napp.jwt.cookie.secure=false\napp.jwt.cookie.same-site=Lax\nspring.profiles.active=development\n\n# Relaxed CORS for development\ncors.allowed-origins=http://localhost:3000,http://localhost:3001\n\n# Debug logging\nlogging.level.org.springframework.security=DEBUG\nlogging.level.area.server.AREA_Back.filter=DEBUG\n"})}),"\n",(0,r.jsx)(n.h4,{id:"production-environment",children:"Production Environment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# Production security settings\napp.jwt.cookie.secure=true\napp.jwt.cookie.same-site=Strict\napp.jwt.cookie.domain=yourdomain.com\nspring.profiles.active=production\n\n# Strict CORS for production\ncors.allowed-origins=https://yourdomain.com,https://app.yourdomain.com\n\n# Minimal logging\nlogging.level.org.springframework.security=WARN\nlogging.level.area.server.AREA_Back=INFO\n"})}),"\n",(0,r.jsx)(n.h3,{id:"secrets-management",children:"Secrets Management"}),"\n",(0,r.jsx)(n.h4,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Authentication secrets\nexport JWT_ACCESS_SECRET=$(openssl rand -base64 32)\nexport JWT_REFRESH_SECRET=$(openssl rand -base64 32)\nexport ENCRYPTION_SECRET=$(openssl rand -base64 32)\n\n# Database credentials\nexport DATABASE_URL="jdbc:postgresql://localhost:5432/area"\nexport DATABASE_USERNAME="area_app"\nexport DATABASE_PASSWORD=$(openssl rand -base64 24)\n\n# Redis credentials\nexport REDIS_HOST="localhost"\nexport REDIS_PORT="6379"\nexport REDIS_PASSWORD=$(openssl rand -base64 16)\n\n# OAuth credentials\nexport GITHUB_CLIENT_ID="your-github-client-id"\nexport GITHUB_CLIENT_SECRET="your-github-client-secret"\nexport GOOGLE_CLIENT_ID="your-google-client-id"\nexport GOOGLE_CLIENT_SECRET="your-google-client-secret"\n\n# Webhook secrets\nexport GITHUB_WEBHOOK_SECRET=$(openssl rand -base64 32)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"docker-secrets-production",children:"Docker Secrets (Production)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# docker-compose.yml\nversion: '3.8'\nservices:\n  app:\n    image: area-backend:latest\n    secrets:\n      - jwt_access_secret\n      - jwt_refresh_secret\n      - database_password\n    environment:\n      JWT_ACCESS_SECRET_FILE: /run/secrets/jwt_access_secret\n      JWT_REFRESH_SECRET_FILE: /run/secrets/jwt_refresh_secret\n      DATABASE_PASSWORD_FILE: /run/secrets/database_password\n\nsecrets:\n  jwt_access_secret:\n    external: true\n  jwt_refresh_secret:\n    external: true\n  database_password:\n    external: true\n"})}),"\n",(0,r.jsx)(n.h2,{id:"threat-model",children:"Threat Model"}),"\n",(0,r.jsx)(n.h3,{id:"identified-threats-and-mitigations",children:"Identified Threats and Mitigations"}),"\n",(0,r.jsx)(n.h4,{id:"1-authentication-bypass",children:"1. Authentication Bypass"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Threat"}),": Attackers attempting to bypass authentication mechanisms."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"JWT token validation on every request"}),"\n",(0,r.jsx)(n.li,{children:"Token blacklisting in Redis"}),"\n",(0,r.jsx)(n.li,{children:"Secure token storage in HTTP-only cookies"}),"\n",(0,r.jsx)(n.li,{children:"Token rotation and short expiration times"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-cross-site-scripting-xss",children:"2. Cross-Site Scripting (XSS)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Threat"}),": Injection of malicious scripts into web pages."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"HTTP-only cookies prevent JavaScript access to tokens"}),"\n",(0,r.jsx)(n.li,{children:"Content Security Policy headers"}),"\n",(0,r.jsx)(n.li,{children:"Input validation and output encoding"}),"\n",(0,r.jsx)(n.li,{children:"JSONB parameter validation"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"3-cross-site-request-forgery-csrf",children:"3. Cross-Site Request Forgery (CSRF)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Threat"}),": Unauthorized commands transmitted from a user's browser."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SameSite cookie attribute (Strict)"}),"\n",(0,r.jsx)(n.li,{children:"CORS configuration restricting origins"}),"\n",(0,r.jsx)(n.li,{children:"Double-submit cookie pattern (future enhancement)"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"4-sql-injection",children:"4. SQL Injection"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Threat"}),": Injection of malicious SQL code."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Parameterized queries with JPA"}),"\n",(0,r.jsx)(n.li,{children:"Input validation annotations"}),"\n",(0,r.jsx)(n.li,{children:"Prepared statements"}),"\n",(0,r.jsx)(n.li,{children:"Database user privilege restrictions"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"5-sensitive-data-exposure",children:"5. Sensitive Data Exposure"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Threat"}),": Unauthorized access to sensitive user data."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"AES-GCM encryption for sensitive fields"}),"\n",(0,r.jsx)(n.li,{children:"TLS encryption in transit"}),"\n",(0,r.jsx)(n.li,{children:"Secure key derivation (PBKDF2)"}),"\n",(0,r.jsx)(n.li,{children:"Data minimization principles"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"6-broken-access-control",children:"6. Broken Access Control"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Threat"}),": Users accessing resources beyond their privileges."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Resource-level authorization checks"}),"\n",(0,r.jsx)(n.li,{children:"Method-level security annotations"}),"\n",(0,r.jsx)(n.li,{children:"User ownership validation"}),"\n",(0,r.jsx)(n.li,{children:"Admin privilege separation"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"7-security-misconfiguration",children:"7. Security Misconfiguration"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Threat"}),": Insecure default configurations."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Secure-by-default configuration"}),"\n",(0,r.jsx)(n.li,{children:"Environment-specific settings"}),"\n",(0,r.jsx)(n.li,{children:"Regular security configuration reviews"}),"\n",(0,r.jsx)(n.li,{children:"Automated security testing"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"8-vulnerable-dependencies",children:"8. Vulnerable Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Threat"}),": Known vulnerabilities in third-party libraries."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Regular dependency updates"}),"\n",(0,r.jsx)(n.li,{children:"Vulnerability scanning in CI/CD"}),"\n",(0,r.jsx)(n.li,{children:"Security advisory monitoring"}),"\n",(0,r.jsx)(n.li,{children:"Dependency license compliance"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"9-email-verification-attacks",children:"9. Email Verification Attacks"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Threat"}),": Attacks targeting the email verification and password reset system."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Time-limited verification tokens (24 hours)"}),"\n",(0,r.jsx)(n.li,{children:"Single-use tokens that expire after use"}),"\n",(0,r.jsx)(n.li,{children:"Rate limiting on password reset requests"}),"\n",(0,r.jsx)(n.li,{children:"Generic responses to prevent email enumeration"}),"\n",(0,r.jsx)(n.li,{children:"Secure token generation with cryptographically strong random values"}),"\n",(0,r.jsx)(n.li,{children:"HTTPS-only token transmission"}),"\n",(0,r.jsx)(n.li,{children:"Account lockout after failed verification attempts"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"10-password-reset-attacks",children:"10. Password Reset Attacks"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Threat"}),": Unauthorized password resets through token interception or prediction."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigations"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Very short token expiry (15 minutes for reset tokens)"}),"\n",(0,r.jsx)(n.li,{children:"Single-use tokens invalidated immediately after use"}),"\n",(0,r.jsx)(n.li,{children:"Secure token storage and transmission"}),"\n",(0,r.jsx)(n.li,{children:"Rate limiting on reset requests per email/IP"}),"\n",(0,r.jsx)(n.li,{children:"Session invalidation after password change"}),"\n",(0,r.jsx)(n.li,{children:"Email confirmation before allowing reset"}),"\n",(0,r.jsx)(n.li,{children:"Strong password requirements enforcement"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"development-security-practices",children:"Development Security Practices"}),"\n",(0,r.jsx)(n.h4,{id:"secure-coding-guidelines",children:"Secure Coding Guidelines"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Validation"}),": Validate all input at API boundaries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Output Encoding"}),": Encode all output to prevent injection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameterized Queries"}),": Never concatenate SQL strings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Don't expose sensitive information in errors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logging Security"}),": Don't log sensitive data"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"code-review-security-checklist",children:"Code Review Security Checklist"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Authentication and authorization properly implemented"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Input validation covers all parameters"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Sensitive data encrypted before storage"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Error messages don't leak information"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","SQL queries use parameterization"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Dependencies are up-to-date"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Security headers configured correctly"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"deployment-security-practices",children:"Deployment Security Practices"}),"\n",(0,r.jsx)(n.h4,{id:"container-security",children:"Container Security"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'# Secure Dockerfile practices\nFROM openjdk:21-jre-slim\n\n# Create non-root user\nRUN groupadd -r area && useradd -r -g area area\n\n# Set working directory\nWORKDIR /app\n\n# Copy application\nCOPY --chown=area:area target/area-backend.jar app.jar\n\n# Switch to non-root user\nUSER area\n\n# Expose port\nEXPOSE 8080\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:8080/actuator/health || exit 1\n\n# Run application\nENTRYPOINT ["java", "-jar", "app.jar"]\n'})}),"\n",(0,r.jsx)(n.h4,{id:"network-security",children:"Network Security"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"TLS 1.3 for all external communications"}),"\n",(0,r.jsx)(n.li,{children:"Network segmentation between services"}),"\n",(0,r.jsx)(n.li,{children:"Firewall rules restricting unnecessary ports"}),"\n",(0,r.jsx)(n.li,{children:"VPN access for administrative functions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"monitoring-and-incident-response",children:"Monitoring and Incident Response"}),"\n",(0,r.jsx)(n.h4,{id:"security-monitoring",children:"Security Monitoring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class SecurityEventLogger {\n    \n    private static final Logger securityLogger = \n        LoggerFactory.getLogger("SECURITY");\n    \n    public void logAuthenticationSuccess(String userId, String source) {\n        securityLogger.info("AUTH_SUCCESS user={} source={}", userId, source);\n    }\n    \n    public void logAuthenticationFailure(String email, String source, String reason) {\n        securityLogger.warn("AUTH_FAILURE email={} source={} reason={}", \n            email, source, reason);\n    }\n    \n    public void logPrivilegeEscalation(String userId, String resource, String action) {\n        securityLogger.error("PRIVILEGE_ESCALATION user={} resource={} action={}", \n            userId, resource, action);\n    }\n    \n    public void logSuspiciousActivity(String userId, String activity, String details) {\n        securityLogger.warn("SUSPICIOUS_ACTIVITY user={} activity={} details={}", \n            userId, activity, details);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"incident-response-plan",children:"Incident Response Plan"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Detection"}),": Automated monitoring and alerting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Analysis"}),": Security team investigation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Containment"}),": Immediate threat mitigation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Eradication"}),": Root cause elimination"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recovery"}),": Service restoration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lessons Learned"}),": Process improvement"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"security-testing",children:"Security Testing"}),"\n",(0,r.jsx)(n.h4,{id:"automated-security-testing",children:"Automated Security Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# GitHub Actions security workflow\nname: Security Scan\non: [push, pull_request]\n\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Run OWASP Dependency Check\n        run: |\n          ./gradlew dependencyCheckAnalyze\n          \n      - name: Run Static Analysis\n        run: |\n          ./gradlew sonarqube\n          \n      - name: Run Security Unit Tests\n        run: |\n          ./gradlew test -Dspring.profiles.active=security-test\n"})}),"\n",(0,r.jsx)(n.h4,{id:"penetration-testing-checklist",children:"Penetration Testing Checklist"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Authentication bypass attempts"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Authorization control testing"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Input validation testing"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Session management testing"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Business logic flaw testing"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Infrastructure security testing"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);